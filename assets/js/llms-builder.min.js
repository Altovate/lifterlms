!function(b){var e,t,i,p,o,l,m,g,f,v,w,y,n,s,k,r,a,c,d,u;function S(e,t){return n.call(e,t)}function h(e,t){var i,n,s,o,l,r,a,c,d,u,h,_=t&&t.split("/"),p=w.map,m=p&&p["*"]||{};if(e){for(l=(e=e.split("/")).length-1,w.nodeIdCompat&&k.test(e[l])&&(e[l]=e[l].replace(k,"")),"."===e[0].charAt(0)&&_&&(e=_.slice(0,_.length-1).concat(e)),d=0;d<e.length;d++)if("."===(h=e[d]))e.splice(d,1),--d;else if(".."===h){if(0===d||1===d&&".."===e[2]||".."===e[d-1])continue;0<d&&(e.splice(d-1,2),d-=2)}e=e.join("/")}if((_||m)&&p){for(d=(i=e.split("/")).length;0<d;--d){if(n=i.slice(0,d).join("/"),_)for(u=_.length;0<u;--u)if(s=(s=p[_.slice(0,u).join("/")])&&s[n]){o=s,r=d;break}if(o)break;!a&&m&&m[n]&&(a=m[n],c=d)}!o&&a&&(o=a,r=c),o&&(i.splice(0,r,o),e=i.join("/"))}return e}function C(t,i){return function(){var e=s.call(arguments,0);return"string"!=typeof e[0]&&1===e.length&&e.push(null),l.apply(p,e.concat([t,i]))}}function q(t){return function(e){f[t]=e}}function x(e){if(S(v,e)){var t=v[e];delete v[e],y[e]=!0,o.apply(p,t)}if(!S(f,e)&&!S(y,e))throw new Error("No "+e);return f[e]}function M(e){var t,i=e?e.indexOf("!"):-1;return-1<i&&(t=e.substring(0,i),e=e.substring(i+1,e.length)),[t,e]}function L(e){return e?M(e):[]}function V(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,V),t.l=!0,t.exports}function B(n){var s,o=_.rest(arguments);return _.each(u,function(e){var t,i;!s&&(i=(t=e)._unsavedConfig[n],_.isBoolean(i)?i:(_.isString(i)?t[i]:i).apply(t,o))&&(s=e._unsavedConfig.prompt)}),s}f={},v={},w={},y={},n=Object.prototype.hasOwnProperty,s=[].slice,k=/\.js$/,m=function(e,t){var i,n,s=M(e),o=s[0],l=t[1];return e=s[1],o&&(i=x(o=h(o,l))),o?e=i&&i.normalize?i.normalize(e,(n=l,function(e){return h(e,n)})):h(e,l):(o=(s=M(e=h(e,l)))[0],e=s[1],o&&(i=x(o))),{f:o?o+"!"+e:e,n:e,pr:o,p:i}},g={require:function(e){return C(e)},exports:function(e){var t=f[e];return void 0!==t?t:f[e]={}},module:function(e){return{id:e,uri:"",exports:f[e],config:(t=e,function(){return w&&w.config&&w.config[t]||{}})};var t}},o=function(e,t,i,n){var s,o,l,r,a,c,d,u=[],h=typeof i;if(c=L(n=n||e),"undefined"==h||"function"==h){for(t=!t.length&&i.length?["require","exports","module"]:t,a=0;a<t.length;a+=1)if("require"===(o=(r=m(t[a],c)).f))u[a]=g.require(e);else if("exports"===o)u[a]=g.exports(e),d=!0;else if("module"===o)s=u[a]=g.module(e);else if(S(f,o)||S(v,o)||S(y,o))u[a]=x(o);else{if(!r.p)throw new Error(e+" missing "+o);r.p.load(r.n,C(n,!0),q(o),{}),u[a]=f[o]}l=i?i.apply(f[e],u):void 0,e&&(s&&s.exports!==p&&s.exports!==f[e]?f[e]=s.exports:l===p&&d||(f[e]=l))}else e&&(f[e]=i)},e=t=l=function(e,t,i,n,s){if("string"==typeof e)return g[e]?g[e](t):x(m(e,L(t)).f);if(!e.splice){if((w=e).deps&&l(w.deps,w.callback),!t)return;t.splice?(e=t,t=i,i=null):e=p}return t=t||function(){},"function"==typeof i&&(i=n,n=s),n?o(p,e,t,i):setTimeout(function(){o(p,e,t,i)},4),l},l.config=function(e){return l(e)},e._defined=f,(i=function(e,t,i){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(i=t,t=[]),S(f,e)||S(v,e)||(v[e]=[e,t,i])}).amd={jQuery:!0},i("vendor/almond",function(){}),window.llms=window.llms||{},void 0!==window.wp&&void 0!==window.wp.hooks?window.llms.hooks=window.wp.hooks:window.llms.hooks=(a={},V.m=r={209:function(e,t,i){"use strict";i.r(t);function a(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)}function c(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)}function n(r){return function(t,e,i){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:10;if(c(t)&&a(e))if("function"==typeof i)if("number"==typeof n){var s={callback:i,priority:n,namespace:e};if(r[t]){for(var o=r[t].handlers,l=0;l<o.length&&!(o[l].priority>n);)l++;o.splice(l,0,s),(r.__current||[]).forEach(function(e){e.name===t&&e.currentIndex>=l&&e.currentIndex++})}else r[t]={handlers:[s],runs:0};"hookAdded"!==t&&k("hookAdded",t,e,i,n)}else console.error("If specified, the hook priority must be a number.");else console.error("The hook callback must be a function.")}}function s(l,r){return function(i,e){if(c(i)&&(r||a(e))){if(!l[i])return 0;var n=0;if(r)n=l[i].handlers.length,l[i]={runs:l[i].runs,handlers:[]};else for(var s=l[i].handlers,t=function(t){s[t].namespace===e&&(s.splice(t,1),n++,(l.__current||[]).forEach(function(e){e.name===i&&e.currentIndex>=t&&e.currentIndex--}))},o=s.length-1;0<=o;o--)t(o);return"hookRemoved"!==i&&k("hookRemoved",i,e),n}}}function o(t){return function(e){return e in t}}function l(r,a){return function(e){r[e]||(r[e]={handlers:[],runs:0}),r[e].runs++;for(var t=r[e].handlers,i=arguments.length,n=new Array(1<i?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];if(!t||!t.length)return a?n[0]:void 0;var o={name:e,currentIndex:0};for(r.__current.push(o),r[e]||(r[e]={runs:0,handlers:[]});o.currentIndex<t.length;){var l=t[o.currentIndex].callback.apply(null,n);a&&(n[0]=l),o.currentIndex++}return r.__current.pop(),a?n[0]:void 0}}function r(e){return function(){return e.__current&&e.__current.length?e.__current[e.__current.length-1].name:null}}function d(t){return function(e){return void 0===e?void 0!==t.__current[0]:!!t.__current[0]&&e===t.__current[0].name}}function u(t){return function(e){if(c(e))return t[e]&&t[e].runs?t[e].runs:0}}function h(){var e=Object.create(null),t=Object.create(null);return e.__current=[],t.__current=[],{addAction:n(e),addFilter:n(t),removeAction:s(e),removeFilter:s(t),hasAction:o(e),hasFilter:o(t),removeAllActions:s(e,!0),removeAllFilters:s(t,!0),doAction:l(e),applyFilters:l(t,!0),currentAction:r(e),currentFilter:r(t),doingAction:d(e),doingFilter:d(t),didAction:u(e),didFilter:u(t),actions:e,filters:t}}i.d(t,"addAction",function(){return p}),i.d(t,"addFilter",function(){return m}),i.d(t,"removeAction",function(){return g}),i.d(t,"removeFilter",function(){return f}),i.d(t,"hasAction",function(){return b}),i.d(t,"hasFilter",function(){return v}),i.d(t,"removeAllActions",function(){return w}),i.d(t,"removeAllFilters",function(){return y}),i.d(t,"doAction",function(){return k}),i.d(t,"applyFilters",function(){return S}),i.d(t,"currentAction",function(){return C}),i.d(t,"currentFilter",function(){return q}),i.d(t,"doingAction",function(){return x}),i.d(t,"doingFilter",function(){return M}),i.d(t,"didAction",function(){return L}),i.d(t,"didFilter",function(){return V}),i.d(t,"actions",function(){return B}),i.d(t,"filters",function(){return z}),i.d(t,"createHooks",function(){return h});var _=h(),p=_.addAction,m=_.addFilter,g=_.removeAction,f=_.removeFilter,b=_.hasAction,v=_.hasFilter,w=_.removeAllActions,y=_.removeAllFilters,k=_.doAction,S=_.applyFilters,C=_.currentAction,q=_.currentFilter,x=_.doingAction,M=_.doingFilter,L=_.didAction,V=_.didFilter,B=_.actions,z=_.filters}},V.c=a,V.d=function(e,t,i){V.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},V.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},V.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return V.d(t,"a",t),t},V.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},V.p="",V(V.s=209)),i("vendor/wp-hooks",function(){}),i("underscore",[],function(){return _}),i("backbone",[],function(){return Backbone}),i("jquery",[],function(){return jQuery}),c=this,d=function(h,t,a){var i=t.View,c="model",r=["collection","modelView","modelViewOptions","itemTemplate","itemTemplateFunction","detachedRendering"],n={background:"transparent",border:"none","box-shadow":"none"};function s(e){var s={};if(!h.isArray(e))throw new Error("Option declarations must be an array.");return h.each(e,function(e){var t,i,n;if(i=!1,n=void 0,h.isString(e))t=e;else{if(!h.isObject(e))throw new Error("Each element in the option declarations array must be either a string or an object.");t=h.first(h.keys(e)),n=h.isFunction(e[t])?e[t]:h.clone(e[t])}"!"===t[t.length-1]&&(i=!0,t=t.slice(0,t.length-1)),s[t]=s[t]||{},s[t].required=i,h.isUndefined(n)||(s[t].defaultValue=n)}),s}return t.CollectionView=t.View.extend({tagName:"ul",events:{"mousedown > li, tbody > tr > td":"_listItem_onMousedown","dblclick > li, tbody > tr > td":"_listItem_onDoubleClick",click:"_listBackground_onClick","click ul.collection-view, table.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},spawnMessages:{focus:"focus"},passMessages:{"*":"."},initializationOptions:[{collection:null},{modelView:null},{modelViewOptions:{}},{itemTemplate:null},{itemTemplateFunction:null},{selectable:!0},{clickToSelect:!0},{selectableModelsFilter:null},{visibleModelsFilter:null},{sortableModelsFilter:null},{selectMultiple:!1},{clickToToggle:!1},{processKeyEvents:!0},{sortable:!1},{sortableOptions:null},{reuseModelViews:!0},{detachedRendering:!1},{emptyListCaption:null}],initialize:function(e){t.ViewOptions.add(this,"initializationOptions"),this.setOptions(e),this.collection||(this.collection=new t.Collection),this._hasBeenRendered=!1,this._isBackboneCourierAvailable()&&t.Courier.add(this),this.$el.data("view",this),this.$el.addClass("collection-view collection-list"),this.selectable&&this.$el.addClass("selectable"),this.selectable&&this.processKeyEvents&&this.$el.attr("tabindex",0),this.selectedItems=[],this._updateItemTemplate(),this.collection&&this._registerCollectionEvents(),this.viewManager=new ChildViewContainer},_onOptionsChanged:function(n,s){var o=this,l=!1;h.each(h.keys(n),function(e){var t=n[e],i=s[e];switch(e){case"collection":t!==i&&(o.stopListening(i),o._registerCollectionEvents());break;case"selectMultiple":!t&&1<o.selectedItems.length&&o.setSelectedModel(h.first(o.selectedItems),{by:"cid"});break;case"selectable":!t&&0<o.selectedItems.length&&o.setSelectedModels([]),t&&this.processKeyEvents?o.$el.attr("tabindex",0):o.$el.removeAttr("tabindex",0);break;case"sortable":n.sortable?o._setupSortable():o.$el.sortable("destroy");break;case"selectableModelsFilter":o.reapplyFilter("selectableModels");break;case"sortableOptions":o.$el.sortable("destroy"),o._setupSortable();break;case"sortableModelsFilter":o.reapplyFilter("sortableModels");break;case"visibleModelsFilter":o.reapplyFilter("visibleModels");break;case"itemTemplate":o._updateItemTemplate();break;case"processKeyEvents":t&&this.selectable?o.$el.attr("tabindex",0):o.$el.removeAttr("tabindex",0);break;case"modelView":o.viewManager.each(function(e){o.viewManager.remove(e),e.remove()})}h.contains(r,e)&&(l=!0)}),this._hasBeenRendered&&l&&this.render()},setOption:function(e,t){var i={};i[e]=t,this.setOptions(i)},getSelectedModel:function(e){return this.selectedItems.length?h.first(this.getSelectedModels(e)):null},getSelectedModels:function(e){var t=this,i=(e=h.extend({},{by:c},e)).by,n=[];switch(i){case"id":h.each(this.selectedItems,function(e){n.push(t.collection.get(e).id)});break;case"cid":n=n.concat(this.selectedItems);break;case"offset":var s=0;this._getVisibleItemEls().each(function(){a(this).is(".selected")&&n.push(s),s++});break;case"model":h.each(this.selectedItems,function(e){n.push(t.collection.get(e))});break;case"view":h.each(this.selectedItems,function(e){n.push(t.viewManager.findByModel(t.collection.get(e)))});break;default:throw new Error("Invalid referenceBy option: "+i)}return n},setSelectedModels:function(t,e){if(!h.isArray(t))throw"Invalid parameter value";if(this.selectable||!(0<t.length)){var i=(e=h.extend({},{silent:!1,by:c},e)).by,n=[];switch(i){case"cid":n=t;break;case"id":this.collection.each(function(e){h.contains(t,e.id)&&n.push(e.cid)});break;case"model":n=h.pluck(t,"cid");break;case"view":h.each(t,function(e){n.push(e.model.cid)});break;case"offset":var s=0;this._getVisibleItemEls().each(function(){var e=a(this);h.contains(t,s)&&n.push(e.attr("data-model-cid")),s++});break;default:throw new Error("Invalid referenceBy option: "+i)}var o=this.getSelectedModels(),l=h.clone(this.selectedItems);this.selectedItems=this._convertStringsToInts(n),this._validateSelection();var r=this.getSelectedModels();this._containSameElements(l,this.selectedItems)||(this._addSelectedClassToSelectedItems(l),e.silent||(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:r,oldSelectedModels:o}):this.trigger("selectionChanged",r,o)),this.updateDependentControls())}},setSelectedModel:function(e,t){e||0===e?this.setSelectedModels([e],t):this.setSelectedModels([],t)},getView:function(e,t){switch((t=h.extend({},{by:c},t)).by){case"id":case"cid":var i=this.collection.get(e)||null;return i&&this.viewManager.findByModel(i);case"offset":var n=this._getVisibleItemEls();return a(n.get(e));case"model":return this.viewManager.findByModel(e);default:throw new Error("Invalid referenceBy option: "+referenceBy)}},render:function(){var i;this._hasBeenRendered=!0,this.selectable&&this._saveSelection(),i=this._getContainerEl();var n,s=this.viewManager;this.viewManager=new ChildViewContainer,s.each(function(e){this.reuseModelViews&&this.collection.get(e.model.cid)?e.$el.detach():e.remove()},this),i.empty(),this.detachedRendering&&(n=document.createDocumentFragment()),this.collection.each(function(e){var t=s.findByModelCid(e.cid);this.reuseModelViews&&!h.isUndefined(t)||(t=this._createNewModelView(e,this._getModelViewOptions(e))),this._insertAndRenderModelView(t,n||i)},this),this.detachedRendering&&i.append(n),this.sortable&&this._setupSortable(),this._showEmptyListCaptionIfAppropriate(),this._isBackboneCourierAvailable()?this.spawn("render"):this.trigger("render"),this.selectable&&(this._restoreSelection(),this.updateDependentControls()),this.forceRerenderOnNextSortEvent=!1},_showEmptyListCaptionIfAppropriate:function(){if((this._removeEmptyListCaption(),this.emptyListCaption)&&0===this._getVisibleItemEls().length){var e,t;e=h.isFunction(this.emptyListCaption)?this.emptyListCaption():this.emptyListCaption;var i=a("<var class='empty-list-caption'>"+e+"</var>");t=this._isRenderedAsList()?i.wrapAll("<li class='not-sortable'></li>").parent().css(n):i.wrapAll("<tr class='not-sortable'><td colspan='1000'></td></tr>").parent().parent().css(n),this._getContainerEl().append(t)}},_removeEmptyListCaption:function(){this._isRenderedAsList()?this._getContainerEl().find("> li > var.empty-list-caption").parent().remove():this._getContainerEl().find("> tr > td > var.empty-list-caption").parent().parent().remove()},_insertAndRenderModelView:function(e,t,i){var n=this._wrapModelView(e);if(11===t.nodeType)t.appendChild(n.get(0));else{var s=t.children().length;!h.isUndefined(i)&&0<=i&&i<s?t.children().eq(i).before(n):(!h.isUndefined(i)&&s<i&&(this.forceRerenderOnNextSortEvent=!0),t.append(n))}this.viewManager.add(e),!1===e.render()&&(n.hide(),n.addClass("not-visible"));var o=!1;h.isFunction(this.visibleModelsFilter)&&(o=!this.visibleModelsFilter(e.model)),1===n.children().length?n.toggle(!o):e.$el.toggle(!o),n.toggleClass("not-visible",o),!o&&this.emptyListCaption&&this._removeEmptyListCaption()},updateDependentControls:function(){this._isBackboneCourierAvailable()?this.spawn("updateDependentControls",{selectedModels:this.getSelectedModels()}):this.trigger("updateDependentControls",this.getSelectedModels())},remove:function(){this.viewManager.each(function(e){e.remove()}),t.View.prototype.remove.apply(this,arguments)},reapplyFilter:function(e){var i=this;if(!h.contains(["selectableModels","sortableModels","visibleModels"],e))throw new Error("Invalid filter identifier supplied to reapplyFilter: "+e);switch(e){case"visibleModels":i.viewManager.each(function(e){var t=i.visibleModelsFilter&&!i.visibleModelsFilter.call(i,e.model);e.$el.toggleClass("not-visible",t),i._modelViewHasWrapperLI(e)?e.$el.closest("li").toggleClass("not-visible",t).toggle(!t):e.$el.toggle(!t)}),this._showEmptyListCaptionIfAppropriate();break;case"sortableModels":i.$el.sortable("destroy"),i.viewManager.each(function(e){var t=i.sortableModelsFilter&&!i.sortableModelsFilter.call(i,e.model);e.$el.toggleClass("not-sortable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-sortable",t)}),i._setupSortable();break;case"selectableModels":i.viewManager.each(function(e){var t=i.selectableModelsFilter&&!i.selectableModelsFilter.call(i,e.model);e.$el.toggleClass("not-selectable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-selectable",t)}),i._validateSelection()}},_removeModelView:function(e){this.selectable&&this._saveSelection(),this.viewManager.remove(e),this._modelViewHasWrapperLI(e)&&e.$el.parent().remove(),e.remove(),this.selectable&&this._restoreSelection(),this._showEmptyListCaptionIfAppropriate()},_validateSelectionAndRender:function(){this._validateSelection(),this.render()},_registerCollectionEvents:function(){this.listenTo(this.collection,"add",function(e){var t;this._hasBeenRendered&&(t=this._createNewModelView(e,this._getModelViewOptions(e)),this._insertAndRenderModelView(t,this._getContainerEl(),this.collection.indexOf(e))),this._isBackboneCourierAvailable()?this.spawn("add",t):this.trigger("add",t)}),this.listenTo(this.collection,"remove",function(e){var t;this._hasBeenRendered&&(t=this.viewManager.findByModelCid(e.cid),this._removeModelView(t)),this._isBackboneCourierAvailable()?this.spawn("remove"):this.trigger("remove")}),this.listenTo(this.collection,"reset",function(){this._hasBeenRendered&&this.render(),this._isBackboneCourierAvailable()?this.spawn("reset"):this.trigger("reset")}),this.listenTo(this.collection,"sort",function(e,t){this._hasBeenRendered&&(!0!==t.add||this.forceRerenderOnNextSortEvent)&&this.render(),this._isBackboneCourierAvailable()?this.spawn("sort"):this.trigger("sort")})},_getContainerEl:function(){if(this._isRenderedAsTable()){var e=this.$el.find("> tbody");if(0<e.length)return e}return this.$el},_getClickedItemId:function(e){var t=null,i=a(e.currentTarget);if(i.closest(".collection-view").get(0)===this.$el.get(0)){var n=i.closest("[data-model-cid]");return 0<n.length&&(t=n.attr("data-model-cid"),a.isNumeric(t)&&(t=parseInt(t,10))),t}},_updateItemTemplate:function(){var e;if(this.itemTemplate){if(0===a(this.itemTemplate).length)throw"Could not find item template from selector: "+this.itemTemplate;e=a(this.itemTemplate).html()}else e=this.$(".item-template").html();e&&(this.itemTemplateFunction=h.template(e))},_validateSelection:function(){var e=h.pluck(this.collection.models,"cid");this.selectedItems=h.intersection(e,this.selectedItems),h.isFunction(this.selectableModelsFilter)&&(this.selectedItems=h.filter(this.selectedItems,function(e){return this.selectableModelsFilter.call(this,this.collection.get(e))},this))},_saveSelection:function(){if(!this.selectable)throw"Attempt to save selection on non-selectable list";this.savedSelection={items:h.clone(this.selectedItems),offset:this.getSelectedModel({by:"offset"})}},_restoreSelection:function(){if(!this.savedSelection)throw"Attempt to restore selection but no selection has been saved!";this.setSelectedModels([],{silent:!0}),0<this.savedSelection.items.length&&(this.setSelectedModels(this.savedSelection.items,{by:"cid",silent:!0}),0===this.selectedItems.length&&this.setSelectedModel(this.savedSelection.offset,{by:"offset"}),this.selectedItems.length!==this.savedSelection.items.length&&(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:this.getSelectedModels(),oldSelectedModels:[]}):this.trigger("selectionChanged",this.getSelectedModels(),[])))},_addSelectedClassToSelectedItems:function(e){h.isUndefined(e)&&(e=[]);var t=e;t=h.without(t,this.selectedItems),h.each(t,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").removeClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").removeClass("selected")},this);var i=this.selectedItems;i=h.without(i,e),h.each(i,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").addClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").addClass("selected")},this)},_reorderCollectionBasedOnHTML:function(){var i=this;this._getContainerEl().children().each(function(){var e=a(this).attr("data-model-cid");if(e){var t=i.collection.get(e);t&&(i.collection.remove(t,{silent:!0}),i.collection.add(t,{silent:!0,sort:!i.collection.comparator}))}}),this._isBackboneCourierAvailable()?this.spawn("reorder"):this.collection.trigger("reorder"),this.collection.comparator&&this.collection.sort()},_getModelViewConstructor:function(e){return this.modelView||i},_getModelViewOptions:function(e){var t=this.modelViewOptions;return h.isFunction(t)&&(t=t(e)),h.extend({model:e},t)},_createNewModelView:function(e,t){var i=this._getModelViewConstructor(e);if(h.isUndefined(i))throw"Could not find modelView constructor for model";var n=new i(t);return n.collectionListView=n.collectionView=this,n},_wrapModelView:function(e){var t;return this._isRenderedAsTable()?(t=e.$el,e.$el.attr("data-model-cid",e.model.cid)):this._isRenderedAsList()&&(e.$el.is("li")?(t=e.$el,e.$el.attr("data-model-cid",e.model.cid)):t=e.$el.wrapAll("<li data-model-cid='"+e.model.cid+"'></li>").parent()),h.isFunction(this.sortableModelsFilter)&&(this.sortableModelsFilter.call(this,e.model)||(t.addClass("not-sortable"),e.$el.addClass("not-selectable"))),h.isFunction(this.selectableModelsFilter)&&(this.selectableModelsFilter.call(this,e.model)||(t.addClass("not-selectable"),e.$el.addClass("not-selectable"))),t},_convertStringsToInts:function(e){return h.map(e,function(e){if(!h.isString(e))return e;var t=parseInt(e,10);return t==e?t:e})},_containSameElements:function(e,t){return e.length==t.length&&h.intersection(e,t).length==e.length},_isRenderedAsTable:function(){return"table"===this.$el.prop("tagName").toLowerCase()},_isRenderedAsList:function(){return!this._isRenderedAsTable()},_modelViewHasWrapperLI:function(e){return this._isRenderedAsList()&&!e.$el.is("li")},_getVisibleItemEls:function(){return this._getContainerEl().find("> [data-model-cid]:not(.not-visible)")},_charCodes:{upArrow:38,downArrow:40},_isBackboneCourierAvailable:function(){return!h.isUndefined(t.Courier)},_setupSortable:function(){var e=h.extend({axis:"y",distance:10,forcePlaceholderSize:!0,items:this._isRenderedAsTable()?"> tbody > tr:not(.not-sortable)":"> li:not(.not-sortable)",start:h.bind(this._sortStart,this),change:h.bind(this._sortChange,this),stop:h.bind(this._sortStop,this),receive:h.bind(this._receive,this),over:h.bind(this._over,this)},h.result(this,"sortableOptions"));this.$el=this.$el.sortable(e)},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortChange:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortChange",{modelBeingSorted:i}):this.trigger("sortChange",i)},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),n=this._getContainerEl().children().index(t.item);-1==n&&i&&this.collection.remove(i),i&&(this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n))},_receive:function(e,t){var i=t.sender.data("view");if(i&&i.collection){var n=this._getContainerEl().children().index(t.item),s=i.collection.get(t.item.attr("data-model-cid"));i.collection.remove(s),this.collection.add(s,{at:n}),s.collection=this.collection,this.setSelectedModel(s)}},_over:function(e,t){this._getContainerEl().find("> var.empty-list-caption").hide()},_onKeydown:function(e){if(!this.processKeyEvents)return!0;var t=!1;if(1==this.getSelectedModels({by:"offset"}).length){var i=this.getSelectedModel({by:"offset"});e.which===this._charCodes.upArrow&&0!==i?(this.setSelectedModel(i-1,{by:"offset"}),t=!0):e.which===this._charCodes.downArrow&&i!==this.collection.length-1&&(this.setSelectedModel(i+1,{by:"offset"}),t=!0)}return!t},_listItem_onMousedown:function(t){var i=this._getClickedItemId(t);if(i){var e=this.collection.get(i);if(this._isBackboneCourierAvailable()){var n={clickedModel:e,metaKeyPressed:t.ctrlKey||t.metaKey};h.each(["preventDefault","stopPropagation","stopImmediatePropagation"],function(e){n[e]=function(){t[e]()}}),this.spawn("click",n)}else this.trigger("click",e)}if(this.selectable&&this.clickToSelect)if(i){if(h.isFunction(this.selectableModelsFilter)&&!this.selectableModelsFilter.call(this,this.collection.get(i)))return;if(this.selectMultiple&&t.shiftKey){var s=-1;0<this.selectedItems.length&&this.collection.find(function(e){return s++,h.contains(this.selectedItems,e.cid)},this);var o=-1;this.collection.find(function(e){return o++,e.cid==i},this);for(var l=-1==s?o:s,r=Math.min(o,l),a=Math.max(o,l),c=[],d=r;d<=a;d++)c.push(this.collection.at(d).cid);if(this.setSelectedModels(c,{by:"cid"}),document.selection&&document.selection.empty)document.selection.empty();else if(window.getSelection){var u=window.getSelection();u&&u.removeAllRanges&&u.removeAllRanges()}}else(this.selectMultiple||h.contains(this.selectedItems,i))&&(this.clickToToggle||t.metaKey||t.ctrlKey)?h.contains(this.selectedItems,i)?this.setSelectedModels(h.without(this.selectedItems,i),{by:"cid"}):this.setSelectedModels(h.union(this.selectedItems,[i]),{by:"cid"}):this.setSelectedModels([i],{by:"cid"})}else this.setSelectedModels([])},_listItem_onDoubleClick:function(e){var t=this._getClickedItemId(e);if(t){var i=this.collection.get(t);this._isBackboneCourierAvailable()?this.spawn("doubleClick",{clickedModel:i,metaKeyPressed:e.ctrlKey||e.metaKey}):this.trigger("doubleClick",i)}},_listBackground_onClick:function(e){this.selectable&&this.clickToSelect&&a(e.target).is(".collection-view")&&this.setSelectedModels([])}},{setDefaultModelViewConstructor:function(e){i=e}}),t.ViewOptions={},t.ViewOptions.add=function(e,n){h.isUndefined(n)&&(n="options"),e.setOptions=function(l){var r=this,a={},c={},e=h.result(this,n);if(!h.isUndefined(e)){var t=s(e);h.each(t,function(e,t){var i=e.required,n=e.defaultValue;if(i){if((!l||!h.contains(h.keys(l),t))&&h.isUndefined(r[t]))throw new Error('Required option "'+t+'" was not supplied.');if(l&&h.contains(h.keys(l),t)&&h.isUndefined(l[t]))throw new Error('Required option "'+t+'" can not be set to undefined.')}if(l&&t in l&&!h.isUndefined(l[t])){var s=r[t],o=l[t];h.isUndefined(s)||s===o||(c[t]=s,a[t]=o),r[t]=o}else h.isUndefined(r[t])&&(r[t]=n)})}0<h.keys(a).length&&(h.isFunction(r.onOptionsChanged)?r.onOptionsChanged(a,c):h.isFunction(r._onOptionsChanged)&&r._onOptionsChanged(a,c))},e.getOptions=function(){var e=h.result(this,n);if(h.isUndefined(e))return{};var t=s(e),i=h.keys(t);return h.pick(this,i)}},ChildViewContainer=function(n){function e(e){this._views={},this._indexByModel={},this._indexByCustom={},this._updateLength(),n.each(e,this.add,this)}n.extend(e.prototype,{add:function(e,t){var i=e.cid;(this._views[i]=e).model&&(this._indexByModel[e.model.cid]=i),t&&(this._indexByCustom[t]=i),this._updateLength()},findByModel:function(e){return this.findByModelCid(e.cid)},findByModelCid:function(e){var t=this._indexByModel[e];return this.findByCid(t)},findByCustom:function(e){var t=this._indexByCustom[e];return this.findByCid(t)},findByIndex:function(e){return n.values(this._views)[e]},findByCid:function(e){return this._views[e]},findIndexByCid:function(t){var i=-1;return n.find(this._views,function(e){if(i++,e.model.cid==t)return e})?i:-1},remove:function(e){var i=e.cid;e.model&&delete this._indexByModel[e.model.cid],n.any(this._indexByCustom,function(e,t){if(e===i)return delete this._indexByCustom[t],!0},this),delete this._views[i],this._updateLength()},call:function(e){this.apply(e,n.tail(arguments))},apply:function(t,i){n.each(this._views,function(e){n.isFunction(e[t])&&e[t].apply(e,i||[])})},_updateLength:function(){this.length=n.size(this._views)}});return n.each(["forEach","each","map","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","toArray","first","initial","rest","last","without","isEmpty","pluck"],function(t){e.prototype[t]=function(){var e=[n.values(this._views)].concat(n.toArray(arguments));return n[t].apply(n,e)}}),e}(h),t.CollectionView},"function"==typeof i&&i.amd?i("vendor/backbone.collectionView",["underscore","backbone","jquery"],d):"undefined"!=typeof exports?module.exports=d(t("underscore"),t("backbone"),t("backbone").$):d(c._,c.Backbone,c.jQuery||c.Zepto||c.$),u=[],Backbone.History.prototype.navigate=_.wrap(Backbone.History.prototype.navigate,function(e,t,i){var n=B("unloadRouterPrompt",t,i);n?confirm(n+" \n\nAre you sure you want to leave this page?")&&e.call(this,t,i):e.call(this,t,i)}),window.onbeforeunload=function(e){return B("unloadWindowPrompt",e)},_.extend(Backbone.Model.prototype,{unsaved:{},_trackingChanges:!1,_originalAttrs:{},_unsavedChanges:{},startTracking:function(){return this._unsavedConfig=_.extend({},{prompt:"You have unsaved changes!",unloadRouterPrompt:!1,unloadWindowPrompt:!1},this.unsaved||{}),this._trackingChanges=!0,this._resetTracking(),this._triggerUnsavedChanges(),this},stopTracking:function(){return this._trackingChanges=!1,this._originalAttrs={},this._unsavedChanges={},this._triggerUnsavedChanges(),this},restartTracking:function(){return this._resetTracking(),this._triggerUnsavedChanges(),this},resetAttributes:function(){if(this._trackingChanges)return this.attributes=this._originalAttrs,this._resetTracking(),this._triggerUnsavedChanges(),this},unsavedAttributes:function(e){if(!e)return!_.isEmpty(this._unsavedChanges)&&_.clone(this._unsavedChanges);var t,i=!1,n=this._unsavedChanges;for(var s in e)_.isEqual(n[s],t=e[s])||((i=i||{})[s]=t);return i},_resetTracking:function(){this._originalAttrs=_.clone(this.attributes),this._unsavedChanges={}},_triggerUnsavedChanges:function(){var t;this.trigger("unsavedChanges",!_.isEmpty(this._unsavedChanges),_.clone(this._unsavedChanges)),this.unsaved&&(t=this,_.isEmpty(t._unsavedChanges)?u=_.filter(u,function(e){return t.cid!=e.cid}):_.findWhere(u,{cid:t.cid})||u.push(t))}}),Backbone.Model.prototype.set=_.wrap(Backbone.Model.prototype.set,function(e,t,i,n){var s,o;return null==t?this:("object"==typeof t?(s=t,n=i):(s={})[t]=i,n=n||{},o=e.call(this,s,n),this._trackingChanges&&!n.silent&&(_.each(s,_.bind(function(e,t){_.isEqual(this._originalAttrs[t],e)?delete this._unsavedChanges[t]:this._unsavedChanges[t]=e},this)),this._triggerUnsavedChanges()),o)}),Backbone.sync=_.wrap(Backbone.sync,function(e,t,o,i){return i=i||{},"update"==t&&(i.success=_.wrap(i.success,_.bind(function(e,t,i,n){var s;return e&&(s=e.call(this,t,i,n)),o._trackingChanges&&(o._resetTracking(),o._triggerUnsavedChanges()),s},this))),e(t,o,i)}),i("vendor/backbone.trackit",function(){}),i("Models/Image",[],function(){return Backbone.Model.extend({defaults:{enabled:"no",id:"",size:"full",src:""},initialize:function(){this.startTracking()}})}),i("Models/_Relationships",[],function(){return{relationship_defaults:{parent:{},children:{}},relationships:{},init_relationships:function(e){var t=this.get_relationships();t.parent&&e&&e.parent&&this.set_parent(e.parent),_.each(t.children,function(e,t){if(!e.conditional||!0===e.conditional(this)){var i,n=this.get(t);e.lookup?i=e.lookup(n):"model"===e.type?i=window.llms_builder.construct.get_model(e.class,n):"collection"===e.type&&(i=window.llms_builder.construct.get_collection(e.class,n)),this.set(t,i),"model"===e.type?this._maybe_set_parent_reference(i):"collection"===e.type&&(i.parent=this,i.each(function(e){this._maybe_set_parent_reference(e)},this))}},this)},get_child_props:function(){var i=[];return _.each(this.get_relationships().children,function(e,t){e.conditional&&!0!==e.conditional(this)||i.push(t)},this),i},get_parent:function(){var e=this.get_relationships();return!!e.parent&&e.parent.reference},get_relationships:function(){return b.extend(!0,this.relationships,this.relationship_defaults)},set_parent:function(e){this.relationships.parent.reference=e},_maybe_set_parent_reference:function(e){if(e&&e.get_relationships){var t=e.get_relationships();t.parent&&t.parent.model===this.get("type")&&e.set_parent(this)}}}}),i("Models/QuestionChoice",["Models/Image","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_question",type:"model"},children:{choice:{conditional:function(e){return"image"===e.get("choice_type")},class:"Image",model:"image",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choice:"",choice_type:"text",correct:!1,marker:"A",question_id:"",type:"choice"}},initialize:function(e,t){this.startTracking(),this.init_relationships(t)},get_parent:function(){return this.collection.parent},get_trash_id:function(){return this.get("question_id")+":"+this.get("id")},is_selectable:function(){return this.get_parent().get("question_type").get_choice_selectable()}},t))}),i("Collections/QuestionChoices",["Models/QuestionChoice"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_correct),this.on("remove",this.update_correct),this.on("correct-update",this.update_correct)},count_correct:function(){return _.size(this.get_correct())},get_correct:function(){return this.filter(function(e){return e.get("correct")})},update_correct:function(e){if(this.parent.get("question_type").get_choice_selectable()){var t=this.without(e),i=this.parent;if("no"===i.get("multi_choices")&&_.each(t,function(e){e.set("correct",!1)}),0===this.count_correct()&&0<i.get("points")){var n=1===this.size()?this.models:t;_.first(n).set("correct",!0)}}},update_order:function(){var t=this,i=this.parent;this.each(function(e){e.set("marker",i.get("question_type").get_choice_markers()[t.indexOf(e)])})}})}),i("Models/QuestionType",[],function(){return Backbone.Model.extend({defaults:function(){return{choices:!1,clarifications:!0,default_choices:[],description:!0,icon:"question",id:"generic",image:!0,keywords:[],name:"Generic",placeholder:"",points:!0,video:!0}},get_keywords:function(){var e=this.get("name");return[e].concat(this.get("keywords")).concat(e.split(" "))},get_choice_markers:function(){return this._get_choice_option("markers")},get_choice_selectable:function(){return this._get_choice_option("selectable")},get_choice_type:function(){return this._get_choice_option("type")},get_min_choices:function(){return this._get_choice_option("min")},get_max_choices:function(){return this._get_choice_option("max")},get_multi_choices:function(){return!!this.get("choices")&&this._get_choice_option("multi")},_get_choice_option:function(e){var t=this.get("choices");return!(!t||!t[e])&&t[e]}})}),i("Models/_Utilities",[],function(){return{fields:[],get_edit_post_link:function(){return this.has_temp_id()?"":window.llms_builder.admin_url+"post.php?post="+this.get("id")+"&action=edit"},get_settings_fields:function(){var e=this.schema||{};return window.llms_builder.schemas.get(e,this.get("type").replace("llms_",""),this)},has_temp_id:function(){return!_.isNumber(this.get("id"))&&0===this.get("id").indexOf("temp_")},init_custom_schema:function(){var e=_.filter(this.get_settings_fields(),function(e){return e.custom});_.each(e,function(e){_.each(_.flatten(e.fields),function(i){var e=[i.attribute],n=this.get("custom");i.switch_attribute&&e.push(i.switch_attribute),_.each(e,function(e){var t=i.attribute_prefix?i.attribute_prefix+e:e;n&&n[t]&&this.set(e,n[t][0])},this)},this)},this)}}}),i("Models/Question",["Models/Image","Collections/Questions","Collections/QuestionChoices","Models/QuestionType","Models/_Relationships","Models/_Utilities"],function(e,t,i,n,s,o){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_quiz",type:"model"},children:{choices:{class:"QuestionChoices",model:"choice",type:"collection"},image:{class:"Image",model:"image",type:"model"},questions:{class:"Questions",conditional:function(e){var t=e.get("question_type");return"group"===(_.isString(t)?t:t.get("id"))},model:"llms_question",type:"collection"},question_type:{class:"QuestionType",lookup:function(e){return _.isString(e)?window.llms_builder.questions.get(e):e},model:"question_type",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choices:[],content:"",description_enabled:"no",image:{},multi_choices:"no",menu_order:1,points:1,question_type:"generic",questions:[],parent_id:"",title:"",type:"llms_question",video_enabled:"no",video_src:"",_expanded:!1}},initialize:function(e,t){var i=this;this.startTracking(),this.init_relationships(t),!1!==this.get("question_type").choices&&(this._ensure_min_choices(),this.listenTo(this.get("choices"),"remove",function(){setTimeout(function(){i._ensure_min_choices()},0)})),this.get("question_type").get("points")||this.set("points",0),_.delay(function(e){e.on("change:points",e.get_parent().update_points,e.get_parent())},1,this)},add_choice:function(e,t){var i=this.get("question_type").get_max_choices();if(!(this.get("choices").size()>=i)){t=t||{},(e=e||{}).choice_type=this.get("question_type").get_choice_type(),e.question_id=this.get("id");var n=(t.parent=this).get("choices").add(e,t);Backbone.pubSub.trigger("question-add-choice",n,this)}},before_save:function(e,t){return"full"===t&&(e.question_type=this.get("question_type").get("id")),e},get_parent:function(){var e=this.get_relationships();if(e.parent){if(this.collection&&this.collection.parent)return this.collection.parent;if(e.parent.reference)return e.parent.reference}return!1},get_l10n_type:function(e){return e?LLMS.l10n.translate("questions"):LLMS.l10n.translate("question")},get_type_index:function(){var i=this.get("question_type").get("id");return this.collection.filter(function(e){var t=e.get("question_type").get("id");return"content"!==i?"content"!==t:"content"===t}).indexOf(this)},get_type_iterator:function(){var e=this.get_type_index();return-1===e?"":"content"!==this.get("question_type").get("id")?e+1:"ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("")[e]},get_qid:function(){var e=this.get_parent_question(),t="";return e&&(t=e.get_qid()+"."),t+this.get_type_iterator()},get_parent_question:function(){return!!this.is_in_group()&&this.collection.parent},get_parent_quiz:function(){return this.get_parent()},get_points:function(){return this.get("question_type").get("points")?this.get("points"):0},get_points_percentage:function(){var e=this.get_parent().get("_points"),t=this.get("points");return 0===e?"0%":(t/e*100).toFixed(2)+"%"},is_in_group:function(){return"question"===this.collection.parent.get("type")},_ensure_min_choices:function(){for(var e=this.get("choices");e.size()<this.get("question_type").get_min_choices();)this.add_choice()}},s,o))}),i("Collections/Questions",["Models/Question"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_parent)},update_order:function(){var t=this;this.each(function(e){e.set("menu_order",t.indexOf(e)+1)})},update_parent:function(e){e.set("parent_id",this.parent.get("id"))}})}),i("Schemas/Quiz",[],function(){return window.llms.hooks.applyFilters("llms_define_quiz_schema",{default:{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"content",id:"description",label:LLMS.l10n.translate("Description"),type:"editor"}],[{attribute:"passing_percent",id:"passing-percent",label:LLMS.l10n.translate("Passing Percentage"),min:0,max:100,tip:LLMS.l10n.translate("Minimum percentage of total points required to pass the quiz"),type:"number"},{attribute:"allowed_attempts",id:"allowed-attempts",label:LLMS.l10n.translate("Limit Attempts"),switch_attribute:"limit_attempts",tip:LLMS.l10n.translate("Limit the maximum number of times a student can take this quiz"),type:"switch-number"},{attribute:"time_limit",id:"time-limit",label:LLMS.l10n.translate("Time Limit"),min:1,max:360,switch_attribute:"limit_time",tip:LLMS.l10n.translate("Enforce a maximum number of minutes a student can spend on each attempt"),type:"switch-number"}],[{attribute:"show_correct_answer",id:"show-correct-answer",label:LLMS.l10n.translate("Show Correct Answers"),tip:LLMS.l10n.translate("When enabled, students will be shown the correct answer to any question they answered incorrectly."),type:"switch"},{attribute:"random_questions",id:"random-questions",label:LLMS.l10n.translate("Randomize Question Order"),tip:LLMS.l10n.translate("Display questions in a random order for each attempt. Content questions are locked into their defined positions."),type:"switch"}]]}})}),i("Models/Quiz",["Collections/Questions","Models/Lesson","Models/Question","Models/_Relationships","Models/_Utilities","Schemas/Quiz"],function(e,t,i,n,s,o){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"lesson",type:"model"},children:{questions:{class:"Questions",model:"llms_question",type:"collection"}}},schema:o,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Quiz"),type:"llms_quiz",lesson_id:"",status:"draft",content:"",allowed_attempts:5,limit_attempts:"no",limit_time:"no",passing_percent:65,name:"",random_answers:"no",time_limit:30,show_correct_answer:"no",questions:[],_points:0,permalink:"",_show_settings:!1,_questions_loaded:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.init_relationships(),this.listenTo(this.get("questions"),"add",this.update_points),this.listenTo(this.get("questions"),"remove",this.update_points),this.set("_points",this.get_total_points()),this.on("change:status",function(){"publish"===this.get("status")&&this.get_parent().set("quiz_enabled","yes")}),window.llms.hooks.doAction("llms_quiz_model_init",this)},add_question:function(e){e.parent_id=this.get("id");var t=this.get("questions").add(e,{parent:this});Backbone.pubSub.trigger("quiz-add-question",t,this)},get_l10n_type:function(e){return e?LLMS.l10n.translate("quizzes"):LLMS.l10n.translate("quiz")},get_total_points:function(){var t=0;return this.get("questions").each(function(e){t+=e.get_points()}),t},load_questions:function(n){if(this.get("_questions_loaded"))n();else{var t=this;LLMS.Ajax.call({data:{action:"llms_builder",action_type:"lazy_load",course_id:window.llms_builder.CourseModel.get("id"),load_id:this.get("id")},error:function(e,t,i){console.log(e,t,i),window.llms_builder.debug.log("==== start load_questions error ====",e,t,i,"==== finish load_questions error ===="),n(!0)},success:function(e){e&&e.questions?(t.set("_questions_loaded",!0),e.questions&&_.each(e.questions,t.add_question,t),n()):n(!0)}})}},update_points:function(){this.set("_points",this.get_total_points())}},n,s))}),i("Schemas/Lesson",[],function(){return window.llms.hooks.applyFilters("llms_define_lesson_schema",{default:{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"video_embed",id:"video-embed",label:LLMS.l10n.translate("Video Embed URL"),type:"video_embed"},{attribute:"audio_embed",id:"audio-embed",label:LLMS.l10n.translate("Audio Embed URL"),type:"audio_embed"}],[{attribute:"free_lesson",id:"free-lesson",label:LLMS.l10n.translate("Free Lesson"),tip:LLMS.l10n.translate("Free lessons can be accessed without enrollment."),type:"switch"},{attribute:"require_passing_grade",id:"require-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Quiz"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's quiz before the lesson can be completed."),type:"switch",condition:function(){return"yes"===this.get("quiz_enabled")}},{attribute:"require_assignment_passing_grade",id:"require-assignment-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Assignment"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's assignment before the lesson can be completed."),type:"switch",condition:function(){return"undefined"!==window.llms_builder.assignments&&"yes"===this.get("assignment_enabled")}},{attribute:"points",id:"points",label:LLMS.l10n.translate("Lesson Weight"),label_after:LLMS.l10n.translate("POINTS"),min:0,max:99,tip:LLMS.l10n.translate("Determines the weight of the lesson when calculating the overall grade of the course."),tip_position:"top-left",type:"number",condition:function(){return"yes"===this.get("quiz_enabled")||"undefined"!==window.llms_builder.assignments&&"yes"===this.get("assignment_enabled")}}],[{attribute:"prerequisite",condition:function(){return!1===this.is_first_in_course()},id:"prerequisite",label:LLMS.l10n.translate("Prerequisite"),switch_attribute:"has_prerequisite",type:"switch-select",options:function(){return this.get_available_prereq_options()}}],[{attribute:"drip_method",id:"drip-method",label:LLMS.l10n.translate("Drip Method"),switch_attribute:"drip_method",type:"select",options:function(){var e=[{key:"",val:LLMS.l10n.translate("None")},{key:"date",val:LLMS.l10n.translate("On a specific date")},{key:"enrollment",val:LLMS.l10n.translate("# of days after course enrollment")}];return this.get_course()&&this.get_course().get("start_date")&&e.push({key:"start",val:LLMS.l10n.translate("# of days after course start date")}),"yes"===this.get("has_prerequisite")&&e.push({key:"prerequisite",val:LLMS.l10n.translate("# of days after prerequisite lesson completion")}),e}},{attribute:"days_before_available",condition:function(){return-1!==["enrollment","start","prerequisite"].indexOf(this.get("drip_method"))},id:"days-before-available",label:LLMS.l10n.translate("# of days"),min:0,type:"number"},{attribute:"date_available",date_format:"Y-m-d",condition:function(){return"date"===this.get("drip_method")},id:"date-available",label:LLMS.l10n.translate("Date"),timepicker:"false",type:"datepicker"},{attribute:"time_available",condition:function(){return"date"===this.get("drip_method")},datepicker:"false",date_format:"h:i A",id:"time-available",label:LLMS.l10n.translate("Time"),type:"datepicker"}]]}})}),i("Models/Lesson",["Models/Quiz","Models/_Relationships","Models/_Utilities","Schemas/Lesson"],function(e,t,i,n){return Backbone.Model.extend(_.defaults({relationships:{parents:{model:"section",type:"model"},children:{quiz:{class:"Quiz",conditional:function(e){return"yes"===e.get("quiz_enabled")||!_.isEmpty(e.get("quiz"))},model:"llms_quiz",type:"model"}}},schema:n,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Lesson"),type:"lesson",order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,parent_section:"",edit_url:"",view_url:"",content:"",audio_embed:"",has_prerequisite:"no",require_passing_grade:"yes",require_assignment_passing_grade:"yes",video_embed:"",free_lesson:"",points:1,assignment:{},assignment_enabled:"no",quiz:{},quiz_enabled:"no",_forceSync:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.maybe_init_assignments(),this.init_relationships();var e=this.get("quiz");_.isEmpty(e)||e.get("lesson_id")||e.set("lesson_id",this.get("id")),window.llms.hooks.doAction("llms_lesson_model_init",this)},get_course:function(){return this.get_parent().get_parent()},get_l10n_type:function(e){return e?LLMS.l10n.translate("lessons"):LLMS.l10n.translate("lesson")},get_parent:function(){var e=this.get_relationships();return e.parent&&e.parent.reference?e.parent.reference:!(!this.collection||!this.collection.parent)&&this.collection.parent},get_points_percentage:function(){var e=this.get_course().get_total_points(),t=+this.get("points");return _.isNumber(t)||(t=0),0===e?"0%":(t/e*100).toFixed(2)+"%"},get_available_prereq_options:function(){var s=this.get_parent().collection.indexOf(this.get_parent()),o=this.collection.indexOf(this),t=[];return this.get_course().get("sections").each(function(e,i){if(i<=s){var n={label:LLMS.l10n.replace("Section %1$d: %2$s",{"%1$d":e.get("order"),"%2$s":e.get("title")}),options:[]};e.get("lessons").each(function(e,t){(i!==s||t<o)&&n.options.push({key:e.get("id"),val:LLMS.l10n.replace("Lesson %1$d: %2$s",{"%1$d":e.get("order"),"%2$s":e.get("title")})})},this),t.push(n)}},this),t},add_quiz:function(e){(e=e||{}).lesson_id=this.id,e._questions_loaded=!0,e.title||(e.title=LLMS.l10n.replace("%1$s Quiz",{"%1$s":this.get("title")})),this.set("quiz",e),this.init_relationships();var t=this.get("quiz");return this.set("quiz_enabled","yes"),window.llms.hooks.doAction("llms_lesson_add_quiz",t,this),t},is_first_in_course:function(){if(this.collection.indexOf(this))return!1;var e=this.get_parent();return!e.collection.indexOf(e)},maybe_init_assignments:function(){window.llms_builder.assignments&&(this.relationships.children.assignment={class:"Assignment",conditional:function(e){return"yes"===e.get("assignment_enabled")||!_.isEmpty(e.get("assignment"))},model:"llms_assignment",type:"model"})}},t,i))}),i("Collections/Lessons",["Models/Lesson"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.on_reorder),this.on("add",this.on_reorder),this.on("remove",this.on_reorder)},on_reorder:function(){this.update_order(),this.validate_prereqs()},update_order:function(){this.each(function(e){e.set("order",this.indexOf(e)+1)},this)},validate_prereqs:function(){this.each(function(e){"yes"===e.get("has_prerequisite")&&-1===_.pluck(_.flatten(_.pluck(e.get_available_prereq_options(),"options")),"key").indexOf(+e.get("prerequisite"))&&e.set({prerequisite:0,has_prerequisite:"no"})},this)}})}),i("Collections/QuestionTypes",["Models/QuestionType"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("add",this.comparator),this.on("remove",this.comparator)},comparator:function(e){return e.get("group").order}})}),i("Models/Section",["Collections/Lessons","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"course",type:"model"},children:{lessons:{class:"Lessons",model:"lesson",type:"collection"}}},defaults:function(){return{id:_.uniqueId("temp_"),lessons:[],order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,title:LLMS.l10n.translate("New Section"),type:"section",_expanded:!1,_selected:!1}},initialize:function(){this.startTracking(),this.init_relationships()},add_lesson:function(e,t){return t=t||{},(e=e||{})instanceof Backbone.Model?(e.set("parent_section",this.get("id")),e.set_parent(this)):e.parent_section=this.get("id"),this.get("lessons").add(e,t)},get_l10n_type:function(e){return e?LLMS.l10n.translate("sections"):LLMS.l10n.translate("section")},get_next:function(e){return this._get_sibling("next",e)},get_prev:function(e){return this._get_sibling("prev",e)},_get_sibling:function(e,t){t="undefined"===t||t;var i,n=this.collection.size()-1,s=this.collection.indexOf(this);if("next"===e?i=s+1:"prev"===e&&(i=s-1),i<=n||i<=0)return this.collection.at(i);if(t){if("next"===e)return this.collection.first();if("prev"===e)return this.collection.last()}return!1}},t))}),i("Collections/Sections",["Models/Section"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order)},update_order:function(){var t=this;this.each(function(e){e.set("order",t.indexOf(e)+1)})}})}),i("Collections/loader",["Collections/Lessons","Collections/QuestionChoices","Collections/Questions","Collections/QuestionTypes","Collections/Sections"],function(e,t,i,n,s){return{Lessons:e,QuestionChoices:t,Questions:i,QuestionTypes:n,Sections:s}}),i("Models/Abstract",["Models/_Relationships","Models/_Utilities"],function(e,t){return Backbone.Model.extend(_.defaults({},e,t))}),i("Models/Course",["Collections/Sections","Models/_Relationships","Models/_Utilities"],function(e,t,i){return Backbone.Model.extend(_.defaults({relationships:{children:{sections:{class:"Sections",model:"section",type:"collection"}}},defaults:function(){return{edit_url:"",sections:[],title:"New Course",type:"course",view_url:""}},initialize:function(){this.startTracking(),this.init_relationships(),Backbone.pubSub.on("add-new-section",this.add_section,this),Backbone.pubSub.on("add-new-lesson",this.add_lesson,this),Backbone.pubSub.on("lesson-search-select",this.add_existing_lesson,this)},add_existing_lesson:function(e){var t=e.data;"clone"===e.action?(delete t.id,t.quiz&&(t.quiz=_.prepareQuizObjectForCloning(t.quiz),t.quiz._questions_loaded=!0)):t._forceSync=!0,delete t.order,delete t.parent_course,delete t.parent_section,t.author&&_.isObject(t.author)&&t.author.id&&(t.author=t.author.id),this.add_lesson(t)},add_lesson:function(e){var t;t=(e=e||{}).parent_section?this.get("sections").get(e.parent_section):(t=this.get_selected_section())||this.get("sections").last(),e._selected=!0,e.parent_course=this.get("id");var i=t.add_lesson(e,{});return Backbone.pubSub.trigger("new-lesson-added",i),t.set("_expanded",!0),i},add_section:function(e){e=e||{};var t=this.get("sections"),i={},n=this.get_selected_section();n&&(i.at=t.indexOf(n)+1),t.add(e,i)},get_selected_section:function(){return this.get("sections").find(function(e){return e.get("_selected")})},get_total_points:function(){var i=0;return this.get("sections").each(function(e){e.get("lessons").each(function(e){var t=e.get("points");_.isNumber(t)||(t=0),i+=+t})}),i}},t,i))}),i("Models/loader",["Models/Abstract","Models/Course","Models/Image","Models/Lesson","Models/Question","Models/QuestionChoice","Models/QuestionType","Models/Quiz","Models/Section"],function(e,t,i,n,s,o,l,r,a){return{Abstract:e,Course:t,Image:i,Lesson:n,Question:s,QuestionChoice:o,QuestionType:l,Quiz:r,Section:a}}),i("Views/_Detachable",[],function(){return{events:{'click a[href="#llms-detach-model"]':"detach_model"},detach_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to detach this %s?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-detached",this.model),this.trigger("model-trashed",this.model))}}}),i("Views/_Editable",[],function(){return{media_lib:null,events:{"click .llms-add-image":"open_media_lib",'click a[href="#llms-edit-slug"]':"make_slug_editable",'click a[href="#llms-remove-image"]':"remove_image","change .llms-editable-select select":"on_select",'change .llms-switch input[type="checkbox"]':"toggle_switch","change .llms-editable-radio input":"on_radio_select","focusin .llms-input":"on_focus","focusout .llms-input":"on_blur","keydown .llms-input":"on_keydown",'input .llms-input[type="number"]':"on_blur","paste .llms-input[data-formatting]":"on_paste"},get_allowed_tags:function(e){return e.attr("data-formatting")?_.map(e.attr("data-formatting").split(","),function(e){return e.trim()}):["b","i","u","strong","em"]},get_content:function(e){return"INPUT"===e[0].tagName?e.val():e.attr("data-formatting")||e.hasClass("ql-editor")?_.stripFormatting(e.html(),this.get_allowed_tags(e)):e.text()},has_changed:function(e){var t=b(e.target);return t.attr("data-original-content")!==this.get_content(t)},is_valid:function(e){var t=this,i=b(e.target),n=this.get_content(i),s=i.attr("data-type");if((i.attr("required")||i.attr("data-required"))&&n.length<1)return!1;if("url"===s||"video"===s){if(!this._validate_url(this.get_content(i)))return!1}else"permalink"===s&&LLMS.Ajax.call({data:{action:"llms_builder",action_type:"get_permalink",course_id:window.llms_builder.CourseModel.get("id"),id:t.model.get("id"),title:t.model.get("title"),slug:n},beforeSend:function(){LLMS.Spinner.start(i.closest(".llms-editable-toggle-group"),"small")},success:function(e){e.permalink&&e.slug&&(t.model.set("permalink",e.permalink),t.model.set("name",e.slug),t.render())}});return!0},init_datepickers:function(){this.$el.find(".llms-editable-date input").each(function(){b(this).datetimepicker({format:b(this).attr("data-date-format")||"Y-m-d h:i A",datepicker:void 0===b(this).attr("data-date-datepicker")||"true"==b(this).attr("data-date-datepicker"),timepicker:void 0===b(this).attr("data-date-timepicker")||"true"==b(this).attr("data-date-timepicker"),onClose:function(e,t){t.blur()}})})},init_formatting_els:function(){var o=this;this.$el.find(".llms-input-formatting[data-formatting]").each(function(){var e=b(this).attr("data-formatting").split(","),n=b(this).attr("data-attribute"),s=new Quill(this,{modules:{toolbar:[e],keyboard:{bindings:{tab:{key:9,handler:function(e,t){return!0}},13:{key:13,handler:function(e,t){return s.root.blur(),!1}}}}},placeholder:b(this).attr("data-placeholder"),theme:"bubble"});s.on("text-change",function(e,t,i){o.model.set(n,o.get_content(b(s.root)))}),Backbone.pubSub.trigger("formatting-ed-init",s,b(this),o)})},init_selects:function(){this.$el.find(".llms-editable-select select").llmsSelect2({width:"100%"}).trigger("change")},on_blur:function(e){e.stopPropagation(),this.model.set("_has_focus",!1,{silent:!0});b(e.target);this.has_changed(e)&&(this.is_valid(e)?this.save_edits(e):this.revert_edits(e))},on_focus:function(e){e.stopPropagation(),this.model.set("_has_focus",!0,{silent:!0})},on_paste:function(e){e.preventDefault(),e.stopPropagation();var t=(e.originalEvent||e).clipboardData.getData("text/plain");window.document.execCommand("insertText",!1,t)},on_select:function(e){var t,i=b(e.target),n=i.attr("multiple"),s=i.attr("name"),o=i.find("option:selected");t=n?(t=[],o.map(function(){return this.value}).get()):o[0].value,this.model.set(s,t)},on_radio_select:function(e){var t=b(e.target),i=t.attr("name"),n=t.val();this.model.set(i,n)},on_keydown:function(e){e.stopPropagation();var t=e.which||e.keyCode,i=e.shiftKey;switch(t){case 13:i||(e.preventDefault(),e.target.blur());break;case 27:e.preventDefault(),this.revert_edits(e),e.target.blur()}},open_media_lib:function(e){e.stopPropagation();var s=this,o=b(e.currentTarget);s.media_lib?s.media_lib.uploader.uploader.param("post_id"):(s.media_lib=wp.media.frames.file_frame=wp.media({title:LLMS.l10n.translate("Select an image"),button:{text:LLMS.l10n.translate("Use this image")},multiple:!1}),s.media_lib.on("select",function(){var e,t=o.attr("data-image-size"),i=s.media_lib.state().get("selection").first().toJSON(),n=s.model.get(o.attr("data-attribute"));e=t&&i.sizes[t]?i.sizes[t].url:i.url,n.set({id:i.id,src:e})})),s.media_lib.open()},remove_image:function(e){e.preventDefault(),this.model.get(b(e.currentTarget).attr("data-attribute")).set({id:"",src:""})},revert_edits:function(e){var t=b(e.target),i=t.attr("data-original-content");t.html(i)},save_edits:function(e){var t=b(e.target),i=this.get_content(t);this.model.set(t.attr("data-attribute"),i)},toggle_switch:function(e){e.stopPropagation();var t,i=b(e.target),n=i.attr("name"),s=i.attr("data-rerender");if(t=i.is(":checked")?i.attr("data-on")?i.attr("data-on"):"yes":i.attr("data-off")?i.attr("data-off"):"no",-1!==n.indexOf(".")){var o=n.split(".");"parent"===o[0]?this.model.get_parent().set(o[1],t):this.model.get(o[0]).set(o[1],t)}else this.model.set(n,t);if(this.trigger(n.replace(".","-")+"_toggle",t),!s||"yes"===s){var l=this;setTimeout(function(){l.render()},100)}},init_editor:function(e,t){t=t||{},wp.editor.remove(e),wp.editor.initialize(e,b.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help",setup:_.bind(this.on_editor_ready,this)}},t))},make_slug_editable:function(e){var t=b(e.currentTarget),i=t.prevAll("a"),n=t.prev("input.permalink"),s=i.attr("href"),o=n.val(),l=s.replace(o,"");t.hide(),i.css({color:"#999","pointer-events":"none","text-decoration":"none"}),i.text(l.substring(0,l.length-1)),n.show().focus()},on_editor_ready:function(t){var i=this,n=b("#"+t.id),e=n.closest(".llms-editable-editor"),s=e.find(".llms-label"),o=n.attr("data-attribute");s.length&&s.prependTo(e.find(".wp-editor-tools")),t.on("change",function(e){i.model.set(o,wp.editor.getContent(t.id))}),n.on("input",function(e){i.model.set(o,n.val())}),e.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){n.trigger("input")},10)})},_validate_url:function(e){var t=document.createElement("a");return t.href=e,t.host&&t.host!==window.location.host}}}),i("Views/_Receivable",[],function(){return{_receive:function(e,t){if(t.sender.hasClass("ui-draggable")){var i=this._getContainerEl().children().index(t.helper);return t.helper.remove(),void this.collection.add({},{at:i})}var n=t.sender.data("view");if(n&&n.collection){var s=this._getContainerEl().children().index(t.item),o=n.collection.get(t.item.attr("data-model-cid"));n.collection.remove(o),this.collection.add(o,{at:s}),o.collection=this.collection,this.setSelectedModel(o)}}}}),i("Views/_Shiftable",[],function(){return{maybe_hide_shiftable_buttons:function(){if(this.model.collection){var e=this.model.get("type");this.model.collection.first()===this.model?this.$el.find(".shift-up--"+e).hide():this.model.collection.last()===this.model&&this.$el.find(".shift-down--"+e).hide()}},shift:function(e,t){var i=this.model.collection;i.remove(this.model),i.add(this.model,{at:t}),i.trigger("reorder")},shift_down:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t+1)},shift_up:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t-1)}}}),i("Views/_Subview",[],function(){return{subscriptions:{},state:"",views:{},get_subview:function(e){return!!this.views[e]&&this.views[e]},events_subscribe:function(e){_.each(e,function(e,t){this.subscriptions[t]=e,Backbone.pubSub.on(t,e,this)},this)},events_unsubscribe:function(){_.each(this.subscriptions,function(e,t){Backbone.pubSub.off(t,e,this),delete this.subscriptions[t]},this)},remove_subview:function(e){var t=this.get_subview(e);t&&t.instance&&(_.isEmpty(t.instance.views)||(t.instance.events_unsubscribe(),t.instance.remove_subviews()),t.instance.off(),t.instance.off(null,null,null),t.instance.remove(),t.instance.undelegateEvents(),t.instance=null)},remove_subviews:function(){_.each(this.views,function(e,t){this.remove_subview(t)},this)},render_subviews:function(i){i=i||{},_.each(this.views,function(e,t){this.state===e.state?this.render_subview(t,i):this.remove_subview(t)},this)},render_subview:function(e,t){var i=this.get_subview(e);i&&(this.remove_subview(e),i.instance||(i.instance=new i.class(t)),i.instance.render())},set_state:function(e){return this.state=e,this}}}),i("Views/_Trashable",[],function(){return{events:{'click a[href="#llms-trash-model"]':"trash_model"},trash_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to move this %s to the trash?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model),this.trigger("model-trashed",this.model))}}}),i("Views/_loader",["Views/_Detachable","Views/_Editable","Views/_Receivable","Views/_Shiftable","Views/_Subview","Views/_Trashable"],function(e,t,i,n,s,o){return{Detachable:e,Editable:t,Receivable:i,Shiftable:n,Subview:s,Trashable:o}}),i("Controllers/Construct",["Collections/loader","Models/loader","Views/_loader"],function(s,o,l){return function(){function n(e,t,i,n){return e[t]?new e[t](i,n):(console.log('"'+t+'" not found.'),!1)}return this.get_collection=function(e,t,i){return n(s,e,t,i)},this.get_model=function(e,t,i){return n(o,e,t,i)},this.extend_view=function(){for(var e=arguments[0],t=1;arguments[t];){var i=arguments[t];l[i]&&(e.events&&l[i].events&&(e.events=_.defaults(e.events,l[i].events)),e=_.defaults(e,l[i])),t++}return Backbone.View.extend(e)},this.register_collection=function(e,t){s[e]=Backbone.Collection.extend(t)},this.register_model=function(e,t){o[e]=o.Abstract.extend(t)},this}}),i("Controllers/Debug",[],function(){return function(e){var t=this,i=e.enabled||!1;this.disable=function(){t.log("LifterLMS Builder debugging disabled"),i=!1},this.enable=function(){i=!0,t.log("LifterLMS Builder debugging enabled")},this.log=function(){i&&_.each(arguments,function(e){console.log(e)})},this.toggle=function(){i?t.disable():t.enable()},i&&t.enable()}}),i("Controllers/Schemas",[],function(){return function(e){var n=e;return _.each(n,function(e){_.each(e,function(e){e.custom=!0})}),this.get=function(e,t,i){return n[t]&&(e=_.extend(e,n[t])),e},this}}),i("Controllers/Sync",[],function(){return function(n,e){this.saving=!1;var s=this,t=!0,i=null,o=e.check_interval_ms||1e4,l=new Backbone.Collection,r=new Backbone.Collection;function a(e,t){return"success"===e.status&&(e.message=[]),e.status="error","string"==typeof t&&(t=[t]),e.message=e.message.concat(t),e}function c(){var e={};e.changes=s.get_unsaved_changes(),e.has_unsaved_changes=s.has_unsaved_changes(e.changes),e.saving=s.saving,window.llms_builder.debug.log("==== start changes check ====",e,"==== finish changes check ===="),Backbone.pubSub.trigger("current-save-status",e)}function d(i){var n;return i instanceof Backbone.Model?(n=function(e){var t,i={};if(e.get("_has_focus"))return i;t=u(e)||!0===e.get("_forceSync")?(i=_.clone(e.attributes),"full"):(i=e.unsavedAttributes(),"partial");var n=e.get_relationships?e.get_child_props():[];return i=_.omit(i,function(e,t){return 0===t.indexOf("_")||-1!==n.indexOf(t)}),e.before_save&&(i=e.before_save(i,t)),i}(i),i.get_relationships&&_.each(i.get_child_props(),function(e){var t=d(i.get(e));_.isEmpty(t)||(n[e]=t)}),_.isEmpty(n)||(n.id=i.get("id"))):i instanceof Backbone.Collection&&(n=[],i.each(function(e){var t=d(e);_.isEmpty(t)||n.push(t)})),n}function u(e){return!_.isNumber(e.id)&&0===e.id.indexOf("temp_")}function h(i,e){Backbone.pubSub.trigger(i.get("type")+"-maybe-restart-tracking",i,e);var t=["id","orig_id"];i.get_relationships&&t.concat(i.get_child_props()),_.each(_.omit(e,t),function(e,t){_.isEqual(i.get(t),e)&&(delete i._unsavedChanges[t],i._originalAttrs[t]=e)}),i.unset("_forceSync")}function p(n){var e={detach:l,trash:r};return _.each(e,function(t,e){if(n[e]){var i=[];_.each(n[e],function(e){e.error?i.push(e.error):t.remove(e.id)}),i.length&&_.extend(n,a(n,i))}}),n}function m(e){return e.updates&&e.updates&&(e=function n(s,o,l,r){if(!s[o])return s;if(l.get(o)instanceof Backbone.Model){var e=s[o];if(e.error)_.extend(r,a(r,e.error));else{var t=l.get(o);e.id!=e.orig_id&&(t.set("id",e.id),delete t._unsavedChanges.id),h(t,e),t.get_relationships&&_.each(t.get_child_props(),function(e){_.extend(s[o],n(s[o],e,t,r))})}}else l.get(o)instanceof Backbone.Collection&&_.each(s[o],function(e,t){if(e.error)_.extend(r,a(r,e.error));else{var i=l.get(o).get(e.orig_id);e.id!=e.orig_id&&(i.set("id",e.id),delete i._unsavedChanges.id),h(i,e),i.get_relationships&&_.each(i.get_child_props(),function(e){_.extend(s[o],n(s[o][t],e,i,r))})}});return r}(e.updates,"sections",n,e)),e}return this.get_unsaved_changes=function(){return{detach:l.pluck("id"),trash:r.pluck("id"),updates:d(n)}},this.has_unsaved_changes=function(e){return void 0===e&&(e=s.get_unsaved_changes()),!!_.find(e,function(e){return!1===_.isEmpty(e)})},this.save_now=function(){t?wp.heartbeat.connectNow():function(){if(!s.saving){var e=s.get_unsaved_changes();s.has_unsaved_changes(e)&&(e.id=n.get("id"),LLMS.Ajax.call({data:{action:"llms_builder",action_type:"ajax_save",course_id:e.id,llms_builder:JSON.stringify(e)},beforeSend:function(){window.llms_builder.debug.log("==== start do_ajax_save before ====",e,"==== finish do_ajax_save before ===="),s.saving=!0,Backbone.pubSub.trigger("heartbeat-send",s)},error:function(e,t,i){window.llms_builder.debug.log("==== start do_ajax_save error ====",data,"==== finish do_ajax_save error ===="),s.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",s,{status:"error",message:e.responseText+" ("+i+" "+t+")"})},success:function(e){e.llms_builder&&(window.llms_builder.debug.log("==== start do_ajax_save success ====",e,"==== finish do_ajax_save success ===="),e.llms_builder=p(e.llms_builder),e.llms_builder=m(e.llms_builder),s.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",s,e.llms_builder))}}))}}()},this.set_check_interval=function(e){o=e,i&&clearInterval(i),o&&(i=setInterval(c,o))},Backbone.pubSub.on("model-detached",function(e){u(e)||l.add(_.clone(e.attributes))}),Backbone.pubSub.on("model-trashed",function(e){if(!u(e)){var t=_.clone(e.attributes);e.get_trash_id&&(t.id=e.get_trash_id()),r.add(t)}}),b(document).on("heartbeat-send",function(e,t){if(!s.saving){var i=s.get_unsaved_changes();s.has_unsaved_changes(i)&&(i.id=n.get("id"),s.saving=!0,t.llms_builder=JSON.stringify(i)),window.llms_builder.debug.log("==== start heartbeat-send ====",t,"==== finish heartbeat-send ===="),Backbone.pubSub.trigger("heartbeat-send",s)}}),b(document).on("heartbeat-tick",function(e,t){t.llms_builder&&(window.llms_builder.debug.log("==== start heartbeat-tick ====",t,"==== finish heartbeat-tick ===="),t.llms_builder=p(t.llms_builder),t.llms_builder=m(t.llms_builder),s.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",s,t.llms_builder))}),b(document).on("heartbeat-error",function(e,t){window.llms_builder.debug.log("==== start heartbeat-error ====",t,"==== finish heartbeat-error ===="),s.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",s,{status:"error",message:t.responseText+" ("+t.status+" "+t.statusText+")"})}),void 0===wp.heartbeat&&(window.llms_builder.debug.log("WordPress Heartbeat disabled. Autosaving is disabled!"),t=!1),o&&s.set_check_interval(o),b(window).on("beforeunload",function(){if(s.has_unsaved_changes())return c(),"Are you sure you want to abandon your changes?"}),this}}),i("Views/Lesson",["Views/_Detachable","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(e,t,i,n){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id,"data-section-id":this.model.get("parent_section")}},className:"llms-builder-item llms-lesson",events:_.defaults({"click .edit-lesson":"open_lesson_editor","click .edit-quiz":"open_quiz_editor","click .edit-assignment":"open_assignment_editor","click .section-prev":"section_prev","click .section-next":"section_next","click .shift-up--lesson":"shift_up","click .shift-down--lesson":"shift_down"},e.events,t.events,n.events),id:function(){return"llms-lesson-"+this.model.id},tagName:"li",template:wp.template("llms-lesson-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),Backbone.pubSub.on("lesson-selected",this.on_select,this),Backbone.pubSub.on("new-lesson-added",this.on_select,this)},render:function(){return this.$el.html(this.template(this.model)),this.maybe_hide_shiftable_buttons(),this.model.get("_selected")?this.$el.addClass("selected"):this.$el.removeClass("selected"),this},open_assignment_editor:function(e){e&&e.preventDefault(),Backbone.pubSub.trigger("lesson-selected",this.model,"assignment"),this.model.set("_selected",!0),this.set_hash("assignment")},open_lesson_editor:function(e){e&&e.preventDefault(),Backbone.pubSub.trigger("lesson-selected",this.model,"lesson"),this.model.set("_selected",!0),this.set_hash(!1)},open_quiz_editor:function(e){e&&e.preventDefault(),Backbone.pubSub.trigger("lesson-selected",this.model,"quiz"),this.model.set("_selected",!0),this.set_hash("quiz")},on_select:function(e){this.model.id!==e.id&&this.model.set("_selected",!1)},section_next:function(e){e.preventDefault(),this._move_to_section("next")},section_prev:function(e){e.preventDefault(),this._move_to_section("prev")},set_hash:function(e){var t="lesson:"+this.model.get("id");e&&(t+=":"+e),window.location.hash=t},_move_to_section:function(e){var t,i=this.model.collection;"next"===e?t=i.parent.get_next():"prev"===e&&(t=i.parent.get_prev()),t&&(i.remove(this.model),t.add_lesson(this.model),t.set("_expanded",!0))}},e,t,i,n))}),i("Views/LessonList",["Views/Lesson","Views/_Receivable"],function(e,t){return Backbone.CollectionView.extend(_.defaults({className:"llms-lessons",modelView:e,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-lessons",cursor:"move",handle:".drag-lesson",items:".llms-lesson",placeholder:"llms-lesson llms-sortable-placeholder"},sortable_start:function(e){b(".llms-lessons").addClass("dragging")},sortable_stop:function(e){b(".llms-lessons").removeClass("dragging")},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),n=this._getContainerEl().children().index(t.item);-1==n&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n)}},t))}),i("Views/Section",["Views/LessonList","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(e,t,i,n){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},className:"llms-builder-item llms-section",events:_.defaults({click:"select","click .expand":"expand","click .collapse":"collapse","click .shift-up--section":"shift_up","click .shift-down--section":"shift_down","mouseenter .llms-lessons":"on_mouseenter"},t.events,n.events),id:function(){return"llms-section-"+this.model.id},tagName:"li",template:wp.template("llms-section-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),this.listenTo(this.model,"change:_expanded",this.toggle_expanded),this.lessonListView.collection.on("add",this.on_lesson_add,this),this.dragTimeout=null,Backbone.pubSub.on("expand-all",this.expand,this),Backbone.pubSub.on("collapse-all",this.collapse,this)},render:function(){return this.$el.html(this.template(this.model.toJSON())),this.maybe_hide_shiftable_buttons(),this.lessonListView=new e({el:this.$el.find(".llms-lessons"),collection:this.model.get("lessons")}),this.lessonListView.render(),this.lessonListView.on("sortStart",this.lessonListView.sortable_start),this.lessonListView.on("sortStop",this.lessonListView.sortable_stop),this.lessonListView.on("selectionChanged",this.active_lesson_change,this),this.maybe_hide_trash_button(),this},active_lesson_change:function(e,t){Backbone.pubSub.trigger("active-lesson-change",{current:e,previous:t})},collapse:function(e,t){void 0===t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.removeClass("expanded").find(".drag-expanded").removeClass("drag-expanded"),t&&this.model.set("_expanded",!1),Backbone.pubSub.trigger("section-toggle",this.model)},expand:function(e,t){void 0===t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.addClass("expanded"),t&&this.model.set("_expanded",!0),Backbone.pubSub.trigger("section-toggle",this.model)},maybe_hide_trash_button:function(){var e=this.$el.find(".trash--section");this.model.get("lessons").isEmpty()?e.show():e.hide()},on_lesson_add:function(e){this.lessonListView.collection.trigger("reorder"),e.set("parent_section",this.model.get("id")),this.expand()},on_mouseenter:function(e){b(e.target).hasClass("dragging")&&(b(".drag-expanded").removeClass("drag-expanded"),b(e.target).addClass("drag-expanded"))},toggle_expanded:function(e,t){t?this.expand(null,!1):this.collapse(null,!1)}},t,i,n))}),i("Views/SectionList",["Views/Section","Views/_Receivable"],function(e,t){return Backbone.CollectionView.extend(_.defaults({el:"#llms-sections",events:{"mousedown > li.llms-section > .llms-builder-header .llms-headline":"_listItem_onMousedown",click:"_listBackground_onClick","click ul.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},modelView:e,processKeyEvents:!1,selectable:!0,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".drag-section",items:".llms-section",placeholder:"llms-section llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}},t))}),i("Views/Course",["Views/SectionList","Views/_Editable"],function(e,t){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},el:"#llms-builder-main",tagName:"div",template:wp.template("llms-course-template"),initialize:function(){this.render(),this.sectionListView=new e({collection:this.model.get("sections")}),this.sectionListView.render(),this.sectionListView.on("sortStart",this.sectionListView.sortable_start),this.sectionListView.on("sortStop",this.sectionListView.sortable_stop),this.sectionListView.on("selectionChanged",this.active_section_change),this.listenTo(this.model.get("sections"),"add",this.on_section_add),Backbone.pubSub.on("section-toggle",this.on_section_toggle,this),Backbone.pubSub.on("expand-section",this.expand_section,this),Backbone.pubSub.on("lesson-selected",this.active_lesson_change,this)},render:function(){return this.$el.html(this.template(this.model)),this},active_lesson_change:function(e){var t=this.model.get("sections").get(e.get("parent_section"));this.sectionListView.setSelectedModel(t)},active_section_change:function(e,t){_.each(e,function(e){e.set("_selected",!0)}),_.each(t,function(e){e.set("_selected",!1)})},on_section_add:function(e){this.sectionListView.setSelectedModel(e)},on_section_toggle:function(e){var t=e.get("_expanded")?[e]:[];this.sectionListView.setSelectedModels(t)}},t))}),i("Views/SettingsFields",[],function(){return Backbone.View.extend(_.defaults({events:{"click .llms-settings-group-toggle":"toggle_group"},fields:{},tagName:"div",template:wp.template("llms-settings-fields-template"),get_editor_fields:function(){return _.filter(this.fields,function(e){return this.is_editor_field(e.type)},this)},get_groups:function(){return this.model.get_settings_fields()},is_group_hidden:function(e){var t="llms-"+this.model.get("type")+"-settings-group--"+e;return"undefined"!==window.localStorage&&"hidden"===window.localStorage.getItem(t)},get_switch_attribute:function(e){return e.switch_attribute?e.switch_attribute:e.attribute},has_switch:function(e){return-1!==e.indexOf("switch")},is_default_field:function(e){return-1!==["audio_embed","datepicker","number","text","video_embed"].indexOf(e.replace("switch-",""))},is_editor_field:function(e){return-1!==["editor","switch-editor"].indexOf(e.replace("switch-",""))},is_switch_condition_met:function(e){return e.switch_on===this.model.get(e.switch_attribute)},render:function(){return this.$el.html(this.template(this)),_.each(this.get_editor_fields(),function(e){this.render_editor(e)},this),this},render_editor:function(e){var o=this;wp.editor.remove(e.id),e.settings.tinymce.setup=function(t){var i=b("#"+t.id),e=i.closest(".llms-editable-editor"),n=e.find(".llms-label"),s=i.attr("data-attribute");n.length&&n.prependTo(e.find(".wp-editor-tools")),t.on("change",function(e){o.model.set(s,wp.editor.getContent(t.id))}),i.on("input",function(e){o.model.set(s,i.val())}),e.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){i.trigger("input")},10)})},wp.editor.initialize(e.id,e.settings)},render_select_options:function(e,i){var n="",s=this.model.get(i);function o(e,t){return'<option value="'+t+'"'+_.selected(t,s)+">"+e+"</option>"}return _.each(e,function(e,t){"string"==typeof e?n+=o(e,t):"object"==typeof e&&(e.label&&e.options?(n+='<optgroup label="'+e.label+'">',n+=this.render_select_options(e.options,i)):n+=o(e.val,e.key))},this),n},setup_field:function(e,t){var i={classes:[],id:_.uniqueId(e.attribute+"_"),input_type:"text",label:"",options:{},placeholder:"",tip:"",tip_position:"top-right",settings:{}};if(e.condition&&!1===_.bind(e.condition,this.model)())return!1;switch(e.type){case"audio_embed":i.classes.push("llms-editable-audio"),i.placeholder="https://",i.tip=LLMS.l10n.translate("Use SoundCloud or Spotify audio URLS."),i.input_type="url";break;case"datepicker":i.classes.push("llms-editable-date");break;case"editor":case"switch-editor":var n=e.settings||{};i.settings=b.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help"}},n);break;case"number":i.input_type="number";break;case"permalink":i.label=LLMS.l10n.translate("Permalink");break;case"video_embed":i.classes.push("llms-editable-video"),i.placeholder="https://",i.tip=LLMS.l10n.translate("Use YouTube, Vimeo, or Wistia video URLS."),i.input_type="url"}this.has_switch(e.type)&&(i.switch_on="yes",i.switch_off="no");var s=_.defaults(_.deepClone(e),i);if(_.isFunction(s.options)&&(s.options=_.bind(s.options,this.model)()),-1!==["radio","switch-radio"].indexOf(e.type)){var o=!1;_.each(e.options,function(e,t){-1===e.indexOf(".png")&&-1===e.indexOf(".jpg")||(s.options[t]='<span><img src="'+e+'"></span>',o=!0)}),o&&s.classes.push("has-images")}return s.classes.length&&(s.classes=" "+s.classes.join(" ")),this.fields[s.id]=s},should_rerender_on_toggle:function(e){return-1!==e.indexOf("switch-")?"yes":"no"},toggle_group:function(e){e.preventDefault();var t=b(e.currentTarget).closest(".llms-model-settings");if(t.toggleClass("hidden"),"undefined"!==window.localStorage){var i=t.attr("id");t.hasClass("hidden")?window.localStorage.setItem(i,"hidden"):window.localStorage.removeItem(i)}}}))}),i("Views/LessonEditor",["Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(e,t,i,n,s){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:s,instance:null,state:"default"}},el:"#llms-editor-lesson",events:_.defaults({},e.events,t.events,i.events),template:wp.template("llms-lesson-settings-template"),initialize:function(e){this.model=e.lesson;var t=window.llms.hooks.applyFilters("llms_lesson_rerender_change_events",["change:date_available","change:drip_method","change:time_available"]);_.each(t,function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model,"change:points",this.render_points_percentage),this.listenTo(this.model,"change:has_prerequisite",function(e,t){"yes"===t&&this.$el.find('select[name="prerequisite"]').trigger("change")})},render:function(){return this.$el.html(this.template(this.model)),this.remove_subview("settings"),this.render_subview("settings",{el:"#llms-lesson-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this.render_points_percentage(),this},render_points_percentage:function(){this.$el.find("#llms-model-settings-field--points .llms-editable-input").addClass("tip--top-left").attr("data-tip",this.model.get_points_percentage())}},e,t,i,n,s))}),i("Views/Popover",[],function(){return Backbone.View.extend({defaults:{placement:"auto",width:"auto",trigger:"manual",style:"light",animation:"pop",title:"",content:"",closeable:!1,backdrop:!1,onShow:function(e){},onHide:function(e){}},tagName:"div",initialize:function(e){this.$el.length&&(this.defaults.container=this.$el.parent()),this.args=_.defaults(e.args,this.defaults),this.render()},render:function(){return this.$el.webuiPopover(this.args),this},hide:function(){return this.$el.webuiPopover("hide"),this},show:function(){return this.$el.webuiPopover("show"),this}})}),i("Views/PostSearch",[],function(){return Backbone.View.extend({events:{"select2:select":"add_post"},tagName:"select",initialize:function(e){this.post_type=e.post_type,this.searching_message=e.searching_message||LLMS.l10n.translate("Searching...")},add_post:function(e){var t=this.$el.attr("data-post-type");Backbone.pubSub.trigger(t.replace("llms_","")+"-search-select",e.params.data,e),this.$el.val(null).trigger("change")},render:function(){var t=this;return setTimeout(function(){t.$el.llmsSelect2({ajax:{dataType:"JSON",delay:250,method:"POST",url:window.ajaxurl,data:function(e){return{action:"llms_builder",action_type:"search",course_id:window.llms_builder.course.id,post_type:t.post_type,term:e.term,page:e.page,_ajax_nonce:wp_ajax_data.nonce}}},dropdownParent:b(".wrap.lifterlms.llms-builder"),escapeMarkup:function(e){return e},placeholder:t.searching_message,templateResult:t.render_result,width:"100%"}),t.$el.attr("data-post-type",t.post_type)},0),this},render_result:function(e){var t=b('<div class="llms-existing-lesson-result" />');if(e.loading)return t.append(e.text);var i=b('<aside class="llms-existing-action" />'),n=b('<div class="llms-existing-info" />');return icon="attach"===e.action?"paperclip":"clone",text="attach"===e.action?LLMS.l10n.translate("Attach"):LLMS.l10n.translate("Clone"),i.append('<i class="fa fa-'+icon+'" aria-hidden="true"></i><small>'+text+"</small>"),n.append("<h4>"+e.data.title+"</h4>"),n.append("<h5>"+LLMS.l10n.translate("ID")+": <em>"+e.data.id+"</em></h5>"),_.each(e.parents,function(e){n.append("<h5>"+e+"</em></h5>")}),t.append(i).append(n)}})}),i("Views/QuestionType",["Views/Popover","Views/PostSearch"],function(e,i){return Backbone.View.extend({className:"llms-question-type",events:{"click .llms-add-question":"add_question"},id:function(){return"llms-question-type-"+this.model.id},tagName:"li",template:wp.template("llms-question-type-template"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model)),this},add_question:function(){"existing"===this.model.get("id")?this.add_existing_question_click():this.add_new_question()},add_existing_question_click:function(){var t=new e({el:"#llms-add-question--existing",args:{backdrop:!0,closeable:!0,container:"#llms-builder-sidebar",dismissible:!0,placement:"top-left",width:"calc( 100% - 40px )",offsetLeft:250,offsetTop:60,title:LLMS.l10n.translate("Add Existing Question"),content:new i({post_type:"llms_question",searching_message:LLMS.l10n.translate("Search for existing questions...")}).render().$el}});t.show(),Backbone.pubSub.on("question-search-select",this.add_existing_question,this),Backbone.pubSub.on("question-search-select",function(e){t.hide(),Backbone.pubSub.off("question-search-select",this.add_existing_question,this)},this)},add_existing_question:function(e){var t=e.data;"clone"===e.action?t=_.prepareQuestionObjectForCloning(t):t._forceSync=!0,t._expanded=!0,this.quiz.add_question(t),this.quiz.trigger("new-question-added")},add_new_question:function(){this.quiz.add_question({_expanded:!0,choices:this.model.get("default_choices")?this.model.get("default_choices"):null,question_type:this.model}),this.quiz.trigger("new-question-added")}})}),i("Views/QuestionBank",["Views/QuestionType"],function(e){return Backbone.CollectionView.extend({className:"llms-question",el:"#llms-question-bank",modelView:e,selectable:!1,sortable:!1})}),i("Views/QuestionChoice",["Views/_Editable"],function(e){return Backbone.View.extend(_.defaults({className:"llms-question-choice",events:_.defaults({'change input[name="correct"]':"toggle_correct",'click .llms-action-icon[href="#llms-add-choice"]':"add_choice",'click .llms-action-icon[href="#llms-del-choice"]':"del_choice"},e.events),id:function(){return"llms-question-choice-"+this.model.id},tagName:"li",template:wp.template("llms-question-choice-template"),initialize:function(){this.render(),this.listenTo(this.model.collection,"add",this.maybe_disable_buttons),this.listenTo(this.model,"change",this.render),"image"===this.model.get("choice_type")&&this.listenTo(this.model.get("choice"),"change",this.render)},render:function(){return this.$el.html(this.template(this.model)),this},add_choice:function(e){e.stopPropagation(),e.preventDefault();var t=this.model.collection.indexOf(this.model);this.model.collection.parent.add_choice({},{at:t+1})},del_choice:function(e){e.preventDefault(),Backbone.pubSub.trigger("model-trashed",this.model),this.model.collection.remove(this.model)},toggle_correct:function(){var e=this.$el.find('input[name="correct"]').is(":checked");this.model.set("correct",e),this.model.collection.trigger("correct-update",this.model)}},e))}),i("Views/QuestionChoiceList",["Views/QuestionChoice"],function(e){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:e,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".llms-choice-id",items:".llms-question-choice",placeholder:"llms-question-choice llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}})}),i("Views/Question",["Views/_Detachable","Views/_Editable","Views/QuestionChoiceList"],function(e,t,i){return Backbone.View.extend(_.defaults({className:function(){return"llms-question qtype--"+this.model.get("question_type").get("id")},events:_.defaults({"click .clone--question":"clone","click .delete--question":"delete","click .expand--question":"expand","click .collapse--question":"collapse",'change input[name="question_points"]':"update_points"},e.events,t.events),id:function(){return"llms-question-"+this.model.id},tagName:"li",template:wp.template("llms-question-template"),initialize:function(){_.each(["change:_expanded","change:menu_order"],function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model.get("image"),"change",this.render),this.listenTo(this.model.get_parent(),"change:_points",this.render_points_percentage),this.on("multi_choices_toggle",this.multi_choices_toggle,this),Backbone.pubSub.on("del-question-choice",this.del_choice,this)},render:function(){if(this.$el.html(this.template(this.model)),this.model.get("question_type").get("choices")&&(this.choiceListView=new i({el:this.$el.find(".llms-question-choices"),collection:this.model.get("choices")}),this.choiceListView.render(),this.choiceListView.on("sortStart",this.choiceListView.sortable_start),this.choiceListView.on("sortStop",this.choiceListView.sortable_stop)),"group"===this.model.get("question_type").get("id")){var e=this;setTimeout(function(){e.questionListView=e.collectionListView.quiz.get_question_list({el:e.$el.find(".llms-quiz-questions"),collection:e.model.get("questions")}),e.questionListView.render(),e.questionListView.on("sortStart",e.questionListView.sortable_start),e.questionListView.on("sortStop",e.questionListView.sortable_stop)},1)}return this.model.get("description_enabled")&&this.init_editor("question-desc--"+this.model.get("id")),this.model.get("clarifications_enabled")&&this.init_editor("question-clarifications--"+this.model.get("id"),{mediaButtons:!1,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,alignleft,aligncenter,alignright",toolbar2:"",setup:_.bind(this.on_editor_ready,this)}}),this.init_formatting_els(),this.init_selects(),this},render_points_percentage:function(){this.$el.find(".llms-question-points").attr("data-tip",this.model.get_points_percentage())},clone:function(e){e.stopPropagation(),e.preventDefault(),this.model.collection.add(this._get_question_clone(this.model))},_get_question_clone:function(e){var i=_.clone(e.attributes);return delete i.id,i.parent_id=e.get("id"),i.question_type=e.get("question_type").get("id"),i.image=_.clone(e.get("image").attributes),e.get("choices")&&(i.choices=[],e.get("choices").each(function(e){var t=_.clone(e.attributes);delete t.id,delete t.question_id,i.choices.push(t)})),"group"===e.get("question_type").get("id")&&(i.questions=[],e.get("questions").each(function(e){i.questions.push(this._get_question_clone(e))},this)),i},collapse:function(e){e&&e.preventDefault(),this.model.set("_expanded",!1)},delete:function(e){e.preventDefault(),window.confirm(LLMS.l10n.translate("Are you sure you want to delete this question?"))&&(this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model))},expand:function(e){e&&e.preventDefault(),this.model.set("_expanded",!0)},multi_choices_toggle:function(e){"yes"!==e&&this.model.get("choices").update_correct(_.first(this.model.get("choices").get_correct()))},update_points:function(){this.model.set("points",+this.$el.find('input[name="question_points"]').val())}},e,t))}),i("Views/QuestionList",["Views/Question"],function(e){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:e,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-quiz-questions",cursor:"move",handle:".llms-data-stamp",items:".llms-question",placeholder:"llms-question llms-sortable-placeholder"},sortable_start:function(e){var t="group"===e.get("question_type").get("id")?".llms-editor-tab > .llms-quiz-questions":".llms-quiz-questions";b(t).addClass("dragging")},sortable_stop:function(){b(".llms-quiz-questions").removeClass("dragging")},_receive:function(e,t){if(e.stopPropagation(),t.item.hasClass("qtype--group")&&b(e.target).closest(".qtype--group").length)t.sender.sortable("cancel");else{var i=t.sender.data("view");if(i&&i.collection){var n=this._getContainerEl().children().index(t.item),s=i.collection.get(t.item.attr("data-model-cid"));i.collection.remove(s),this.collection.add(s,{at:n}),s.collection=this.collection,this.setSelectedModel(s)}}},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));t.placeholder.addClass("qtype--"+i.get("question_type").get("id")),this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortStop:function(e,t){e.stopPropagation();var i=this.collection.get(t.item.attr("data-model-cid")),n=this._getContainerEl().children().index(t.item);-1==n&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n)}})}),i("Views/Quiz",["Models/Quiz","Views/Popover","Views/PostSearch","Views/QuestionBank","Views/QuestionList","Views/SettingsFields","Views/_Detachable","Views/_Editable","Views/_Subview","Views/_Trashable"],function(e,t,i,n,s,o,l,r,a,c){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:o,instance:null,state:"default"},bank:{class:n,instance:null,state:"default"},list:{class:s,instance:null,state:"default"}},el:"#llms-editor-quiz",events:_.defaults({"click #llms-existing-quiz":"add_existing_quiz_click","click #llms-new-quiz":"add_new_quiz","click #llms-show-question-bank":"show_tools","click .bulk-toggle":"bulk_toggle"},l.events,r.events,c.events),tagName:"div",template:wp.template("llms-quiz-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("quiz_enabled")&&_.isEmpty(this.lesson.get("quiz"))||(this.model=this.lesson.get("quiz"),this.model.set_parent(this.lesson),this.listenTo(this.model,"change:_points",this.render_points)),this.on("model-trashed",this.on_trashed)},render:function(){if(this.$el.html(this.template(this.model)),this.model){LLMS.Spinner.start(this.$el),this.render_subview("settings",{el:"#llms-quiz-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this.render_subview("bank",{collection:window.llms_builder.questions});var t=null,i=null;this.get_subview("bank").instance.viewManager.each(function(e){e.quiz=this.model,i=e.model.get("group").name,t!==i&&(t=i,e.$el.before('<li class="llms-question-bank-header"><h4>'+i+"</h4></li>"))},this),this.model.load_questions(_.bind(function(e){if(e)return alert(LLMS.l10n.translate("An error occurred while trying to load the questions. Please refresh the page and try again.")),this;LLMS.Spinner.stop(this.$el),this.render_subview("list",{el:"#llms-quiz-questions",collection:this.model.get("questions")});var t=this.get_subview("list").instance;t.quiz=this,t.collection.on("add",function(){t.collection.trigger("reorder")},this),t.on("sortStart",t.sortable_start),t.on("sortStop",t.sortable_stop)},this)),this.model.on("new-question-added",function(){var e=this.$el.find("#llms-quiz-questions");e.animate({scrollTop:e.prop("scrollHeight")},200)},this)}return this},render_points:function(e,t){this.$el.find("#llms-quiz-total-points").text(t)},bulk_toggle:function(e){var t="expand"===b(e.target).attr("data-action");this.model.get("questions").each(function(e){e.set("_expanded",t)})},add_new_quiz:function(){var e=this.lesson.get("quiz");_.isEmpty(e)?e=this.lesson.add_quiz():this.lesson.set("quiz_enabled","yes"),this.model=e,this.render()},add_existing_quiz:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?t=_.prepareQuizObjectForCloning(t):t._forceSync=!0,delete t.lesson_id,this.lesson.add_quiz(t),this.model=this.lesson.get("quiz"),this.render()},add_existing_quiz_click:function(e){e.preventDefault(),this.post_search_popover=new t({el:"#llms-existing-quiz",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Quiz"),content:new i({post_type:"llms_quiz",searching_message:LLMS.l10n.translate("Search for existing quizzes...")}).render().$el,onHide:function(){Backbone.pubSub.off("quiz-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("quiz-search-select",this.add_existing_quiz,this)},on_trashed:function(e){this.lesson.set("quiz_enabled","no"),this.lesson.set("quiz",""),delete this.model,this.render()},show_tools:function(){var e=new t({el:"#llms-show-question-bank",args:{backdrop:!0,closeable:!0,container:"#llms-builder-sidebar",dismissible:!0,placement:"top-left",width:"calc( 100% - 40px )",title:LLMS.l10n.translate("Add a Question"),url:"#llms-quiz-tools"}});e.show(),this.model.on("new-question-added",function(){e.hide()})},get_question_list:function(e){return new s(e)}},l,r,a,c,o))}),i("Views/Assignment",["Views/Popover","Views/PostSearch","Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(n,t,i,s,o,e,l){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{class:l,instance:null,state:"default"}},el:"#llms-editor-assignment",events:function(){var e=this.is_addon_available()?window.llms_builder.assignments.get_view_events():{};return _.defaults({"click #llms-existing-assignment":"add_existing_assignment_click","click #llms-new-assignment":"add_new_assignment"},i.events,s.events,o.events,e)},tagName:"div",template:wp.template("llms-assignment-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("assignment_enabled")&&_.isEmpty(this.lesson.get("assignment"))||(this.model=this.lesson.get("assignment"),this.model.set_parent(this.lesson)),this.on("model-trashed",this.on_trashed)},render:function(){return this.$el.html(this.template(this.model)),this.model&&this.is_addon_available()&&(this.stopListening(this.model,"change:assignment_type",this.render),this.render_subview("settings",{el:"#llms-assignment-settings-fields",model:this.model}),this.init_selects(),window.llms_builder.assignments.render_editor(this),this.listenTo(this.model,"change:assignment_type",this.render)),this},add_new_assignment:function(){this.is_addon_available()?(this.model=window.llms_builder.assignments.get_assignment({title:LLMS.l10n.replace("%1$s Assignment",{"%1$s":this.lesson.get("title")}),lesson_id:this.lesson.get("id")}),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",this.model),this.render()):this.show_ad_popover("#llms-new-assignment")},add_existing_assignment:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?delete t.id:t._forceSync=!0,t.lesson_id=this.lesson.get("id"),t=window.llms_builder.construct.get_model("Assignment",t),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",t),this.model=t,this.render()},add_existing_assignment_click:function(e){e.preventDefault(),this.is_addon_available()?(this.post_search_popover=new n({el:"#llms-existing-assignment",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Assignment"),content:new t({post_type:"llms_assignment",searching_message:LLMS.l10n.translate("Search for existing assignments...")}).render().$el,onHide:function(){Backbone.pubSub.off("assignment-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("assignment-search-select",this.add_existing_assignment,this)):this.show_ad_popover("#llms-existing-assignment")},is_addon_available:function(){return window.llms_builder.assignments},on_trashed:function(e){this.lesson.set("assignment_enabled","no"),this.lesson.set("assignment",""),delete this.model,this.render()},show_ad_popover:function(e){var t=LLMS.l10n.translate("Get Your Students Taking Action"),i=LLMS.l10n.translate("Get Assignments Now!");this.ad_popover=new n({el:e,args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,width:380,title:LLMS.l10n.translate("Unlock LifterLMS Assignments"),content:"<h3>"+t+'</h3><p>Great learning content is only half of teaching online. When your learners fully engage, they will take your content and move into action. Remove barriers for your learners by telling them what to do to apply what they just learned. Create graded assignments or simply give them a checklist of action items to complete before moving on.</p><br><p><a class="llms-button-primary" href="https://lifterlms.com/product/lifterlms-assignments?utm_source=LifterLMS%20Plugin&utm_medium=Assignment%20Builder%20Button&utm_campaign=Assignment%20Addon%20Upsell&utm_content=3.17.0" target="_blank">'+i+"</a></p>"}}),this.ad_popover.show()}},i,s,o,e,l))}),i("Views/Editor",["Views/LessonEditor","Views/Quiz","Views/Assignment","Views/_Subview"],function(e,t,i,n){return Backbone.View.extend(_.defaults({state:"lesson",views:{lesson:{class:e,instance:null,state:"lesson"},assignment:{class:i,instance:null,state:"assignment"},quiz:{class:t,instance:null,state:"quiz"}},el:"#llms-editor",events:{'click .llms-editor-nav a[href="#llms-editor-close"]':"close_editor",'click .llms-editor-nav a:not([href="#llms-editor-close"])':"switch_tab"},tagName:"div",template:wp.template("llms-editor-template"),initialize:function(e){this.SidebarView=e.SidebarView,e.tab&&(this.state=e.tab)},render:function(e){return e=e||{},this.$el.html(this.template(this)),this.render_subviews(_.extend(e,{lesson:this.model})),this},close_editor:function(e){e.preventDefault(),Backbone.pubSub.trigger("sidebar-editor-close"),window.location.hash=""},switch_tab:function(e){e.preventDefault();var t=b(e.target),i=t.attr("data-view");this.$el.find(t.attr("href"));this.set_state(i).render(),this.set_hash(i)},set_hash:function(e){var t="lesson:"+this.model.get("id");"lesson"!==e&&(t+=":"+e),window.location.hash=t}},n))}),i("Views/Elements",["Models/Section","Views/Section","Models/Lesson","Views/Lesson","Views/Popover","Views/PostSearch"],function(e,t,i,n,s,o){return Backbone.View.extend({el:"#llms-elements",events:{"click #llms-new-section":"add_new_section","click #llms-new-lesson":"add_new_lesson","click #llms-existing-lesson":"add_existing_lesson"},tagName:"div",template:wp.template("llms-elements-template"),initialize:function(e){this.SidebarView=e.SidebarView,this.listenTo(this.SidebarView.CourseView.model.get("sections"),"add",this.maybe_disable_buttons),this.listenTo(this.SidebarView.CourseView.model.get("sections"),"remove",this.maybe_disable_buttons)},render:function(){return this.$el.html(this.template()),this.draggable(),this.maybe_disable_buttons(),this},draggable:function(){b("#llms-new-section").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-sections",helper:function(){return new t({model:new e}).render().$el},start:function(){b(".llms-sections").addClass("dragging")},stop:function(){b(".llms-sections").removeClass("dragging")}}),b("#llms-new-lesson").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-lessons",helper:function(){return new n({model:new i}).render().$el},start:function(){b(".llms-lessons").addClass("dragging")},stop:function(){b(".llms-lessons").removeClass("dragging"),b(".drag-expanded").removeClass(".drag-expanded")}})},add_new_section:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-section")},add_new_lesson:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-lesson")},add_existing_lesson:function(e){e.preventDefault();var t=new s({el:"#llms-existing-lesson",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Lesson"),content:new o({post_type:"lesson",searching_message:LLMS.l10n.translate("Search for existing lessons...")}).render().$el}});t.show(),Backbone.pubSub.on("lesson-search-select",function(){t.hide()})},maybe_disable_buttons:function(){var e=b("#llms-new-lesson, #llms-existing-lesson");this.SidebarView.CourseView.model.get("sections").length?e.removeAttr("disabled"):e.attr("disabled","disabled")}})}),i("Views/Utilities",[],function(){return Backbone.View.extend({el:"#llms-utilities",events:{"click #llms-collapse-all":"collapse_all","click #llms-expand-all":"expand_all"},tagName:"div",template:wp.template("llms-utilities-template"),initialize:function(){},render:function(){return this.$el.html(this.template()),this},collapse_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("collapse-all")},expand_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("expand-all")}})}),i("Views/Sidebar",["Views/Editor","Views/Elements","Views/Utilities","Views/_Subview"],function(e,t,i,n){return Backbone.View.extend(_.defaults({state:"builder",views:{elements:{class:t,instance:null,state:"builder"},utilities:{class:i,instance:null,state:"builder"},editor:{class:e,instance:null,state:"editor"}},el:"#llms-builder-sidebar",events:{"click #llms-save-button":"save_now","click #llms-exit-button":"exit_now","click .llms-builder-error":"clear_errors"},tagName:"aside",template:wp.template("llms-sidebar-template"),initialize:function(e){this.CourseView=e.CourseView,this.render(),Backbone.pubSub.on("current-save-status",this.changes_made,this),Backbone.pubSub.on("heartbeat-send",this.heartbeat_send,this),Backbone.pubSub.on("heartbeat-tick",this.heartbeat_tick,this),Backbone.pubSub.on("lesson-selected",this.on_lesson_select,this),Backbone.pubSub.on("sidebar-editor-close",this.on_editor_close,this),this.$saveButton=b("#llms-save-button")},render:function(e){e=e||{},this.$el.html(this.template()),this.render_subviews(_.extend(e,{SidebarView:this}));var t=b(".wrap.lifterlms.llms-builder");return"builder"===this.state?t.removeClass("editor-active"):t.addClass("editor-active"),this.$saveButton=this.$el.find("#llms-save-button"),this},add_error:function(e){this.$el.find(".llms-builder-save").prepend(e)},clear_errors:function(){this.$el.find(".llms-builder-save .llms-builder-error").remove()},changes_made:function(e){e.saving||(e.has_unsaved_changes?(this.$saveButton.attr("data-status","unsaved"),this.$saveButton.removeAttr("disabled")):(this.$saveButton.attr("data-status","saved"),this.$saveButton.attr("disabled","disabled")))},exit_now:function(){window.location.href=window.llms_builder.CourseModel.get_edit_post_link()},heartbeat_send:function(e){e.saving&&(LLMS.Spinner.start(this.$saveButton.find("i"),"small"),this.$saveButton.attr({"data-status":"saving",disabled:"disabled"}))},heartbeat_tick:function(e,t){if(!e.saving){var i="saved";if(this.clear_errors(),"error"===t.status){i="error";var n=t.message,s=b('<ol class="llms-builder-error" />');"object"==typeof n?_.each(n,function(e){s.append("<li>"+e+"</li>")}):s=s.append("<li>"+n+"</li>"),this.add_error(s)}this.$saveButton.find(".llms-spinning").remove(),this.$saveButton.attr({"data-status":i,disabled:"disabled"})}},is_editor_active:function(){return"editor"===this.state},on_editor_close:function(){this.set_state("builder").render()},on_lesson_select:function(e,t){"editor"!==this.state?this.set_state("editor"):this.remove_subview("editor"),this.render({model:e,tab:t})},save_now:function(){window.llms_builder.sync.save_now()}},n))}),t(["vendor/wp-hooks","vendor/backbone.collectionView","vendor/backbone.trackit","Controllers/Construct","Controllers/Debug","Controllers/Schemas","Controllers/Sync","Models/loader","Views/Course","Views/Sidebar"],function(e,t,i,n,s,o,l,r,a,c){function d(e,t){return _.isArray(t)&&-1!==t.indexOf(e)||e==t}window.llms_builder.debug=new s(window.llms_builder.debug),window.llms_builder.construct=new n,window.llms_builder.schemas=new o(window.llms_builder.schemas),_.mixin({checked:function(e,t){return d(e,t)?' checked="checked"':""},deepClone:function(e){var i=_.clone(e);return _.each(i,function(e,t){!_.isFunction(e)&&_.isObject(e)&&(i[t]=_.deepClone(e))}),i},prepareQuizObjectForCloning:function(e){return delete e.id,delete e.lesson_id,_.each(e.questions,function(e){e=_.prepareQuestionObjectForCloning(e)}),e},prepareQuestionObjectForCloning:function(e){return delete e.id,delete e.parent_id,e.image&&_.isObject(e.image)&&(e.image._forceSync=!0),e.choices&&_.each(e.choices,function(e){delete e.question_id,delete e.id,"image"===e.choice_type&&_.isObject(e.choice)&&(e.choice._forceSync=!0)}),e},selected:function(e,t){return d(e,t)?' selected="selected"':""},stripFormatting:function(e,t){t=t||["b","i","u","strong","em"];var i=b("<div>"+e+"</div>");return i.find("*").not(t.join(",")).each(function(){b(this).replaceWith(this.innerHTML)}),i.html()}}),Backbone.pubSub=_.extend({},Backbone.Events),b(document).trigger("llms-builder-pre-init"),window.llms_builder.questions=window.llms_builder.construct.get_collection("QuestionTypes",window.llms_builder.questions);var u=window.llms_builder.construct.get_model("Course",window.llms_builder.course);window.llms_builder.CourseModel=u,window.llms_builder.sync=new l(u,window.llms_builder.sync);var h=new a({model:u}),p=new c({CourseView:h});if(b(document).trigger("llms-builder-init",{course:h,sidebar:p}),window.location.hash){var m=window.location.hash;if(-1===m.indexOf("#lesson:"))return;var g=m.replace("#lesson:","").split(":"),f=b("#llms-lesson-"+g[0]);f.length&&LLMS.wait_for(function(){return void 0!==wp.editor&&void 0!==window.tinymce},function(){f.closest(".llms-builder-item.llms-section").find("a.llms-action-icon.expand").trigger("click");var e=g[1]?g[1]:"lesson";b("#llms-lesson-"+g[0]).find("a.llms-action-icon.edit-"+e).trigger("click")})}}),i("main",function(){})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
