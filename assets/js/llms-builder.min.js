!function(e){var t,i,s;!function(e){function n(e,t){return y.call(e,t)}function o(e,t){var i,s,n,o,l,a,r,c,d,u,h,_,p=t&&t.split("/"),m=v.map,g=m&&m["*"]||{};if(e){for(e=e.split("/"),l=e.length-1,v.nodeIdCompat&&S.test(e[l])&&(e[l]=e[l].replace(S,"")),"."===e[0].charAt(0)&&p&&(_=p.slice(0,p.length-1),e=_.concat(e)),d=0;d<e.length;d++)if(h=e[d],"."===h)e.splice(d,1),d-=1;else if(".."===h){if(0===d||1===d&&".."===e[2]||".."===e[d-1])continue;d>0&&(e.splice(d-1,2),d-=2)}e=e.join("/")}if((p||g)&&m){for(i=e.split("/"),d=i.length;d>0;d-=1){if(s=i.slice(0,d).join("/"),p)for(u=p.length;u>0;u-=1)if(n=m[p.slice(0,u).join("/")],n&&(n=n[s])){o=n,a=d;break}if(o)break;!r&&g&&g[s]&&(r=g[s],c=d)}!o&&r&&(o=r,a=c),o&&(i.splice(0,a,o),e=i.join("/"))}return e}function l(t,i){return function(){var s=k.call(arguments,0);return"string"!=typeof s[0]&&1===s.length&&s.push(null),p.apply(e,s.concat([t,i]))}}function a(e){return function(t){return o(t,e)}}function r(e){return function(t){f[e]=t}}function c(t){if(n(b,t)){var i=b[t];delete b[t],w[t]=!0,_.apply(e,i)}if(!n(f,t)&&!n(w,t))throw new Error("No "+t);return f[t]}function d(e){var t,i=e?e.indexOf("!"):-1;return i>-1&&(t=e.substring(0,i),e=e.substring(i+1,e.length)),[t,e]}function u(e){return e?d(e):[]}function h(e){return function(){return v&&v.config&&v.config[e]||{}}}var _,p,m,g,f={},b={},v={},w={},y=Object.prototype.hasOwnProperty,k=[].slice,S=/\.js$/;m=function(e,t){var i,s=d(e),n=s[0],l=t[1];return e=s[1],n&&(n=o(n,l),i=c(n)),n?e=i&&i.normalize?i.normalize(e,a(l)):o(e,l):(e=o(e,l),s=d(e),n=s[0],e=s[1],n&&(i=c(n))),{f:n?n+"!"+e:e,n:e,pr:n,p:i}},g={require:function(e){return l(e)},exports:function(e){var t=f[e];return"undefined"!=typeof t?t:f[e]={}},module:function(e){return{id:e,uri:"",exports:f[e],config:h(e)}}},_=function(t,i,s,o){var a,d,h,_,p,v,y,k=[],S=typeof s;if(o=o||t,v=u(o),"undefined"===S||"function"===S){for(i=!i.length&&s.length?["require","exports","module"]:i,p=0;p<i.length;p+=1)if(_=m(i[p],v),d=_.f,"require"===d)k[p]=g.require(t);else if("exports"===d)k[p]=g.exports(t),y=!0;else if("module"===d)a=k[p]=g.module(t);else if(n(f,d)||n(b,d)||n(w,d))k[p]=c(d);else{if(!_.p)throw new Error(t+" missing "+d);_.p.load(_.n,l(o,!0),r(d),{}),k[p]=f[d]}h=s?s.apply(f[t],k):void 0,t&&(a&&a.exports!==e&&a.exports!==f[t]?f[t]=a.exports:h===e&&y||(f[t]=h))}else t&&(f[t]=s)},t=i=p=function(t,i,s,n,o){if("string"==typeof t)return g[t]?g[t](i):c(m(t,u(i)).f);if(!t.splice){if(v=t,v.deps&&p(v.deps,v.callback),!i)return;i.splice?(t=i,i=s,s=null):t=e}return i=i||function(){},"function"==typeof s&&(s=n,n=o),n?_(e,t,i,s):setTimeout(function(){_(e,t,i,s)},4),p},p.config=function(e){return p(e)},t._defined=f,s=function(e,t,i){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(i=t,t=[]),n(f,e)||n(b,e)||(b[e]=[e,t,i])},s.amd={jQuery:!0}}(),s("vendor/almond",function(){}),s("underscore",[],function(){return _}),s("backbone",[],function(){return Backbone}),s("jquery",[],function(){return jQuery}),function(e,t){"function"==typeof s&&s.amd?s("vendor/backbone.collectionView",["underscore","backbone","jquery"],t):"undefined"!=typeof exports?module.exports=t(i("underscore"),i("backbone"),i("backbone").$):t(e._,e.Backbone,e.jQuery||e.Zepto||e.$)}(this,function(e,t,i){function s(t){var i={};if(!e.isArray(t))throw new Error("Option declarations must be an array.");return e.each(t,function(t){var s,n,o;if(n=!1,o=void 0,e.isString(t))s=t;else{if(!e.isObject(t))throw new Error("Each element in the option declarations array must be either a string or an object.");s=e.first(e.keys(t)),o=e.isFunction(t[s])?t[s]:e.clone(t[s])}"!"===s[s.length-1]&&(n=!0,s=s.slice(0,s.length-1)),i[s]=i[s]||{},i[s].required=n,e.isUndefined(o)||(i[s].defaultValue=o)}),i}var n=t.View,o="model",l=["collection","modelView","modelViewOptions","itemTemplate","itemTemplateFunction","detachedRendering"],a={background:"transparent",border:"none","box-shadow":"none"};return t.CollectionView=t.View.extend({tagName:"ul",events:{"mousedown > li, tbody > tr > td":"_listItem_onMousedown","dblclick > li, tbody > tr > td":"_listItem_onDoubleClick",click:"_listBackground_onClick","click ul.collection-view, table.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},spawnMessages:{focus:"focus"},passMessages:{"*":"."},initializationOptions:[{collection:null},{modelView:null},{modelViewOptions:{}},{itemTemplate:null},{itemTemplateFunction:null},{selectable:!0},{clickToSelect:!0},{selectableModelsFilter:null},{visibleModelsFilter:null},{sortableModelsFilter:null},{selectMultiple:!1},{clickToToggle:!1},{processKeyEvents:!0},{sortable:!1},{sortableOptions:null},{reuseModelViews:!0},{detachedRendering:!1},{emptyListCaption:null}],initialize:function(e){t.ViewOptions.add(this,"initializationOptions"),this.setOptions(e),this.collection||(this.collection=new t.Collection),this._hasBeenRendered=!1,this._isBackboneCourierAvailable()&&t.Courier.add(this),this.$el.data("view",this),this.$el.addClass("collection-view collection-list"),this.selectable&&this.$el.addClass("selectable"),this.selectable&&this.processKeyEvents&&this.$el.attr("tabindex",0),this.selectedItems=[],this._updateItemTemplate(),this.collection&&this._registerCollectionEvents(),this.viewManager=new ChildViewContainer},_onOptionsChanged:function(t,i){var s=this,n=!1;e.each(e.keys(t),function(o){var a=t[o],r=i[o];switch(o){case"collection":a!==r&&(s.stopListening(r),s._registerCollectionEvents());break;case"selectMultiple":!a&&s.selectedItems.length>1&&s.setSelectedModel(e.first(s.selectedItems),{by:"cid"});break;case"selectable":!a&&s.selectedItems.length>0&&s.setSelectedModels([]),a&&this.processKeyEvents?s.$el.attr("tabindex",0):s.$el.removeAttr("tabindex",0);break;case"sortable":t.sortable?s._setupSortable():s.$el.sortable("destroy");break;case"selectableModelsFilter":s.reapplyFilter("selectableModels");break;case"sortableOptions":s.$el.sortable("destroy"),s._setupSortable();break;case"sortableModelsFilter":s.reapplyFilter("sortableModels");break;case"visibleModelsFilter":s.reapplyFilter("visibleModels");break;case"itemTemplate":s._updateItemTemplate();break;case"processKeyEvents":a&&this.selectable?s.$el.attr("tabindex",0):s.$el.removeAttr("tabindex",0);break;case"modelView":s.viewManager.each(function(e){s.viewManager.remove(e),e.remove()})}e.contains(l,o)&&(n=!0)}),this._hasBeenRendered&&n&&this.render()},setOption:function(e,t){var i={};i[e]=t,this.setOptions(i)},getSelectedModel:function(t){return this.selectedItems.length?e.first(this.getSelectedModels(t)):null},getSelectedModels:function(t){var s=this;t=e.extend({},{by:o},t);var n=t.by,l=[];switch(n){case"id":e.each(this.selectedItems,function(e){l.push(s.collection.get(e).id)});break;case"cid":l=l.concat(this.selectedItems);break;case"offset":var a=0,r=this._getVisibleItemEls();r.each(function(){var e=i(this);e.is(".selected")&&l.push(a),a++});break;case"model":e.each(this.selectedItems,function(e){l.push(s.collection.get(e))});break;case"view":e.each(this.selectedItems,function(e){l.push(s.viewManager.findByModel(s.collection.get(e)))});break;default:throw new Error("Invalid referenceBy option: "+n)}return l},setSelectedModels:function(t,s){if(!e.isArray(t))throw"Invalid parameter value";if(this.selectable||!(t.length>0)){s=e.extend({},{silent:!1,by:o},s);var n=s.by,l=[];switch(n){case"cid":l=t;break;case"id":this.collection.each(function(i){e.contains(t,i.id)&&l.push(i.cid)});break;case"model":l=e.pluck(t,"cid");break;case"view":e.each(t,function(e){l.push(e.model.cid)});break;case"offset":var a=0,r=this._getVisibleItemEls();r.each(function(){var s=i(this);e.contains(t,a)&&l.push(s.attr("data-model-cid")),a++});break;default:throw new Error("Invalid referenceBy option: "+n)}var c=this.getSelectedModels(),d=e.clone(this.selectedItems);this.selectedItems=this._convertStringsToInts(l),this._validateSelection();var u=this.getSelectedModels();this._containSameElements(d,this.selectedItems)||(this._addSelectedClassToSelectedItems(d),s.silent||(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:u,oldSelectedModels:c}):this.trigger("selectionChanged",u,c)),this.updateDependentControls())}},setSelectedModel:function(e,t){e||0===e?this.setSelectedModels([e],t):this.setSelectedModels([],t)},getView:function(t,s){switch(s=e.extend({},{by:o},s),s.by){case"id":case"cid":var n=this.collection.get(t)||null;return n&&this.viewManager.findByModel(n);case"offset":var l=this._getVisibleItemEls();return i(l.get(t));case"model":return this.viewManager.findByModel(t);default:throw new Error("Invalid referenceBy option: "+referenceBy)}},render:function(){this._hasBeenRendered=!0,this.selectable&&this._saveSelection();var t;t=this._getContainerEl();var i=this.viewManager;this.viewManager=new ChildViewContainer,i.each(function(e){this.reuseModelViews&&this.collection.get(e.model.cid)?e.$el.detach():e.remove()},this),t.empty();var s;this.detachedRendering&&(s=document.createDocumentFragment()),this.collection.each(function(n){var o=i.findByModelCid(n.cid);this.reuseModelViews&&!e.isUndefined(o)||(o=this._createNewModelView(n,this._getModelViewOptions(n))),this._insertAndRenderModelView(o,s||t)},this),this.detachedRendering&&t.append(s),this.sortable&&this._setupSortable(),this._showEmptyListCaptionIfAppropriate(),this._isBackboneCourierAvailable()?this.spawn("render"):this.trigger("render"),this.selectable&&(this._restoreSelection(),this.updateDependentControls()),this.forceRerenderOnNextSortEvent=!1},_showEmptyListCaptionIfAppropriate:function(){if(this._removeEmptyListCaption(),this.emptyListCaption){var t=this._getVisibleItemEls();if(0===t.length){var s;s=e.isFunction(this.emptyListCaption)?this.emptyListCaption():this.emptyListCaption;var n,o=i("<var class='empty-list-caption'>"+s+"</var>");n=this._isRenderedAsList()?o.wrapAll("<li class='not-sortable'></li>").parent().css(a):o.wrapAll("<tr class='not-sortable'><td colspan='1000'></td></tr>").parent().parent().css(a),this._getContainerEl().append(n)}}},_removeEmptyListCaption:function(){this._isRenderedAsList()?this._getContainerEl().find("> li > var.empty-list-caption").parent().remove():this._getContainerEl().find("> tr > td > var.empty-list-caption").parent().parent().remove()},_insertAndRenderModelView:function(t,i,s){var n=this._wrapModelView(t);if(11===i.nodeType)i.appendChild(n.get(0));else{var o=i.children().length;!e.isUndefined(s)&&s>=0&&s<o?i.children().eq(s).before(n):(!e.isUndefined(s)&&s>o&&(this.forceRerenderOnNextSortEvent=!0),i.append(n))}this.viewManager.add(t);var l=t.render();l===!1&&(n.hide(),n.addClass("not-visible"));var a=!1;e.isFunction(this.visibleModelsFilter)&&(a=!this.visibleModelsFilter(t.model)),1===n.children().length?n.toggle(!a):t.$el.toggle(!a),n.toggleClass("not-visible",a),!a&&this.emptyListCaption&&this._removeEmptyListCaption()},updateDependentControls:function(){this._isBackboneCourierAvailable()?this.spawn("updateDependentControls",{selectedModels:this.getSelectedModels()}):this.trigger("updateDependentControls",this.getSelectedModels())},remove:function(){this.viewManager.each(function(e){e.remove()}),t.View.prototype.remove.apply(this,arguments)},reapplyFilter:function(t){var i=this;if(!e.contains(["selectableModels","sortableModels","visibleModels"],t))throw new Error("Invalid filter identifier supplied to reapplyFilter: "+t);switch(t){case"visibleModels":i.viewManager.each(function(e){var t=i.visibleModelsFilter&&!i.visibleModelsFilter.call(i,e.model);e.$el.toggleClass("not-visible",t),i._modelViewHasWrapperLI(e)?e.$el.closest("li").toggleClass("not-visible",t).toggle(!t):e.$el.toggle(!t)}),this._showEmptyListCaptionIfAppropriate();break;case"sortableModels":i.$el.sortable("destroy"),i.viewManager.each(function(e){var t=i.sortableModelsFilter&&!i.sortableModelsFilter.call(i,e.model);e.$el.toggleClass("not-sortable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-sortable",t)}),i._setupSortable();break;case"selectableModels":i.viewManager.each(function(e){var t=i.selectableModelsFilter&&!i.selectableModelsFilter.call(i,e.model);e.$el.toggleClass("not-selectable",t),i._modelViewHasWrapperLI(e)&&e.$el.closest("li").toggleClass("not-selectable",t)}),i._validateSelection()}},_removeModelView:function(e){this.selectable&&this._saveSelection(),this.viewManager.remove(e),this._modelViewHasWrapperLI(e)&&e.$el.parent().remove(),e.remove(),this.selectable&&this._restoreSelection(),this._showEmptyListCaptionIfAppropriate()},_validateSelectionAndRender:function(){this._validateSelection(),this.render()},_registerCollectionEvents:function(){this.listenTo(this.collection,"add",function(e){var t;this._hasBeenRendered&&(t=this._createNewModelView(e,this._getModelViewOptions(e)),this._insertAndRenderModelView(t,this._getContainerEl(),this.collection.indexOf(e))),this._isBackboneCourierAvailable()?this.spawn("add",t):this.trigger("add",t)}),this.listenTo(this.collection,"remove",function(e){var t;this._hasBeenRendered&&(t=this.viewManager.findByModelCid(e.cid),this._removeModelView(t)),this._isBackboneCourierAvailable()?this.spawn("remove"):this.trigger("remove")}),this.listenTo(this.collection,"reset",function(){this._hasBeenRendered&&this.render(),this._isBackboneCourierAvailable()?this.spawn("reset"):this.trigger("reset")}),this.listenTo(this.collection,"sort",function(e,t){this._hasBeenRendered&&(t.add!==!0||this.forceRerenderOnNextSortEvent)&&this.render(),this._isBackboneCourierAvailable()?this.spawn("sort"):this.trigger("sort")})},_getContainerEl:function(){if(this._isRenderedAsTable()){var e=this.$el.find("> tbody");if(e.length>0)return e}return this.$el},_getClickedItemId:function(e){var t=null,s=i(e.currentTarget);if(s.closest(".collection-view").get(0)===this.$el.get(0)){var n=s.closest("[data-model-cid]");return n.length>0&&(t=n.attr("data-model-cid"),i.isNumeric(t)&&(t=parseInt(t,10))),t}},_updateItemTemplate:function(){var t;if(this.itemTemplate){if(0===i(this.itemTemplate).length)throw"Could not find item template from selector: "+this.itemTemplate;t=i(this.itemTemplate).html()}else t=this.$(".item-template").html();t&&(this.itemTemplateFunction=e.template(t))},_validateSelection:function(){var t=e.pluck(this.collection.models,"cid");this.selectedItems=e.intersection(t,this.selectedItems),e.isFunction(this.selectableModelsFilter)&&(this.selectedItems=e.filter(this.selectedItems,function(e){return this.selectableModelsFilter.call(this,this.collection.get(e))},this))},_saveSelection:function(){if(!this.selectable)throw"Attempt to save selection on non-selectable list";this.savedSelection={items:e.clone(this.selectedItems),offset:this.getSelectedModel({by:"offset"})}},_restoreSelection:function(){if(!this.savedSelection)throw"Attempt to restore selection but no selection has been saved!";this.setSelectedModels([],{silent:!0}),this.savedSelection.items.length>0&&(this.setSelectedModels(this.savedSelection.items,{by:"cid",silent:!0}),0===this.selectedItems.length&&this.setSelectedModel(this.savedSelection.offset,{by:"offset"}),this.selectedItems.length!==this.savedSelection.items.length&&(this._isBackboneCourierAvailable()?this.spawn("selectionChanged",{selectedModels:this.getSelectedModels(),oldSelectedModels:[]}):this.trigger("selectionChanged",this.getSelectedModels(),[])))},_addSelectedClassToSelectedItems:function(t){e.isUndefined(t)&&(t=[]);var i=t;i=e.without(i,this.selectedItems),e.each(i,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").removeClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").removeClass("selected")},this);var s=this.selectedItems;s=e.without(s,t),e.each(s,function(e){this._getContainerEl().find("[data-model-cid="+e+"]").addClass("selected"),this._isRenderedAsList()&&this._getContainerEl().find("li[data-model-cid="+e+"] > *").addClass("selected")},this)},_reorderCollectionBasedOnHTML:function(){var e=this;this._getContainerEl().children().each(function(){var t=i(this).attr("data-model-cid");if(t){var s=e.collection.get(t);s&&(e.collection.remove(s,{silent:!0}),e.collection.add(s,{silent:!0,sort:!e.collection.comparator}))}}),this._isBackboneCourierAvailable()?this.spawn("reorder"):this.collection.trigger("reorder"),this.collection.comparator&&this.collection.sort()},_getModelViewConstructor:function(e){return this.modelView||n},_getModelViewOptions:function(t){var i=this.modelViewOptions;return e.isFunction(i)&&(i=i(t)),e.extend({model:t},i)},_createNewModelView:function(t,i){var s=this._getModelViewConstructor(t);if(e.isUndefined(s))throw"Could not find modelView constructor for model";var n=new s(i);return n.collectionListView=n.collectionView=this,n},_wrapModelView:function(t){var i,s=this;return this._isRenderedAsTable()?(i=t.$el,t.$el.attr("data-model-cid",t.model.cid)):this._isRenderedAsList()&&(t.$el.is("li")?(i=t.$el,t.$el.attr("data-model-cid",t.model.cid)):i=t.$el.wrapAll("<li data-model-cid='"+t.model.cid+"'></li>").parent()),e.isFunction(this.sortableModelsFilter)&&(this.sortableModelsFilter.call(s,t.model)||(i.addClass("not-sortable"),t.$el.addClass("not-selectable"))),e.isFunction(this.selectableModelsFilter)&&(this.selectableModelsFilter.call(s,t.model)||(i.addClass("not-selectable"),t.$el.addClass("not-selectable"))),i},_convertStringsToInts:function(t){return e.map(t,function(t){if(!e.isString(t))return t;var i=parseInt(t,10);return i==t?i:t})},_containSameElements:function(t,i){if(t.length!=i.length)return!1;var s=e.intersection(t,i).length;return s==t.length},_isRenderedAsTable:function(){return"table"===this.$el.prop("tagName").toLowerCase()},_isRenderedAsList:function(){return!this._isRenderedAsTable()},_modelViewHasWrapperLI:function(e){return this._isRenderedAsList()&&!e.$el.is("li")},_getVisibleItemEls:function(){var e=[];return e=this._getContainerEl().find("> [data-model-cid]:not(.not-visible)")},_charCodes:{upArrow:38,downArrow:40},_isBackboneCourierAvailable:function(){return!e.isUndefined(t.Courier)},_setupSortable:function(){var t=e.extend({axis:"y",distance:10,forcePlaceholderSize:!0,items:this._isRenderedAsTable()?"> tbody > tr:not(.not-sortable)":"> li:not(.not-sortable)",start:e.bind(this._sortStart,this),change:e.bind(this._sortChange,this),stop:e.bind(this._sortStop,this),receive:e.bind(this._receive,this),over:e.bind(this._over,this)},e.result(this,"sortableOptions"));this.$el=this.$el.sortable(t)},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortChange:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));this._isBackboneCourierAvailable()?this.spawn("sortChange",{modelBeingSorted:i}):this.trigger("sortChange",i)},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl(),n=s.children().index(t.item);n==-1&&i&&this.collection.remove(i),i&&(this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n))},_receive:function(e,t){var i=t.sender,s=i.data("view");if(s&&s.collection){var n=this._getContainerEl().children().index(t.item),o=s.collection.get(t.item.attr("data-model-cid"));s.collection.remove(o),this.collection.add(o,{at:n}),o.collection=this.collection,this.setSelectedModel(o)}},_over:function(e,t){this._getContainerEl().find("> var.empty-list-caption").hide()},_onKeydown:function(e){if(!this.processKeyEvents)return!0;var t=!1;if(1==this.getSelectedModels({by:"offset"}).length){var i=this.getSelectedModel({by:"offset"});e.which===this._charCodes.upArrow&&0!==i?(this.setSelectedModel(i-1,{by:"offset"}),t=!0):e.which===this._charCodes.downArrow&&i!==this.collection.length-1&&(this.setSelectedModel(i+1,{by:"offset"}),t=!0)}return!t},_listItem_onMousedown:function(t){var i=this._getClickedItemId(t);if(i){var s=this.collection.get(i);if(this._isBackboneCourierAvailable()){var n={clickedModel:s,metaKeyPressed:t.ctrlKey||t.metaKey};e.each(["preventDefault","stopPropagation","stopImmediatePropagation"],function(e){n[e]=function(){t[e]()}}),this.spawn("click",n)}else this.trigger("click",s)}if(this.selectable&&this.clickToSelect)if(i){if(e.isFunction(this.selectableModelsFilter)&&!this.selectableModelsFilter.call(this,this.collection.get(i)))return;if(this.selectMultiple&&t.shiftKey){var o=-1;this.selectedItems.length>0&&this.collection.find(function(t){return o++,e.contains(this.selectedItems,t.cid)},this);var l=-1;this.collection.find(function(e){return l++,e.cid==i},this);for(var a=o==-1?l:o,r=Math.min(l,a),c=Math.max(l,a),d=[],u=r;u<=c;u++)d.push(this.collection.at(u).cid);if(this.setSelectedModels(d,{by:"cid"}),document.selection&&document.selection.empty)document.selection.empty();else if(window.getSelection){var h=window.getSelection();h&&h.removeAllRanges&&h.removeAllRanges()}}else(this.selectMultiple||e.contains(this.selectedItems,i))&&(this.clickToToggle||t.metaKey||t.ctrlKey)?e.contains(this.selectedItems,i)?this.setSelectedModels(e.without(this.selectedItems,i),{by:"cid"}):this.setSelectedModels(e.union(this.selectedItems,[i]),{by:"cid"}):this.setSelectedModels([i],{by:"cid"})}else this.setSelectedModels([])},_listItem_onDoubleClick:function(e){var t=this._getClickedItemId(e);if(t){var i=this.collection.get(t);this._isBackboneCourierAvailable()?this.spawn("doubleClick",{clickedModel:i,metaKeyPressed:e.ctrlKey||e.metaKey}):this.trigger("doubleClick",i)}},_listBackground_onClick:function(e){this.selectable&&this.clickToSelect&&i(e.target).is(".collection-view")&&this.setSelectedModels([])}},{setDefaultModelViewConstructor:function(e){n=e}}),t.ViewOptions={},t.ViewOptions.add=function(t,i){e.isUndefined(i)&&(i="options"),t.setOptions=function(t){var n=this,o={},l={},a=e.result(this,i);if(!e.isUndefined(a)){var r=s(a);e.each(r,function(i,s){var a=i.required,r=i.defaultValue;if(a){if((!t||!e.contains(e.keys(t),s))&&e.isUndefined(n[s]))throw new Error('Required option "'+s+'" was not supplied.');if(t&&e.contains(e.keys(t),s)&&e.isUndefined(t[s]))throw new Error('Required option "'+s+'" can not be set to undefined.')}if(t&&s in t&&!e.isUndefined(t[s])){var c=n[s],d=t[s];e.isUndefined(c)||c===d||(l[s]=c,o[s]=d),n[s]=d}else e.isUndefined(n[s])&&(n[s]=r)})}e.keys(o).length>0&&(e.isFunction(n.onOptionsChanged)?n.onOptionsChanged(o,l):e.isFunction(n._onOptionsChanged)&&n._onOptionsChanged(o,l))},t.getOptions=function(){var t=e.result(this,i);if(e.isUndefined(t))return{};var n=s(t),o=e.keys(n);return e.pick(this,o)}},ChildViewContainer=function(e,t){var i=function(e){this._views={},this._indexByModel={},this._indexByCustom={},this._updateLength(),t.each(e,this.add,this)};t.extend(i.prototype,{add:function(e,t){var i=e.cid;this._views[i]=e,e.model&&(this._indexByModel[e.model.cid]=i),t&&(this._indexByCustom[t]=i),this._updateLength()},findByModel:function(e){return this.findByModelCid(e.cid)},findByModelCid:function(e){var t=this._indexByModel[e];return this.findByCid(t)},findByCustom:function(e){var t=this._indexByCustom[e];return this.findByCid(t)},findByIndex:function(e){return t.values(this._views)[e]},findByCid:function(e){return this._views[e]},findIndexByCid:function(e){var i=-1,s=t.find(this._views,function(t){if(i++,t.model.cid==e)return t});return s?i:-1},remove:function(e){var i=e.cid;e.model&&delete this._indexByModel[e.model.cid],t.any(this._indexByCustom,function(e,t){if(e===i)return delete this._indexByCustom[t],!0},this),delete this._views[i],this._updateLength()},call:function(e){this.apply(e,t.tail(arguments))},apply:function(e,i){t.each(this._views,function(s){t.isFunction(s[e])&&s[e].apply(s,i||[])})},_updateLength:function(){this.length=t.size(this._views)}});var s=["forEach","each","map","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","toArray","first","initial","rest","last","without","isEmpty","pluck"];return t.each(s,function(e){i.prototype[e]=function(){var i=t.values(this._views),s=[i].concat(t.toArray(arguments));return t[e].apply(t,s)}}),i}(t,e),t.CollectionView}),function(){var e=[],t=function(t){_.isEmpty(t._unsavedChanges)?e=_.filter(e,function(e){return t.cid!=e.cid}):_.findWhere(e,{cid:t.cid})||e.push(t)},i=function(t){var i,s=_.rest(arguments),n=function(e,t){return _.isBoolean(t)?t:(_.isString(t)?e[t]:t).apply(e,s)};return _.each(e,function(e){!i&&n(e,e._unsavedConfig[t])&&(i=e._unsavedConfig.prompt)}),i};Backbone.History.prototype.navigate=_.wrap(Backbone.History.prototype.navigate,function(e,t,s){var n=i("unloadRouterPrompt",t,s);n?confirm(n+" \n\nAre you sure you want to leave this page?")&&e.call(this,t,s):e.call(this,t,s)}),window.onbeforeunload=function(e){return i("unloadWindowPrompt",e)},_.extend(Backbone.Model.prototype,{unsaved:{},_trackingChanges:!1,_originalAttrs:{},_unsavedChanges:{},startTracking:function(){return this._unsavedConfig=_.extend({},{prompt:"You have unsaved changes!",unloadRouterPrompt:!1,unloadWindowPrompt:!1},this.unsaved||{}),this._trackingChanges=!0,this._resetTracking(),this._triggerUnsavedChanges(),this},stopTracking:function(){return this._trackingChanges=!1,this._originalAttrs={},this._unsavedChanges={},this._triggerUnsavedChanges(),this},restartTracking:function(){return this._resetTracking(),this._triggerUnsavedChanges(),this},resetAttributes:function(){if(this._trackingChanges)return this.attributes=this._originalAttrs,this._resetTracking(),this._triggerUnsavedChanges(),this},unsavedAttributes:function(e){if(!e)return!_.isEmpty(this._unsavedChanges)&&_.clone(this._unsavedChanges);var t,i=!1,s=this._unsavedChanges;for(var n in e)_.isEqual(s[n],t=e[n])||((i||(i={}))[n]=t);return i},_resetTracking:function(){this._originalAttrs=_.clone(this.attributes),this._unsavedChanges={}},_triggerUnsavedChanges:function(){this.trigger("unsavedChanges",!_.isEmpty(this._unsavedChanges),_.clone(this._unsavedChanges)),this.unsaved&&t(this)}}),Backbone.Model.prototype.set=_.wrap(Backbone.Model.prototype.set,function(e,t,i,s){var n,o;return null==t?this:("object"==typeof t?(n=t,s=i):(n={})[t]=i,s||(s={}),o=e.call(this,n,s),this._trackingChanges&&!s.silent&&(_.each(n,_.bind(function(e,t){_.isEqual(this._originalAttrs[t],e)?delete this._unsavedChanges[t]:this._unsavedChanges[t]=e},this)),this._triggerUnsavedChanges()),o)}),Backbone.sync=_.wrap(Backbone.sync,function(e,t,i,s){return s||(s={}),"update"==t&&(s.success=_.wrap(s.success,_.bind(function(e,t,s,n){var o;return e&&(o=e.call(this,t,s,n)),i._trackingChanges&&(i._resetTracking(),i._triggerUnsavedChanges()),o},this))),e(t,i,s)})}(),s("vendor/backbone.trackit",function(){}),s("Models/Image",[],function(){return Backbone.Model.extend({defaults:{enabled:"no",id:"",size:"full",src:""},initialize:function(){this.startTracking()}})}),s("Models/_Relationships",[],function(){return{relationship_defaults:{parent:{},children:{}},relationships:{},init_relationships:function(e){var t=this.get_relationships();t.parent&&e&&e.parent&&this.set_parent(e.parent),_.each(t.children,function(e,t){if(!e.conditional||!0===e.conditional(this)){var i,s=this.get(t);e.lookup?i=e.lookup(s):"model"===e.type?i=window.llms_builder.construct.get_model(e["class"],s):"collection"===e.type&&(i=window.llms_builder.construct.get_collection(e["class"],s)),this.set(t,i),"model"===e.type?this._maybe_set_parent_reference(i):"collection"===e.type&&(i.parent=this,i.each(function(e){this._maybe_set_parent_reference(e)},this))}},this)},get_child_props:function(){var e=[];return _.each(this.get_relationships().children,function(t,i){t.conditional&&!0!==t.conditional(this)||e.push(i)},this),e},get_parent:function(){var e=this.get_relationships();return!!e.parent&&e.parent.reference},get_relationships:function(){return e.extend(!0,this.relationships,this.relationship_defaults)},set_parent:function(e){this.relationships.parent.reference=e},_maybe_set_parent_reference:function(e){if(e&&e.get_relationships){var t=e.get_relationships();t.parent&&t.parent.model===this.get("type")&&e.set_parent(this)}}}}),s("Models/QuestionChoice",["Models/Image","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_question",type:"model"},children:{choice:{conditional:function(e){return"image"===e.get("choice_type")},"class":"Image",model:"image",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choice:"",choice_type:"text",correct:!1,marker:"A",question_id:"",type:"choice"}},initialize:function(e,t){this.startTracking(),this.init_relationships(t)},get_parent:function(){return this.collection.parent},get_trash_id:function(){return this.get("question_id")+":"+this.get("id")},is_selectable:function(){return this.get_parent().get("question_type").get_choice_selectable()}},t))}),s("Collections/QuestionChoices",["Models/QuestionChoice"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_correct),this.on("remove",this.update_correct),this.on("correct-update",this.update_correct)},count_correct:function(){return _.size(this.get_correct())},get_correct:function(){return this.filter(function(e){return e.get("correct")})},update_correct:function(e){if(this.parent.get("question_type").get_choice_selectable()){var t=this.without(e),i=this.parent;if("no"===i.get("multi_choices")&&_.each(t,function(e){e.set("correct",!1)}),0===this.count_correct()&&i.get("points")>0){var s=1===this.size()?this.models:t;_.first(s).set("correct",!0)}}},update_order:function(){var e=this,t=this.parent;this.each(function(i){i.set("marker",t.get("question_type").get_choice_markers()[e.indexOf(i)])})}})}),s("Models/QuestionType",[],function(){return Backbone.Model.extend({defaults:function(){return{choices:!1,clarifications:!0,default_choices:[],description:!0,icon:"question",id:"generic",image:!0,keywords:[],name:"Generic",placeholder:"",points:!0,video:!0}},get_keywords:function(){var e=this.get("name"),t=[e];return t.concat(this.get("keywords")).concat(e.split(" "))},get_choice_markers:function(){return this._get_choice_option("markers")},get_choice_selectable:function(){return this._get_choice_option("selectable")},get_choice_type:function(){return this._get_choice_option("type")},get_min_choices:function(){return this._get_choice_option("min")},get_max_choices:function(){return this._get_choice_option("max")},get_multi_choices:function(){var e=this.get("choices");return!!e&&this._get_choice_option("multi")},_get_choice_option:function(e){var t=this.get("choices");return!(!t||!t[e])&&t[e]}})}),s("Models/Question",["Models/Image","Collections/Questions","Collections/QuestionChoices","Models/QuestionType","Models/_Relationships"],function(e,t,i,s,n){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"llms_quiz",type:"model"},children:{choices:{"class":"QuestionChoices",model:"choice",type:"collection"},image:{"class":"Image",model:"image",type:"model"},questions:{"class":"Questions",conditional:function(e){var t=e.get("question_type"),i=_.isString(t)?t:t.get("id");return"group"===i},model:"llms_question",type:"collection"},question_type:{"class":"QuestionType",lookup:function(e){return _.isString(e)?window.llms_builder.questions.get(e):e},model:"question_type",type:"model"}}},defaults:function(){return{id:_.uniqueId("temp_"),choices:[],content:"",description_enabled:"no",image:{},multi_choices:"no",menu_order:1,points:1,question_type:"generic",questions:[],parent_id:"",title:"",type:"llms_question",video_enabled:"no",video_src:"",_expanded:!1}},initialize:function(e,t){var i=this;this.startTracking(),this.init_relationships(t),!1!==this.get("question_type").choices&&(this._ensure_min_choices(),this.listenTo(this.get("choices"),"remove",function(){setTimeout(function(){
i._ensure_min_choices()},0)})),this.get("question_type").get("points")||this.set("points",0),_.delay(function(e){e.on("change:points",e.get_parent().update_points,e.get_parent())},1,this)},add_choice:function(e,t){var i=this.get("question_type").get_max_choices();if(!(this.get("choices").size()>=i)){e=e||{},t=t||{},e.choice_type=this.get("question_type").get_choice_type(),e.question_id=this.get("id"),t.parent=this;var s=this.get("choices").add(e,t);Backbone.pubSub.trigger("question-add-choice",s,this)}},before_save:function(e,t){return"full"===t&&(e.question_type=this.get("question_type").get("id")),e},get_parent:function(){var e=this.get_relationships();if(e.parent){if(this.collection&&this.collection.parent)return this.collection.parent;if(e.parent.reference)return e.parent.reference}return!1},get_type_index:function(){var e,t=this.get("question_type").get("id");return e=this.collection.filter(function(e){var i=e.get("question_type").get("id");return"content"!==t?"content"!==i:"content"===i}),e.indexOf(this)},get_type_iterator:function(){var e=this.get_type_index();if(-1===e)return"";if("content"===this.get("question_type").get("id")){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");return t[e]}return e+1},get_qid:function(){var e=this.get_parent_question(),t="";return e&&(t=e.get_qid()+"."),t+this.get_type_iterator()},get_parent_question:function(){return!!this.is_in_group()&&this.collection.parent},get_parent_quiz:function(){return this.get_parent()},get_points:function(){return this.get("question_type").get("points")?this.get("points"):0},get_points_percentage:function(){var e=this.get_parent().get("_points"),t=this.get("points");return 0===e?"0%":(t/e*100).toFixed(2)+"%"},is_in_group:function(){return"question"===this.collection.parent.get("type")},_ensure_min_choices:function(){for(var e=this.get("choices");e.size()<this.get("question_type").get_min_choices();)this.add_choice()}},n))}),s("Collections/Questions",["Models/Question"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order),this.on("add",this.update_parent)},update_order:function(){var e=this;this.each(function(t){t.set("menu_order",e.indexOf(t)+1)})},update_parent:function(e){e.set("parent_id",this.parent.get("id"))}})}),s("Models/_Utilities",[],function(){return{fields:[],get_edit_post_link:function(){return this.has_temp_id()?"":window.llms_builder.admin_url+"post.php?post="+this.get("id")+"&action=edit"},get_settings_fields:function(){var e=this.schema||{};return window.llms_builder.schemas.get(e,this.get("type").replace("llms_",""),this)},has_temp_id:function(){return!_.isNumber(this.get("id"))&&0===this.get("id").indexOf("temp_")},init_custom_schema:function(){var e=_.filter(this.get_settings_fields(),function(e){return e.custom});_.each(e,function(e){_.each(_.flatten(e.fields),function(e){var t=[e.attribute],i=this.get("custom");e.switch_attribute&&t.push(e.switch_attribute),_.each(t,function(t){var s=e.attribute_prefix?e.attribute_prefix+t:t;i&&i[s]&&this.set(t,i[s][0])},this)},this)},this)}}}),s("Schemas/Quiz",[],function(){return{"default":{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"content",id:"description",label:LLMS.l10n.translate("Description"),type:"editor"}],[{attribute:"passing_percent",id:"passing-percent",label:LLMS.l10n.translate("Passing Percentage"),min:0,max:100,tip:LLMS.l10n.translate("Minimum percentage of total points required to pass the quiz"),type:"number"},{attribute:"allowed_attempts",id:"allowed-attempts",label:LLMS.l10n.translate("Limit Attempts"),switch_attribute:"limit_attempts",tip:LLMS.l10n.translate("Limit the maximum number of times a student can take this quiz"),type:"switch-number"},{attribute:"time_limit",id:"time-limit",label:LLMS.l10n.translate("Time Limit"),min:1,max:360,switch_attribute:"limit_time",tip:LLMS.l10n.translate("Enforce a maximum number of minutes a student can spend on each attempt"),type:"switch-number"}],[{attribute:"show_correct_answer",id:"show-correct-answer",label:LLMS.l10n.translate("Show Correct Answers"),tip:LLMS.l10n.translate("When enabled, students will be shown the correct answer to any question they answered incorrectly."),type:"switch"},{attribute:"random_questions",id:"random-questions",label:LLMS.l10n.translate("Randomize Question Order"),tip:LLMS.l10n.translate("Display questions in a random order for each attempt. Content questions are locked into their defined positions."),type:"switch"}]]}}}),s("Models/Quiz",["Collections/Questions","Models/Lesson","Models/Question","Models/_Relationships","Models/_Utilities","Schemas/Quiz"],function(e,t,i,s,n,o){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"lesson",type:"model"},children:{questions:{"class":"Questions",model:"llms_question",type:"collection"}}},schema:o,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Quiz"),type:"llms_quiz",lesson_id:"",status:"draft",content:"",allowed_attempts:5,limit_attempts:"no",limit_time:"no",passing_percent:65,name:"",random_answers:"no",time_limit:30,show_correct_answer:"no",questions:[],_points:0,permalink:"",_show_settings:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.init_relationships(),this.listenTo(this.get("questions"),"add",this.update_points),this.listenTo(this.get("questions"),"remove",this.update_points),this.set("_points",this.get_total_points()),this.on("change:status",function(){"publish"===this.get("status")&&this.get_parent().set("quiz_enabled","yes")})},add_question:function(e){e.parent_id=this.get("id");var t=this.get("questions").add(e,{parent:this});Backbone.pubSub.trigger("quiz-add-question",t,this)},get_l10n_type:function(e){return e?LLMS.l10n.translate("quizzes"):LLMS.l10n.translate("quiz")},get_total_points:function(){var e=0;return this.get("questions").each(function(t){e+=t.get_points()}),e},update_points:function(){this.set("_points",this.get_total_points())}},s,n))}),s("Schemas/Lesson",[],function(){return{"default":{title:LLMS.l10n.translate("General Settings"),toggleable:!0,fields:[[{attribute:"permalink",id:"permalink",type:"permalink"}],[{attribute:"video_embed",id:"video-embed",label:LLMS.l10n.translate("Video Embed URL"),type:"video_embed"},{attribute:"audio_embed",id:"audio-embed",label:LLMS.l10n.translate("Audio Embed URL"),type:"audio_embed"}],[{attribute:"free_lesson",id:"free-lesson",label:LLMS.l10n.translate("Free Lesson"),tip:LLMS.l10n.translate("Free lessons can be accessed without enrollment."),type:"switch"},{attribute:"require_passing_grade",id:"require-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Quiz"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's quiz before the lesson can be completed."),type:"switch",condition:function(){return"yes"===this.get("quiz_enabled")}},{attribute:"require_assignment_passing_grade",id:"require-assignment-passing-grade",label:LLMS.l10n.translate("Require Passing Grade on Assignment"),tip:LLMS.l10n.translate("When enabled, students must pass this lesson's assignment before the lesson can be completed."),type:"switch",condition:function(){return"undefined"!==window.llms_builder.assignments&&"yes"===this.get("assignment_enabled")}}],[{attribute:"prerequisite",condition:function(){return!1===this.is_first_in_course()},id:"prerequisite",label:LLMS.l10n.translate("Prerequisite"),switch_attribute:"has_prerequisite",type:"switch-select",options:function(){return this.get_available_prereq_options()}}],[{attribute:"drip_method",id:"drip-method",label:LLMS.l10n.translate("Drip Method"),switch_attribute:"drip_method",type:"select",options:function(){var e=[{key:"",val:LLMS.l10n.translate("None")},{key:"date",val:LLMS.l10n.translate("On a specific date")},{key:"enrollment",val:LLMS.l10n.translate("# of days after course enrollment")}];return this.get_course().get("start_date")&&e.push({key:"start",val:LLMS.l10n.translate("# of days after course start date")}),"yes"===this.get("has_prerequisite")&&e.push({key:"prerequisite",val:LLMS.l10n.translate("# of days after prerequisite lesson completion")}),e}},{attribute:"days_before_available",condition:function(){return-1!==["enrollment","start","prerequisite"].indexOf(this.get("drip_method"))},id:"days-before-available",label:LLMS.l10n.translate("# of days"),min:0,type:"number"},{attribute:"date_available",date_format:"Y-m-d",condition:function(){return"date"===this.get("drip_method")},id:"date-available",label:LLMS.l10n.translate("Date"),timepicker:"false",type:"datepicker"},{attribute:"time_available",condition:function(){return"date"===this.get("drip_method")},datepicker:"false",date_format:"h:i A",id:"time-available",label:LLMS.l10n.translate("Time"),type:"datepicker"}]]}}}),s("Models/Lesson",["Models/Quiz","Models/_Relationships","Models/_Utilities","Schemas/Lesson"],function(e,t,i,s){return Backbone.Model.extend(_.defaults({relationships:{parents:{model:"section",type:"model"},children:{quiz:{"class":"Quiz",conditional:function(e){return"yes"===e.get("quiz_enabled")||!_.isEmpty(e.get("quiz"))},model:"llms_quiz",type:"model"}}},schema:s,defaults:function(){return{id:_.uniqueId("temp_"),title:LLMS.l10n.translate("New Lesson"),type:"lesson",order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,parent_section:"",edit_url:"",view_url:"",content:"",audio_embed:"",has_prerequisite:"no",require_passing_grade:"yes",require_assignment_passing_grade:"yes",video_embed:"",free_lesson:"",assignment:{},assignment_enabled:"no",quiz:{},quiz_enabled:"no",_forceSync:!1}},initialize:function(){this.init_custom_schema(),this.startTracking(),this.maybe_init_assignments(),this.init_relationships();var e=this.get("quiz");_.isEmpty(e)||e.get("lesson_id")||e.set("lesson_id",this.get("id"))},get_course:function(){return this.get_parent().get_parent()},get_l10n_type:function(e){return e?LLMS.l10n.translate("lessons"):LLMS.l10n.translate("lesson")},get_parent:function(){var e=this.get_relationships();return e.parent&&e.parent.reference?e.parent.reference:!(!this.collection||!this.collection.parent)&&this.collection.parent},get_available_prereq_options:function(){var e=this.get_parent().collection.indexOf(this.get_parent()),t=this.collection.indexOf(this),i=[];return this.get_course().get("sections").each(function(s,n){if(n<=e){var o={label:LLMS.l10n.replace("Section %1$d: %2$s",{"%1$d":s.get("order"),"%2$s":s.get("title")}),options:[]};s.get("lessons").each(function(i,s){(n!==e||s<t)&&o.options.push({key:i.get("id"),val:LLMS.l10n.replace("Lesson %1$d: %2$s",{"%1$d":i.get("order"),"%2$s":i.get("title")})})},this),i.push(o)}},this),i},add_quiz:function(e){e=e||{},e.lesson_id=this.id,e.title||(e.title=LLMS.l10n.replace("%1$s Quiz",{"%1$s":this.get("title")})),this.set("quiz",e),this.init_relationships();var t=this.get("quiz");return this.set("quiz_enabled","yes"),t},is_first_in_course:function(){if(this.collection.indexOf(this))return!1;var e=this.get_parent();return!e.collection.indexOf(e)},maybe_init_assignments:function(){window.llms_builder.assignments&&(this.relationships.children.assignment={"class":"Assignment",conditional:function(e){return"yes"===e.get("assignment_enabled")||!_.isEmpty(e.get("assignment"))},model:"llms_assignment",type:"model"})}},t,i))}),s("Collections/Lessons",["Models/Lesson"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.on_reorder),this.on("add",this.on_reorder),this.on("remove",this.on_reorder)},on_reorder:function(){this.update_order(),this.validate_prereqs()},update_order:function(){this.each(function(e){e.set("order",this.indexOf(e)+1)},this)},validate_prereqs:function(){this.each(function(e){if("yes"===e.get("has_prerequisite")){var t=_.pluck(_.flatten(_.pluck(e.get_available_prereq_options(),"options")),"key");-1===t.indexOf(1*e.get("prerequisite"))&&e.set({prerequisite:0,has_prerequisite:"no"})}},this)}})}),s("Collections/QuestionTypes",["Models/QuestionType"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("add",this.comparator),this.on("remove",this.comparator)},comparator:function(e){return e.get("group").order}})}),s("Models/Section",["Collections/Lessons","Models/_Relationships"],function(e,t){return Backbone.Model.extend(_.defaults({relationships:{parent:{model:"course",type:"model"},children:{lessons:{"class":"Lessons",model:"lesson",type:"collection"}}},defaults:function(){return{id:_.uniqueId("temp_"),lessons:[],order:this.collection?this.collection.length+1:1,parent_course:window.llms_builder.course.id,title:LLMS.l10n.translate("New Section"),type:"section",_expanded:!1,_selected:!1}},initialize:function(){this.startTracking(),this.init_relationships()},add_lesson:function(e,t){return e=e||{},t=t||{},e instanceof Backbone.Model?(e.set("parent_section",this.get("id")),e.set_parent(this)):e.parent_section=this.get("id"),this.get("lessons").add(e,t)},get_l10n_type:function(e){return e?LLMS.l10n.translate("sections"):LLMS.l10n.translate("section")},get_next:function(e){return this._get_sibling("next",e)},get_prev:function(e){return this._get_sibling("prev",e)},_get_sibling:function(e,t){t="undefined"===t||t;var i,s=this.collection.size()-1,n=this.collection.indexOf(this);if("next"===e?i=n+1:"prev"===e&&(i=n-1),i<=s||i<=0)return this.collection.at(i);if(t){if("next"===e)return this.collection.first();if("prev"===e)return this.collection.last()}return!1}},t))}),s("Collections/Sections",["Models/Section"],function(e){return Backbone.Collection.extend({model:e,initialize:function(){this.on("reorder",this.update_order),this.on("add",this.update_order),this.on("remove",this.update_order)},update_order:function(){var e=this;this.each(function(t){t.set("order",e.indexOf(t)+1)})}})}),s("Collections/loader",["Collections/Lessons","Collections/QuestionChoices","Collections/Questions","Collections/QuestionTypes","Collections/Sections"],function(e,t,i,s,n){return{Lessons:e,QuestionChoices:t,Questions:i,QuestionTypes:s,Sections:n}}),s("Models/Abstract",["Models/_Relationships","Models/_Utilities"],function(e,t){return Backbone.Model.extend(_.defaults({},e,t))}),s("Models/Course",["Collections/Sections","Models/_Relationships","Models/_Utilities"],function(e,t,i){return Backbone.Model.extend(_.defaults({relationships:{children:{sections:{"class":"Sections",model:"section",type:"collection"}}},defaults:function(){return{edit_url:"",sections:[],title:"New Course",type:"course",view_url:""}},initialize:function(){this.startTracking(),this.init_relationships(),Backbone.pubSub.on("add-new-section",this.add_section,this),Backbone.pubSub.on("add-new-lesson",this.add_lesson,this),Backbone.pubSub.on("lesson-search-select",this.add_existing_lesson,this)},add_existing_lesson:function(e){var t=e.data;"clone"===e.action?(delete t.id,t.quiz&&(delete t.quiz,t.quiz_enabled="no")):t._forceSync=!0,delete t.order,delete t.parent_course,delete t.parent_section,this.add_lesson(t)},add_lesson:function(e){e=e||{};var t,i={};e.parent_section?t=this.get("sections").get(e.parent_section):(t=this.get_selected_section(),t||(t=this.get("sections").last())),e._selected=!0,e.parent_course=this.get("id");var s=t.add_lesson(e,i);return Backbone.pubSub.trigger("new-lesson-added",s),t.set("_expanded",!0),s},add_section:function(e){e=e||{};var t=this.get("sections"),i={},s=this.get_selected_section();s&&(i.at=t.indexOf(s)+1),t.add(e,i)},get_selected_section:function(){return this.get("sections").find(function(e){return e.get("_selected")})}},t,i))}),s("Models/loader",["Models/Abstract","Models/Course","Models/Image","Models/Lesson","Models/Question","Models/QuestionChoice","Models/QuestionType","Models/Quiz","Models/Section"],function(e,t,i,s,n,o,l,a,r){return{Abstract:e,Course:t,Image:i,Lesson:s,Question:n,QuestionChoice:o,QuestionType:l,Quiz:a,Section:r}}),s("Views/_Detachable",[],function(){return{events:{'click a[href="#llms-detach-model"]':"detach_model"},detach_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to detach this %s?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-detached",this.model),this.trigger("model-trashed",this.model))}}}),s("Views/_Editable",[],function(){return{media_lib:null,events:{"click .llms-add-image":"open_media_lib",'click a[href="#llms-edit-slug"]':"make_slug_editable",'click a[href="#llms-remove-image"]':"remove_image","change .llms-editable-select select":"on_select",'change .llms-switch input[type="checkbox"]':"toggle_switch","change .llms-editable-radio input":"on_radio_select","focusin .llms-input":"on_focus","focusout .llms-input":"on_blur","keydown .llms-input":"on_keydown",'input .llms-input[type="number"]':"on_blur","paste .llms-input[data-formatting]":"on_paste"},get_allowed_tags:function(e){return e.attr("data-formatting")?_.map(e.attr("data-formatting").split(","),function(e){return e.trim()}):["b","i","u","strong","em"]},get_content:function(e){return"INPUT"===e[0].tagName?e.val():e.attr("data-formatting")||e.hasClass("ql-editor")?_.stripFormatting(e.html(),this.get_allowed_tags(e)):e.text()},has_changed:function(t){var i=e(t.target);return i.attr("data-original-content")!==this.get_content(i)},is_valid:function(t){var i=this,s=e(t.target),n=this.get_content(s),o=s.attr("data-type");if((s.attr("required")||s.attr("data-required"))&&n.length<1)return!1;if("url"===o||"video"===o){if(!this._validate_url(this.get_content(s)))return!1}else"permalink"===o&&LLMS.Ajax.call({data:{action:"llms_builder",action_type:"get_permalink",course_id:window.llms_builder.CourseModel.get("id"),id:i.model.get("id"),title:i.model.get("title"),slug:n},beforeSend:function(){LLMS.Spinner.start(s.closest(".llms-editable-toggle-group"),"small")},success:function(e){e.permalink&&e.slug&&(i.model.set("permalink",e.permalink),i.model.set("name",e.slug),i.render())}});return!0},init_datepickers:function(){this.$el.find(".llms-editable-date input").each(function(){e(this).datetimepicker({format:e(this).attr("data-date-format")||"Y-m-d h:i A",datepicker:void 0===e(this).attr("data-date-datepicker")||"true"==e(this).attr("data-date-datepicker"),timepicker:void 0===e(this).attr("data-date-timepicker")||"true"==e(this).attr("data-date-timepicker"),onClose:function(e,t){t.blur()}})})},init_formatting_els:function(){var t=this;this.$el.find(".llms-input-formatting[data-formatting]").each(function(){var i=e(this).attr("data-formatting").split(","),s=e(this).attr("data-attribute"),n=new Quill(this,{modules:{toolbar:[i],keyboard:{bindings:{tab:{key:9,handler:function(e,t){return!0}},13:{key:13,handler:function(e,t){return n.root.blur(),!1}}}}},placeholder:e(this).attr("data-placeholder"),theme:"bubble"});n.on("text-change",function(i,o,l){t.model.set(s,t.get_content(e(n.root)))}),Backbone.pubSub.trigger("formatting-ed-init",n,e(this),t)})},init_selects:function(){this.$el.find(".llms-editable-select select").llmsSelect2({width:"100%"})},on_blur:function(t){t.stopPropagation(),this.model.set("_has_focus",!1,{silent:!0});var i=this,s=(e(t.target),this.has_changed(t));s&&(i.is_valid(t)?this.save_edits(t):i.revert_edits(t))},on_focus:function(e){e.stopPropagation(),this.model.set("_has_focus",!0,{silent:!0})},on_paste:function(e){e.preventDefault(),e.stopPropagation();var t=(e.originalEvent||e).clipboardData.getData("text/plain");window.document.execCommand("insertText",!1,t)},on_select:function(t){var i,s=e(t.target),n=s.attr("multiple"),o=s.attr("name"),l=s.find("option:selected");n?(i=[],i=l.map(function(){return this.value}).get()):i=l[0].value,this.model.set(o,i)},on_radio_select:function(t){var i=e(t.target),s=i.attr("name"),n=i.val();this.model.set(s,n)},on_keydown:function(e){e.stopPropagation();var t=e.which||e.keyCode,i=e.shiftKey;switch(t){case 13:i||(e.preventDefault(),e.target.blur());break;case 27:e.preventDefault(),this.revert_edits(e),e.target.blur()}},open_media_lib:function(t){t.stopPropagation();var i=this,s=e(t.currentTarget);i.media_lib?i.media_lib.uploader.uploader.param("post_id"):(i.media_lib=wp.media.frames.file_frame=wp.media({title:LLMS.l10n.translate("Select an image"),button:{text:LLMS.l10n.translate("Use this image")},multiple:!1}),i.media_lib.on("select",function(){var e,t=s.attr("data-image-size"),n=i.media_lib.state().get("selection").first().toJSON(),o=i.model.get(s.attr("data-attribute"));e=t&&n.sizes[t]?n.sizes[t].url:n.url,o.set({id:n.id,src:e})})),i.media_lib.open()},remove_image:function(t){t.preventDefault(),this.model.get(e(t.currentTarget).attr("data-attribute")).set({id:"",src:""})},revert_edits:function(t){var i=e(t.target),s=i.attr("data-original-content");i.html(s)},save_edits:function(t){var i=e(t.target),s=this.get_content(i);this.model.set(i.attr("data-attribute"),s)},toggle_switch:function(t){t.stopPropagation();var i,s=e(t.target),n=s.attr("name"),o=s.attr("data-rerender");if(i=s.is(":checked")?s.attr("data-on")?s.attr("data-on"):"yes":s.attr("data-off")?s.attr("data-off"):"no",-1!==n.indexOf(".")){var l=n.split(".");"parent"===l[0]?this.model.get_parent().set(l[1],i):this.model.get(l[0]).set(l[1],i)}else this.model.set(n,i);if(this.trigger(n.replace(".","-")+"_toggle",i),!o||"yes"===o){var a=this;setTimeout(function(){a.render()},100)}},init_editor:function(t,i){i=i||{},wp.editor.remove(t),wp.editor.initialize(t,e.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help",setup:_.bind(this.on_editor_ready,this)}},i))},make_slug_editable:function(t){var i=e(t.currentTarget),s=i.prevAll("a"),n=i.prev("input.permalink"),o=s.attr("href"),l=n.val(),a=o.replace(l,"");i.hide(),s.css({color:"#999","pointer-events":"none","text-decoration":"none"}),s.text(a.substring(0,a.length-1)),n.show().focus()},on_editor_ready:function(t){var i=this,s=e("#"+t.id),n=s.closest(".llms-editable-editor"),o=n.find(".llms-label"),l=s.attr("data-attribute");o.length&&o.prependTo(n.find(".wp-editor-tools")),t.on("change",function(e){i.model.set(l,wp.editor.getContent(t.id))}),s.on("input",function(e){i.model.set(l,s.val())}),n.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){s.trigger("input")},10)})},_validate_url:function(e){var t=document.createElement("a");return t.href=e,t.host&&t.host!==window.location.host}}}),s("Views/_Receivable",[],function(){return{_receive:function(e,t){if(t.sender.hasClass("ui-draggable")){var i=this._getContainerEl().children().index(t.helper);return t.helper.remove(),void this.collection.add({},{at:i})}var s=t.sender,n=s.data("view");if(n&&n.collection){var o=this._getContainerEl().children().index(t.item),l=n.collection.get(t.item.attr("data-model-cid"));n.collection.remove(l),this.collection.add(l,{at:o}),l.collection=this.collection,this.setSelectedModel(l)}}}}),s("Views/_Shiftable",[],function(){return{maybe_hide_shiftable_buttons:function(){if(this.model.collection){var e=this.model.get("type");this.model.collection.first()===this.model?this.$el.find(".shift-up--"+e).hide():this.model.collection.last()===this.model&&this.$el.find(".shift-down--"+e).hide()}},shift:function(e,t){var i=this.model.collection;i.remove(this.model),i.add(this.model,{at:t}),i.trigger("reorder")},shift_down:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t+1)},shift_up:function(e){e.preventDefault();var t=this.model.collection.indexOf(this.model);this.shift(t,t-1)}}}),s("Views/_Subview",[],function(){return{subscriptions:{},state:"",views:{},get_subview:function(e){return!!this.views[e]&&this.views[e]},events_subscribe:function(e){_.each(e,function(e,t){this.subscriptions[t]=e,Backbone.pubSub.on(t,e,this)},this)},events_unsubscribe:function(){_.each(this.subscriptions,function(e,t){Backbone.pubSub.off(t,e,this),delete this.subscriptions[t]},this)},remove_subview:function(e){var t=this.get_subview(e);t&&t.instance&&(_.isEmpty(t.instance.views)||(t.instance.events_unsubscribe(),t.instance.remove_subviews()),t.instance.off(),t.instance.off(null,null,null),t.instance.remove(),t.instance.undelegateEvents(),t.instance=null)},remove_subviews:function(){_.each(this.views,function(e,t){this.remove_subview(t)},this)},render_subviews:function(e){e=e||{},_.each(this.views,function(t,i){this.state===t.state?this.render_subview(i,e):this.remove_subview(i)},this)},render_subview:function(e,t){var i=this.get_subview(e);i&&(this.remove_subview(e),i.instance||(i.instance=new i["class"](t)),i.instance.render())},set_state:function(e){return this.state=e,this}}}),s("Views/_Trashable",[],function(){return{events:{'click a[href="#llms-trash-model"]':"trash_model"},trash_model:function(e){e&&(e.preventDefault(),e.stopPropagation());var t=LLMS.l10n.replace("Are you sure you want to move this %s to the trash?",{"%s":this.model.get_l10n_type()});window.confirm(t)&&(this.model.collection&&this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model),this.trigger("model-trashed",this.model))}}}),s("Views/_loader",["Views/_Detachable","Views/_Editable","Views/_Receivable","Views/_Shiftable","Views/_Subview","Views/_Trashable"],function(e,t,i,s,n,o){return{Detachable:e,Editable:t,Receivable:i,Shiftable:s,Subview:n,Trashable:o}}),s("Controllers/Construct",["Collections/loader","Models/loader","Views/_loader"],function(e,t,i){return function(){function s(e,t,i,s){return e[t]?new e[t](i,s):(console.log('"'+t+'" not found.'),!1)}return this.get_collection=function(t,i,n){return s(e,t,i,n)},this.get_model=function(e,i,n){return s(t,e,i,n)},this.extend_view=function(){for(var e=arguments[0],t=1;arguments[t];){var s=arguments[t];i[s]&&(e.events&&i[s].events&&(e.events=_.defaults(e.events,i[s].events)),e=_.defaults(e,i[s])),t++}return Backbone.View.extend(e)},this.register_collection=function(t,i){e[t]=Backbone.Collection.extend(i)},this.register_model=function(e,i){t[e]=t.Abstract.extend(i)},this}}),s("Controllers/Debug",[],function(){return function(e){var t=this,i=e.enabled||!1;this.disable=function(){t.log("LifterLMS Builder debugging disabled"),i=!1},this.enable=function(){i=!0,t.log("LifterLMS Builder debugging enabled")},this.log=function(){i&&_.each(arguments,function(e){console.log(e)})},this.toggle=function(){i?t.disable():t.enable()},i&&t.enable()}}),s("Controllers/Schemas",[],function(){return function(e){var t=e;return _.each(t,function(e){_.each(e,function(e){e.custom=!0})}),this.get=function(e,i,s){return t[i]&&(e=_.extend(e,t[i])),e},this}}),s("Controllers/Sync",[],function(){return function(t,i){function s(){"undefined"==typeof wp.heartbeat&&(window.llms_builder.debug.log("WordPress Heartbeat disabled. Autosaving is disabled!"),g=!1),b&&m.set_check_interval(b),e(window).on("beforeunload",function(){if(m.has_unsaved_changes())return o(),"Are you sure you want to abandon your changes?"})}function n(e,t){return"success"===e.status&&(e.message=[]),e.status="error","string"==typeof t&&(t=[t]),e.message=e.message.concat(t),e}function o(){var e={};e.changes=m.get_unsaved_changes(),e.has_unsaved_changes=m.has_unsaved_changes(e.changes),e.saving=m.saving,window.llms_builder.debug.log("==== start changes check ====",e,"==== finish changes check ===="),Backbone.pubSub.trigger("current-save-status",e)}function l(){if(!m.saving){var e=m.get_unsaved_changes();m.has_unsaved_changes(e)&&(e.id=t.get("id"),LLMS.Ajax.call({data:{action:"llms_builder",action_type:"ajax_save",course_id:e.id,llms_builder:JSON.stringify(e)},beforeSend:function(){window.llms_builder.debug.log("==== start do_ajax_save before ====",e,"==== finish do_ajax_save before ===="),m.saving=!0,Backbone.pubSub.trigger("heartbeat-send",m)},error:function(e,t,i){window.llms_builder.debug.log("==== start do_ajax_save error ====",data,"==== finish do_ajax_save error ===="),m.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",m,{status:"error",message:e.responseText+" ("+i+" "+t+")"})},success:function(e){e.llms_builder&&(window.llms_builder.debug.log("==== start do_ajax_save success ====",e,"==== finish do_ajax_save success ===="),e.llms_builder=u(e.llms_builder),e.llms_builder=p(e.llms_builder),m.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",m,e.llms_builder))}}))}}function a(e){var t,i={};if(e.get("_has_focus"))return i;c(e)||!0===e.get("_forceSync")?(i=_.clone(e.attributes),t="full"):(i=e.unsavedAttributes(),t="partial");var s=e.get_relationships?e.get_child_props():[];return i=_.omit(i,function(e,t){return 0===t.indexOf("_")||-1!==s.indexOf(t)}),e.before_save&&(i=e.before_save(i,t)),i}function r(e){var t;return e instanceof Backbone.Model?(t=a(e),e.get_relationships&&_.each(e.get_child_props(),function(i){var s=r(e.get(i));_.isEmpty(s)||(t[i]=s)}),_.isEmpty(t)||(t.id=e.get("id"))):e instanceof Backbone.Collection&&(t=[],e.each(function(e){var i=r(e);_.isEmpty(i)||t.push(i)})),t}function c(e){return!_.isNumber(e.id)&&0===e.id.indexOf("temp_")}function d(e,t){var i=["id","orig_id"];e.get_relationships&&i.concat(e.get_child_props()),_.each(_.omit(t,i),function(t,i){_.isEqual(e.get(i),t)&&(delete e._unsavedChanges[i],e._originalAttrs[i]=t)}),e.unset("_forceSync")}function u(e){var t={detach:v,trash:w};return _.each(t,function(t,i){if(e[i]){var s=[];_.each(e[i],function(e){e.error?s.push(e.error):t.remove(e.id)}),s.length&&_.extend(e,n(e,s))}}),e}function h(e,t,i,s){if(!e[t])return e;if(i.get(t)instanceof Backbone.Model){var o=e[t];if(o.error)_.extend(s,n(s,o.error));else{var l=i.get(t);o.id!=o.orig_id&&(l.set("id",o.id),delete l._unsavedChanges.id),d(l,o),l.get_relationships&&_.each(l.get_child_props(),function(i){_.extend(e[t],h(e[t],i,l,s))})}}else i.get(t)instanceof Backbone.Collection&&_.each(e[t],function(o,l){if(o.error)_.extend(s,n(s,o.error));else{var a=i.get(t).get(o.orig_id);o.id!=o.orig_id&&(a.set("id",o.id),delete a._unsavedChanges.id),d(a,o),a.get_relationships&&_.each(a.get_child_props(),function(i){_.extend(e[t],h(e[t][l],i,a,s))})}});return s}function p(e){return e.updates?(e.updates&&(e=h(e.updates,"sections",t,e)),e):e}this.saving=!1;var m=this,g=!0,f=null,b=i.check_interval_ms||1e4,v=new Backbone.Collection,w=new Backbone.Collection;return this.get_unsaved_changes=function(){return{detach:v.pluck("id"),trash:w.pluck("id"),updates:r(t)}},this.has_unsaved_changes=function(e){"undefined"==typeof e&&(e=m.get_unsaved_changes());var t=_.find(e,function(e){return!1===_.isEmpty(e)});return!!t},this.save_now=function(){g?wp.heartbeat.connectNow():l()},this.set_check_interval=function(e){b=e,f&&clearInterval(f),b&&(f=setInterval(o,b))},Backbone.pubSub.on("model-detached",function(e){c(e)||v.add(_.clone(e.attributes))}),Backbone.pubSub.on("model-trashed",function(e){if(!c(e)){var t=_.clone(e.attributes);e.get_trash_id&&(t.id=e.get_trash_id()),w.add(t)}}),e(document).on("heartbeat-send",function(e,i){if(!m.saving){var s=m.get_unsaved_changes();m.has_unsaved_changes(s)&&(s.id=t.get("id"),m.saving=!0,i.llms_builder=JSON.stringify(s)),window.llms_builder.debug.log("==== start heartbeat-send ====",i,"==== finish heartbeat-send ===="),Backbone.pubSub.trigger("heartbeat-send",m)}}),e(document).on("heartbeat-tick",function(e,t){t.llms_builder&&(window.llms_builder.debug.log("==== start heartbeat-tick ====",t,"==== finish heartbeat-tick ===="),t.llms_builder=u(t.llms_builder),t.llms_builder=p(t.llms_builder),m.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",m,t.llms_builder))}),e(document).on("heartbeat-error",function(e,t){window.llms_builder.debug.log("==== start heartbeat-error ====",t,"==== finish heartbeat-error ===="),m.saving=!1,Backbone.pubSub.trigger("heartbeat-tick",m,{
status:"error",message:t.responseText+" ("+t.status+" "+t.statusText+")"})}),s(),this}}),s("Views/Lesson",["Views/_Detachable","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(e,t,i,s){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id,"data-section-id":this.model.get("parent_section")}},className:"llms-builder-item llms-lesson",events:_.defaults({"click .edit-lesson":"open_lesson_editor","click .edit-quiz":"open_quiz_editor","click .edit-assignment":"open_assignment_editor","click .section-prev":"section_prev","click .section-next":"section_next","click .shift-up--lesson":"shift_up","click .shift-down--lesson":"shift_down"},e.events,t.events,s.events),id:function(){return"llms-lesson-"+this.model.id},tagName:"li",template:wp.template("llms-lesson-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),Backbone.pubSub.on("lesson-selected",this.on_select,this),Backbone.pubSub.on("new-lesson-added",this.on_select,this)},render:function(){return this.$el.html(this.template(this.model)),this.maybe_hide_shiftable_buttons(),this.model.get("_selected")?this.$el.addClass("selected"):this.$el.removeClass("selected"),this},open_assignment_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"assignment"),this.model.set("_selected",!0)},open_lesson_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"lesson"),this.model.set("_selected",!0)},open_quiz_editor:function(){Backbone.pubSub.trigger("lesson-selected",this.model,"quiz"),this.model.set("_selected",!0)},on_select:function(e){this.model.id!==e.id&&this.model.set("_selected",!1)},section_next:function(e){e.preventDefault(),this._move_to_section("next")},section_prev:function(e){e.preventDefault(),this._move_to_section("prev")},_move_to_section:function(e){var t,i=this.model.collection;"next"===e?t=i.parent.get_next():"prev"===e&&(t=i.parent.get_prev()),t&&(i.remove(this.model),t.add_lesson(this.model),t.set("_expanded",!0))}},e,t,i,s))}),s("Views/LessonList",["Views/Lesson","Views/_Receivable"],function(t,i){return Backbone.CollectionView.extend(_.defaults({className:"llms-lessons",modelView:t,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-lessons",cursor:"move",handle:".drag-lesson",items:".llms-lesson",placeholder:"llms-lesson llms-sortable-placeholder"},sortable_start:function(t){e(".llms-lessons").addClass("dragging")},sortable_stop:function(t){e(".llms-lessons").removeClass("dragging")},_sortStop:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl(),n=s.children().index(t.item);n==-1&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n)}},i))}),s("Views/Section",["Views/LessonList","Views/_Editable","Views/_Shiftable","Views/_Trashable"],function(t,i,s,n){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},className:"llms-builder-item llms-section",events:_.defaults({click:"select","click .expand":"expand","click .collapse":"collapse","click .shift-up--section":"shift_up","click .shift-down--section":"shift_down","mouseenter .llms-lessons":"on_mouseenter"},i.events,n.events),id:function(){return"llms-section-"+this.model.id},tagName:"li",template:wp.template("llms-section-template"),initialize:function(){this.render(),this.listenTo(this.model,"change",this.render),this.listenTo(this.model,"change:_expanded",this.toggle_expanded),this.lessonListView.collection.on("add",this.on_lesson_add,this),this.dragTimeout=null,Backbone.pubSub.on("expand-all",this.expand,this),Backbone.pubSub.on("collapse-all",this.collapse,this)},render:function(){return this.$el.html(this.template(this.model.toJSON())),this.maybe_hide_shiftable_buttons(),this.lessonListView=new t({el:this.$el.find(".llms-lessons"),collection:this.model.get("lessons")}),this.lessonListView.render(),this.lessonListView.on("sortStart",this.lessonListView.sortable_start),this.lessonListView.on("sortStop",this.lessonListView.sortable_stop),this.lessonListView.on("selectionChanged",this.active_lesson_change,this),this.maybe_hide_trash_button(),this},active_lesson_change:function(e,t){Backbone.pubSub.trigger("active-lesson-change",{current:e,previous:t})},collapse:function(e,t){"undefined"==typeof t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.removeClass("expanded").find(".drag-expanded").removeClass("drag-expanded"),t&&this.model.set("_expanded",!1),Backbone.pubSub.trigger("section-toggle",this.model)},expand:function(e,t){"undefined"==typeof t&&(t=!0),e&&(e.stopPropagation(),e.preventDefault()),this.$el.addClass("expanded"),t&&this.model.set("_expanded",!0),Backbone.pubSub.trigger("section-toggle",this.model)},maybe_hide_trash_button:function(){var e=this.$el.find(".trash--section");this.model.get("lessons").isEmpty()?e.show():e.hide()},on_lesson_add:function(e){this.lessonListView.collection.trigger("reorder"),e.set("parent_section",this.model.get("id")),this.expand()},on_mouseenter:function(t){e(t.target).hasClass("dragging")&&(e(".drag-expanded").removeClass("drag-expanded"),e(t.target).addClass("drag-expanded"))},toggle_expanded:function(e,t){t?this.expand(null,!1):this.collapse(null,!1)}},i,s,n))}),s("Views/SectionList",["Views/Section","Views/_Receivable"],function(e,t){return Backbone.CollectionView.extend(_.defaults({el:"#llms-sections",events:{"mousedown > li.llms-section > .llms-builder-header .llms-headline":"_listItem_onMousedown",click:"_listBackground_onClick","click ul.collection-view":"_listBackground_onClick",keydown:"_onKeydown"},modelView:e,processKeyEvents:!1,selectable:!0,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".drag-section",items:".llms-section",placeholder:"llms-section llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}},t))}),s("Views/Course",["Views/SectionList","Views/_Editable"],function(e,t){return Backbone.View.extend(_.defaults({attributes:function(){return{"data-id":this.model.id}},el:"#llms-builder-main",tagName:"div",template:wp.template("llms-course-template"),initialize:function(){this.render(),this.sectionListView=new e({collection:this.model.get("sections")}),this.sectionListView.render(),this.sectionListView.on("sortStart",this.sectionListView.sortable_start),this.sectionListView.on("sortStop",this.sectionListView.sortable_stop),this.sectionListView.on("selectionChanged",this.active_section_change),this.listenTo(this.model.get("sections"),"add",this.on_section_add),Backbone.pubSub.on("section-toggle",this.on_section_toggle,this),Backbone.pubSub.on("expand-section",this.expand_section,this),Backbone.pubSub.on("lesson-selected",this.active_lesson_change,this)},render:function(){return this.$el.html(this.template(this.model)),this},active_lesson_change:function(e){var t=this.model.get("sections").get(e.get("parent_section"));this.sectionListView.setSelectedModel(t)},active_section_change:function(e,t){_.each(e,function(e){e.set("_selected",!0)}),_.each(t,function(e){e.set("_selected",!1)})},on_section_add:function(e){this.sectionListView.setSelectedModel(e)},on_section_toggle:function(e){var t=e.get("_expanded")?[e]:[];this.sectionListView.setSelectedModels(t)}},t))}),s("Views/SettingsFields",[],function(){return Backbone.View.extend(_.defaults({events:{"click .llms-settings-group-toggle":"toggle_group"},fields:{},tagName:"div",template:wp.template("llms-settings-fields-template"),get_editor_fields:function(){return _.filter(this.fields,function(e){return this.is_editor_field(e.type)},this)},get_groups:function(){return this.model.get_settings_fields()},is_group_hidden:function(e){var t="llms-"+this.model.get("type")+"-settings-group--"+e;return"undefined"!==window.localStorage&&"hidden"===window.localStorage.getItem(t)},get_switch_attribute:function(e){return e.switch_attribute?e.switch_attribute:e.attribute},has_switch:function(e){return-1!==e.indexOf("switch")},is_default_field:function(e){var t=["audio_embed","datepicker","number","text","video_embed"];return-1!==t.indexOf(e.replace("switch-",""))},is_editor_field:function(e){var t=["editor","switch-editor"];return-1!==t.indexOf(e.replace("switch-",""))},is_switch_condition_met:function(e){return e.switch_on===this.model.get(e.switch_attribute)},render:function(){return this.$el.html(this.template(this)),_.each(this.get_editor_fields(),function(e){this.render_editor(e)},this),this},render_editor:function(t){var i=this;wp.editor.remove(t.id),t.settings.tinymce.setup=function(t){var s=e("#"+t.id),n=s.closest(".llms-editable-editor"),o=n.find(".llms-label"),l=s.attr("data-attribute");o.length&&o.prependTo(n.find(".wp-editor-tools")),t.on("change",function(e){i.model.set(l,wp.editor.getContent(t.id))}),s.on("input",function(e){i.model.set(l,s.val())}),n.on("click",".quicktags-toolbar .ed_button",function(){setTimeout(function(){s.trigger("input")},10)})},wp.editor.initialize(t.id,t.settings)},render_select_options:function(e,t){function i(e,t){return'<option value="'+t+'"'+_.selected(t,n)+">"+e+"</option>"}var s="",n=this.model.get(t);return _.each(e,function(e,n){"string"==typeof e?s+=i(e,n):"object"==typeof e&&(e.label&&e.options?(s+='<optgroup label="'+e.label+'">',s+=this.render_select_options(e.options,t)):s+=i(e.val,e.key))},this),s},setup_field:function(t,i){var s={classes:[],id:_.uniqueId(t.attribute+"_"),input_type:"text",label:"",options:{},placeholder:"",tip:"",tip_position:"top-right",settings:{}};if(t.condition&&!1===_.bind(t.condition,this.model)())return!1;switch(t.type){case"audio_embed":s.classes.push("llms-editable-audio"),s.placeholder="https://",s.tip=LLMS.l10n.translate("Use SoundCloud or Spotify audio URLS."),s.input_type="url";break;case"datepicker":s.classes.push("llms-editable-date");break;case"editor":case"switch-editor":var n=t.settings||{};s.settings=e.extend(!0,wp.editor.getDefaultSettings(),{mediaButtons:!0,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,blockquote,hr,alignleft,aligncenter,alignright,link,unlink,wp_adv",toolbar2:"formatselect,underline,alignjustify,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help"}},n);break;case"number":s.input_type="number";break;case"permalink":s.label=LLMS.l10n.translate("Permalink");break;case"video_embed":s.classes.push("llms-editable-video"),s.placeholder="https://",s.tip=LLMS.l10n.translate("Use YouTube, Vimeo, or Wistia video URLS."),s.input_type="url"}this.has_switch(t.type)&&(s.switch_on="yes",s.switch_off="no");var o=_.defaults(_.deepClone(t),s);if(_.isFunction(o.options)&&(o.options=_.bind(o.options,this.model)()),-1!==["radio","switch-radio"].indexOf(t.type)){var l=!1;_.each(t.options,function(e,t){-1===e.indexOf(".png")&&-1===e.indexOf(".jpg")||(o.options[t]='<span><img src="'+e+'"></span>',l=!0)}),l&&o.classes.push("has-images")}return o.tip&&o.classes.push("tip--"+o.tip_position),o.classes.length&&(o.classes=" "+o.classes.join(" ")),this.fields[o.id]=o,o},should_rerender_on_toggle:function(e){return-1!==e.indexOf("switch-")?"yes":"no"},toggle_group:function(t){t.preventDefault();var i=e(t.currentTarget),s=i.closest(".llms-model-settings");if(s.toggleClass("hidden"),"undefined"!==window.localStorage){var n=s.attr("id");s.hasClass("hidden")?window.localStorage.setItem(n,"hidden"):window.localStorage.removeItem(n)}}}))}),s("Views/LessonEditor",["Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(e,t,i,s,n){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{"class":n,instance:null,state:"default"}},el:"#llms-editor-lesson",events:_.defaults({},e.events,t.events,i.events),template:wp.template("llms-lesson-settings-template"),initialize:function(e){this.model=e.lesson;var t=["change:date_available","change:drip_method","change:time_available"];_.each(t,function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model,"change:has_prerequisite",function(e,t){"yes"===t&&this.$el.find('select[name="prerequisite"]').trigger("change")})},render:function(){return this.$el.html(this.template(this.model)),this.remove_subview("settings"),this.render_subview("settings",{el:"#llms-lesson-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this}},e,t,i,s,n))}),s("Views/Popover",[],function(){return Backbone.View.extend({defaults:{placement:"auto",width:"auto",trigger:"manual",style:"light",animation:"pop",title:"",content:"",closeable:!1,backdrop:!1,onShow:function(e){},onHide:function(e){}},tagName:"div",initialize:function(e){this.$el.length&&(this.defaults.container=this.$el.parent()),this.args=_.defaults(e.args,this.defaults),this.render()},render:function(){return this.$el.webuiPopover(this.args),this},hide:function(){return this.$el.webuiPopover("hide"),this},show:function(){return this.$el.webuiPopover("show"),this}})}),s("Views/PostSearch",[],function(){return Backbone.View.extend({events:{"select2:select":"add_post"},tagName:"select",initialize:function(e){this.post_type=e.post_type,this.searching_message=e.searching_message||LLMS.l10n.translate("Searching...")},add_post:function(e){var t=this.$el.attr("data-post-type");Backbone.pubSub.trigger(t.replace("llms_","")+"-search-select",e.params.data,e),this.$el.val(null).trigger("change")},render:function(){var t=this;return setTimeout(function(){t.$el.llmsSelect2({ajax:{dataType:"JSON",delay:250,method:"POST",url:window.ajaxurl,data:function(e){return{action:"llms_builder",action_type:"search",course_id:window.llms_builder.course.id,post_type:t.post_type,term:e.term,page:e.page,_ajax_nonce:wp_ajax_data.nonce}}},dropdownParent:e(".wrap.lifterlms.llms-builder"),escapeMarkup:function(e){return e},placeholder:t.searching_message,templateResult:t.render_result,width:"100%"}),t.$el.attr("data-post-type",t.post_type)},0),this},render_result:function(t){var i=e('<div class="llms-existing-lesson-result" />');if(t.loading)return i.append(t.text);var s=e('<aside class="llms-existing-action" />'),n=e('<div class="llms-existing-info" />');return icon="attach"===t.action?"paperclip":"clone",text="attach"===t.action?LLMS.l10n.translate("Attach"):LLMS.l10n.translate("Clone"),s.append('<i class="fa fa-'+icon+'" aria-hidden="true"></i><small>'+text+"</small>"),n.append("<h4>"+t.data.title+"</h4>"),n.append("<h5>"+LLMS.l10n.translate("ID")+": <em>"+t.data.id+"</em></h5>"),_.each(t.parents,function(e){n.append("<h5>"+e+"</em></h5>")}),i.append(s).append(n)}})}),s("Views/QuestionType",[],function(){return Backbone.View.extend({className:"llms-question-type",events:{"click .llms-add-question":"add_question"},id:function(){return"llms-question-type-"+this.model.id},tagName:"li",template:wp.template("llms-question-type-template"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model)),this},add_question:function(){this.quiz.add_question({_expanded:!0,choices:this.model.get("default_choices")?this.model.get("default_choices"):null,question_type:this.model}),this.quiz.trigger("new-question-added")}})}),s("Views/QuestionBank",["Views/QuestionType"],function(e){return Backbone.CollectionView.extend({className:"llms-question",el:"#llms-question-bank",modelView:e,selectable:!1,sortable:!1})}),s("Views/QuestionChoice",["Views/_Editable"],function(e){return Backbone.View.extend(_.defaults({className:"llms-question-choice",events:_.defaults({'change input[name="correct"]':"toggle_correct",'click .llms-action-icon[href="#llms-add-choice"]':"add_choice",'click .llms-action-icon[href="#llms-del-choice"]':"del_choice"},e.events),id:function(){return"llms-question-choice-"+this.model.id},tagName:"li",template:wp.template("llms-question-choice-template"),initialize:function(){this.render(),this.listenTo(this.model.collection,"add",this.maybe_disable_buttons),this.listenTo(this.model,"change",this.render),"image"===this.model.get("choice_type")&&this.listenTo(this.model.get("choice"),"change",this.render)},render:function(){return this.$el.html(this.template(this.model)),this},add_choice:function(e){e.stopPropagation(),e.preventDefault();var t=this.model.collection.indexOf(this.model);this.model.collection.parent.add_choice({},{at:t+1})},del_choice:function(e){e.preventDefault(),Backbone.pubSub.trigger("model-trashed",this.model),this.model.collection.remove(this.model)},toggle_correct:function(){var e=this.$el.find('input[name="correct"]').is(":checked");this.model.set("correct",e),this.model.collection.trigger("correct-update",this.model)}},e))}),s("Views/QuestionChoiceList",["Views/QuestionChoice"],function(e){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:e,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,cursor:"move",handle:".llms-choice-id",items:".llms-question-choice",placeholder:"llms-question-choice llms-sortable-placeholder"},sortable_start:function(e){this.$el.addClass("dragging")},sortable_stop:function(e){this.$el.removeClass("dragging")}})}),s("Views/Question",["Views/_Editable","Views/QuestionChoiceList"],function(e,t){return Backbone.View.extend(_.defaults({className:function(){return"llms-question qtype--"+this.model.get("question_type").get("id")},events:_.defaults({"click .clone--question":"clone","click .delete--question":"delete","click .expand--question":"expand","click .collapse--question":"collapse",'change input[name="question_points"]':"update_points"},e.events),id:function(){return"llms-question-"+this.model.id},tagName:"li",template:wp.template("llms-question-template"),initialize:function(){var e=["change:_expanded","change:menu_order"];_.each(e,function(e){this.listenTo(this.model,e,this.render)},this),this.listenTo(this.model.get("image"),"change",this.render),this.listenTo(this.model.get_parent(),"change:_points",this.render_points_percentage),this.on("multi_choices_toggle",this.multi_choices_toggle,this),Backbone.pubSub.on("del-question-choice",this.del_choice,this)},render:function(){if(this.$el.html(this.template(this.model)),this.model.get("question_type").get("choices")&&(this.choiceListView=new t({el:this.$el.find(".llms-question-choices"),collection:this.model.get("choices")}),this.choiceListView.render(),this.choiceListView.on("sortStart",this.choiceListView.sortable_start),this.choiceListView.on("sortStop",this.choiceListView.sortable_stop)),"group"===this.model.get("question_type").get("id")){var e=this;setTimeout(function(){e.questionListView=e.collectionListView.quiz.get_question_list({el:e.$el.find(".llms-quiz-questions"),collection:e.model.get("questions")}),e.questionListView.render(),e.questionListView.on("sortStart",e.questionListView.sortable_start),e.questionListView.on("sortStop",e.questionListView.sortable_stop)},1)}return this.model.get("description_enabled")&&this.init_editor("question-desc--"+this.model.get("id")),this.model.get("clarifications_enabled")&&this.init_editor("question-clarifications--"+this.model.get("id"),{mediaButtons:!1,tinymce:{toolbar1:"bold,italic,strikethrough,bullist,numlist,alignleft,aligncenter,alignright",toolbar2:"",setup:_.bind(this.on_editor_ready,this)}}),this.init_formatting_els(),this.init_selects(),this},render_points_percentage:function(){this.$el.find(".llms-question-points").attr("data-tip",this.model.get_points_percentage())},clone:function(e){e.stopPropagation(),e.preventDefault(),this.model.collection.add(this._get_question_clone(this.model))},_get_question_clone:function(e){var t=_.clone(e.attributes);return delete t.id,t.parent_id=e.get("id"),t.question_type=e.get("question_type").get("id"),t.image=_.clone(e.get("image").attributes),e.get("choices")&&(t.choices=[],e.get("choices").each(function(e){var i=_.clone(e.attributes);delete i.id,delete i.question_id,t.choices.push(i)})),"group"===e.get("question_type").get("id")&&(t.questions=[],e.get("questions").each(function(e){t.questions.push(this._get_question_clone(e))},this)),t},collapse:function(){this.model.set("_expanded",!1)},"delete":function(e){e.preventDefault(),window.confirm(LLMS.l10n.translate("Are you sure you want to delete this question?"))&&(this.model.collection.remove(this.model),Backbone.pubSub.trigger("model-trashed",this.model))},expand:function(){this.model.set("_expanded",!0)},multi_choices_toggle:function(e){"yes"!==e&&this.model.get("choices").update_correct(_.first(this.model.get("choices").get_correct()))},update_points:function(){this.model.set("points",1*this.$el.find('input[name="question_points"]').val())}},e))}),s("Views/QuestionList",["Views/Question"],function(t){return Backbone.CollectionView.extend({className:"llms-quiz-questions",modelView:t,processKeyEvents:!1,selectable:!1,sortable:!0,sortableOptions:{axis:!1,connectWith:".llms-quiz-questions",cursor:"move",handle:".llms-data-stamp",items:".llms-question",placeholder:"llms-question llms-sortable-placeholder"},sortable_start:function(t){var i="group"===t.get("question_type").get("id")?".llms-editor-tab > .llms-quiz-questions":".llms-quiz-questions";e(i).addClass("dragging")},sortable_stop:function(){e(".llms-quiz-questions").removeClass("dragging")},_receive:function(t,i){if(t.stopPropagation(),i.item.hasClass("qtype--group")&&e(t.target).closest(".qtype--group").length)return void i.sender.sortable("cancel");var s=i.sender,n=s.data("view");if(n&&n.collection){var o=this._getContainerEl().children().index(i.item),l=n.collection.get(i.item.attr("data-model-cid"));n.collection.remove(l),this.collection.add(l,{at:o}),l.collection=this.collection,this.setSelectedModel(l)}},_sortStart:function(e,t){var i=this.collection.get(t.item.attr("data-model-cid"));t.placeholder.addClass("qtype--"+i.get("question_type").get("id")),this._isBackboneCourierAvailable()?this.spawn("sortStart",{modelBeingSorted:i}):this.trigger("sortStart",i)},_sortStop:function(e,t){e.stopPropagation();var i=this.collection.get(t.item.attr("data-model-cid")),s=this._getContainerEl(),n=s.children().index(t.item);n==-1&&i&&this.collection.remove(i),this._reorderCollectionBasedOnHTML(),this.updateDependentControls(),this._isBackboneCourierAvailable()?this.spawn("sortStop",{modelBeingSorted:i,newIndex:n}):this.trigger("sortStop",i,n)}})}),s("Views/Quiz",["Models/Quiz","Views/Popover","Views/PostSearch","Views/QuestionBank","Views/QuestionList","Views/SettingsFields","Views/_Detachable","Views/_Editable","Views/_Subview","Views/_Trashable"],function(t,i,s,n,o,l,a,r,c,d){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{"class":l,instance:null,state:"default"},bank:{"class":n,instance:null,state:"default"},list:{"class":o,instance:null,state:"default"}},el:"#llms-editor-quiz",events:_.defaults({"click #llms-existing-quiz":"add_existing_quiz_click","click #llms-new-quiz":"add_new_quiz","click #llms-show-question-bank":"show_tools","click .bulk-toggle":"bulk_toggle"},a.events,r.events,d.events),tagName:"div",template:wp.template("llms-quiz-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("quiz_enabled")&&_.isEmpty(this.lesson.get("quiz"))||(this.model=this.lesson.get("quiz"),this.model.set_parent(this.lesson),this.listenTo(this.model,"change:_points",this.render_points)),this.on("model-trashed",this.on_trashed)},render:function(){if(this.$el.html(this.template(this.model)),this.model){this.render_subview("settings",{el:"#llms-quiz-settings-fields",model:this.model}),this.init_datepickers(),this.init_selects(),this.render_subview("bank",{collection:window.llms_builder.questions});var e=null,t=null;this.get_subview("bank").instance.viewManager.each(function(i){i.quiz=this.model,t=i.model.get("group").name,e!==t&&(e=t,i.$el.before('<li class="llms-question-bank-header"><h4>'+t+"</h4></li>"))},this),this.render_subview("list",{el:"#llms-quiz-questions",collection:this.model.get("questions")});var i=this.get_subview("list").instance;i.quiz=this,i.collection.on("add",function(){i.collection.trigger("reorder")},this),i.on("sortStart",i.sortable_start),i.on("sortStop",i.sortable_stop),this.model.on("new-question-added",function(){var e=this.$el.find("#llms-quiz-questions");e.animate({scrollTop:e.prop("scrollHeight")},200)},this)}return this},render_points:function(e,t){this.$el.find("#llms-quiz-total-points").text(t)},bulk_toggle:function(t){var i="expand"===e(t.target).attr("data-action");this.model.get("questions").each(function(e){e.set("_expanded",i)})},add_new_quiz:function(){var e=this.lesson.get("quiz");_.isEmpty(e)?e=this.lesson.add_quiz():this.lesson.set("quiz_enabled","yes"),this.model=e,this.render()},add_existing_quiz:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?(delete t.id,_.each(t.questions,function(e){delete e.parent_id,delete e.id,e.choices&&_.each(e.choices,function(e){delete e.question_id,delete e.id})})):t._forceSync=!0,delete t.lesson_id,this.lesson.add_quiz(t),this.model=this.lesson.get("quiz"),this.render()},add_existing_quiz_click:function(e){e.preventDefault(),this.post_search_popover=new i({el:"#llms-existing-quiz",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Quiz"),content:new s({post_type:"llms_quiz",searching_message:LLMS.l10n.translate("Search for existing quizzes...")}).render().$el,onHide:function(){Backbone.pubSub.off("quiz-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("quiz-search-select",this.add_existing_quiz,this)},on_trashed:function(e){this.lesson.set("quiz_enabled","no"),this.lesson.set("quiz",""),delete this.model,this.render()},show_tools:function(){var e=new i({el:"#llms-show-question-bank",args:{backdrop:!0,closeable:!0,container:"#llms-builder-sidebar",dismissible:!0,placement:"top-left",width:"calc( 100% - 40px )",title:LLMS.l10n.translate("Add a Question"),url:"#llms-quiz-tools"}});e.show(),this.model.on("new-question-added",function(){e.hide()})},get_question_list:function(e){return new o(e)}},a,r,c,d,l))}),s("Views/Assignment",["Views/Popover","Views/PostSearch","Views/_Detachable","Views/_Editable","Views/_Trashable","Views/_Subview","Views/SettingsFields"],function(e,t,i,s,n,o,l){return Backbone.View.extend(_.defaults({state:"default",views:{settings:{"class":l,instance:null,state:"default"}},el:"#llms-editor-assignment",events:function(){var e=this.is_addon_available()?window.llms_builder.assignments.get_view_events():{};return _.defaults({"click #llms-existing-assignment":"add_existing_assignment_click","click #llms-new-assignment":"add_new_assignment"},i.events,s.events,n.events,e)},tagName:"div",template:wp.template("llms-assignment-template"),initialize:function(e){this.lesson=e.lesson,"yes"!==this.lesson.get("assignment_enabled")&&_.isEmpty(this.lesson.get("assignment"))||(this.model=this.lesson.get("assignment"),this.model.set_parent(this.lesson)),this.on("model-trashed",this.on_trashed)},render:function(){return this.$el.html(this.template(this.model)),this.model&&this.is_addon_available()&&(this.stopListening(this.model,"change:assignment_type",this.render),this.render_subview("settings",{el:"#llms-assignment-settings-fields",model:this.model}),this.init_selects(),window.llms_builder.assignments.render_editor(this),this.listenTo(this.model,"change:assignment_type",this.render)),this},add_new_assignment:function(){this.is_addon_available()?(this.model=window.llms_builder.assignments.get_assignment({title:LLMS.l10n.replace("%1$s Assignment",{"%1$s":this.lesson.get("title")}),lesson_id:this.lesson.get("id")}),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",this.model),this.render()):this.show_ad_popover("#llms-new-assignment")},add_existing_assignment:function(e){this.post_search_popover.hide();var t=e.data;"clone"===e.action?delete t.id:t._forceSync=!0,t.lesson_id=this.lesson.get("id"),t=window.llms_builder.construct.get_model("Assignment",t),this.lesson.set("assignment_enabled","yes"),this.lesson.set("assignment",t),this.model=t,this.render()},add_existing_assignment_click:function(i){i.preventDefault(),this.is_addon_available()?(this.post_search_popover=new e({el:"#llms-existing-assignment",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Assignment"),content:new t({post_type:"llms_assignment",searching_message:LLMS.l10n.translate("Search for existing assignments...")}).render().$el,onHide:function(){Backbone.pubSub.off("assignment-search-select")}}}),this.post_search_popover.show(),Backbone.pubSub.once("assignment-search-select",this.add_existing_assignment,this)):this.show_ad_popover("#llms-existing-assignment")},is_addon_available:function(){return window.llms_builder.assignments},on_trashed:function(e){this.lesson.set("assignment_enabled","no"),this.lesson.set("assignment",""),delete this.model,this.render()},show_ad_popover:function(t){var i=LLMS.l10n.translate("Get Your Students Taking Action"),s="Great learning content is only half of teaching online. When your learners fully engage, they will take your content and move into action. Remove barriers for your learners by telling them what to do to apply what they just learned. Create graded assignments or simply give them a checklist of action items to complete before moving on.",n=LLMS.l10n.translate("Get Assignments Now!"),o="https://lifterlms.com/product/lifterlms-assignments?utm_source=LifterLMS%20Plugin&utm_medium=Assignment%20Builder%20Button&utm_campaign=Assignment%20Addon%20Upsell&utm_content=3.17.0";this.ad_popover=new e({el:t,args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,width:380,title:LLMS.l10n.translate("Unlock LifterLMS Assignments"),content:"<h3>"+i+"</h3><p>"+s+'</p><br><p><a class="llms-button-primary" href="'+o+'" target="_blank">'+n+"</a></p>"}}),this.ad_popover.show()}},i,s,n,o,l))}),s("Views/Editor",["Views/LessonEditor","Views/Quiz","Views/Assignment","Views/_Subview"],function(t,i,s,n){return Backbone.View.extend(_.defaults({state:"lesson",views:{lesson:{"class":t,instance:null,state:"lesson"},assignment:{"class":s,instance:null,state:"assignment"},quiz:{"class":i,instance:null,state:"quiz"}},el:"#llms-editor",events:{'click .llms-editor-nav a[href="#llms-editor-close"]':"close_editor",'click .llms-editor-nav a:not([href="#llms-editor-close"])':"switch_tab"},tagName:"div",template:wp.template("llms-editor-template"),initialize:function(e){this.SidebarView=e.SidebarView,e.tab&&(this.state=e.tab)},render:function(e){return e=e||{},this.$el.html(this.template(this)),this.render_subviews(_.extend(e,{lesson:this.model})),this},close_editor:function(e){e.preventDefault(),Backbone.pubSub.trigger("sidebar-editor-close")},switch_tab:function(t){t.preventDefault();var i=e(t.target),s=i.attr("data-view");this.$el.find(i.attr("href"));this.set_state(s).render()}},n))}),s("Views/Elements",["Models/Section","Views/Section","Models/Lesson","Views/Lesson","Views/Popover","Views/PostSearch"],function(t,i,s,n,o,l){return Backbone.View.extend({el:"#llms-elements",events:{"click #llms-new-section":"add_new_section","click #llms-new-lesson":"add_new_lesson","click #llms-existing-lesson":"add_existing_lesson"},tagName:"div",template:wp.template("llms-elements-template"),initialize:function(e){this.SidebarView=e.SidebarView,this.listenTo(this.SidebarView.CourseView.model.get("sections"),"add",this.maybe_disable_buttons),this.listenTo(this.SidebarView.CourseView.model.get("sections"),"remove",this.maybe_disable_buttons)},render:function(){return this.$el.html(this.template()),this.draggable(),this.maybe_disable_buttons(),this},draggable:function(){e("#llms-new-section").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-sections",helper:function(){
return new i({model:new t}).render().$el},start:function(){e(".llms-sections").addClass("dragging")},stop:function(){e(".llms-sections").removeClass("dragging")}}),e("#llms-new-lesson").draggable({appendTo:"#llms-sections",cancel:!1,connectToSortable:".llms-lessons",helper:function(){return new n({model:new s}).render().$el},start:function(){e(".llms-lessons").addClass("dragging")},stop:function(){e(".llms-lessons").removeClass("dragging"),e(".drag-expanded").removeClass(".drag-expanded")}})},add_new_section:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-section")},add_new_lesson:function(e){e.preventDefault(),Backbone.pubSub.trigger("add-new-lesson")},add_existing_lesson:function(e){e.preventDefault();var t=new o({el:"#llms-existing-lesson",args:{backdrop:!0,closeable:!0,container:".wrap.lifterlms.llms-builder",dismissible:!0,placement:"left",width:480,title:LLMS.l10n.translate("Add Existing Lesson"),content:new l({post_type:"lesson",searching_message:LLMS.l10n.translate("Search for existing lessons...")}).render().$el}});t.show(),Backbone.pubSub.on("lesson-search-select",function(){t.hide()})},maybe_disable_buttons:function(){var t=e("#llms-new-lesson, #llms-existing-lesson");this.SidebarView.CourseView.model.get("sections").length?t.removeAttr("disabled"):t.attr("disabled","disabled")}})}),s("Views/Utilities",[],function(){return Backbone.View.extend({el:"#llms-utilities",events:{"click #llms-collapse-all":"collapse_all","click #llms-expand-all":"expand_all"},tagName:"div",template:wp.template("llms-utilities-template"),initialize:function(){},render:function(){return this.$el.html(this.template()),this},collapse_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("collapse-all")},expand_all:function(e){e.preventDefault(),Backbone.pubSub.trigger("expand-all")}})}),s("Views/Sidebar",["Views/Editor","Views/Elements","Views/Utilities","Views/_Subview"],function(t,i,s,n){return Backbone.View.extend(_.defaults({state:"builder",views:{elements:{"class":i,instance:null,state:"builder"},utilities:{"class":s,instance:null,state:"builder"},editor:{"class":t,instance:null,state:"editor"}},el:"#llms-builder-sidebar",events:{"click #llms-save-button":"save_now","click #llms-exit-button":"exit_now","click .llms-builder-error":"clear_errors"},tagName:"aside",template:wp.template("llms-sidebar-template"),initialize:function(t){this.CourseView=t.CourseView,this.render(),Backbone.pubSub.on("current-save-status",this.changes_made,this),Backbone.pubSub.on("heartbeat-send",this.heartbeat_send,this),Backbone.pubSub.on("heartbeat-tick",this.heartbeat_tick,this),Backbone.pubSub.on("lesson-selected",this.on_lesson_select,this),Backbone.pubSub.on("sidebar-editor-close",this.on_editor_close,this),this.$saveButton=e("#llms-save-button")},render:function(t){t=t||{},this.$el.html(this.template()),this.render_subviews(_.extend(t,{SidebarView:this}));var i=e(".wrap.lifterlms.llms-builder");return"builder"===this.state?i.removeClass("editor-active"):i.addClass("editor-active"),this.$saveButton=this.$el.find("#llms-save-button"),this},add_error:function(e){this.$el.find(".llms-builder-save").prepend(e)},clear_errors:function(){this.$el.find(".llms-builder-save .llms-builder-error").remove()},changes_made:function(e){e.saving||(e.has_unsaved_changes?(this.$saveButton.attr("data-status","unsaved"),this.$saveButton.removeAttr("disabled")):(this.$saveButton.attr("data-status","saved"),this.$saveButton.attr("disabled","disabled")))},exit_now:function(){window.location.href=window.llms_builder.CourseModel.get_edit_post_link()},heartbeat_send:function(e){e.saving&&(LLMS.Spinner.start(this.$saveButton.find("i"),"small"),this.$saveButton.attr({"data-status":"saving",disabled:"disabled"}))},heartbeat_tick:function(t,i){if(!t.saving){var s="saved";if(this.clear_errors(),"error"===i.status){s="error";var n=i.message,o=e('<ol class="llms-builder-error" />');"object"==typeof n?_.each(n,function(e){o.append("<li>"+e+"</li>")}):o=o.append("<li>"+n+"</li>"),this.add_error(o)}this.$saveButton.find(".llms-spinning").remove(),this.$saveButton.attr({"data-status":s,disabled:"disabled"})}},is_editor_active:function(){return"editor"===this.state},on_editor_close:function(){this.set_state("builder").render()},on_lesson_select:function(e,t){"editor"!==this.state?this.set_state("editor"):this.remove_subview("editor"),this.render({model:e,tab:t})},save_now:function(){window.llms_builder.sync.save_now()}},n))}),i(["vendor/backbone.collectionView","vendor/backbone.trackit","Controllers/Construct","Controllers/Debug","Controllers/Schemas","Controllers/Sync","Models/loader","Views/Course","Views/Sidebar"],function(t,i,s,n,o,l,a,r,c){function d(e,t){return _.isArray(t)&&-1!==t.indexOf(e)||e==t}window.llms_builder.debug=new n(window.llms_builder.debug),window.llms_builder.construct=new s,window.llms_builder.schemas=new o(window.llms_builder.schemas),_.mixin({checked:function(e,t){return d(e,t)?' checked="checked"':""},deepClone:function(e){var t=_.clone(e);return _.each(t,function(e,i){!_.isFunction(e)&&_.isObject(e)&&(t[i]=_.deepClone(e))}),t},selected:function(e,t){return d(e,t)?' selected="selected"':""},stripFormatting:function(t,i){i||(i=["b","i","u","strong","em"]);var s=e("<div>"+t+"</div>");return s.find("*").not(i.join(",")).each(function(){e(this).replaceWith(this.innerHTML)}),s.html()}}),Backbone.pubSub=_.extend({},Backbone.Events),e(document).trigger("llms-builder-pre-init"),window.llms_builder.questions=window.llms_builder.construct.get_collection("QuestionTypes",window.llms_builder.questions);var u=window.llms_builder.construct.get_model("Course",window.llms_builder.course);window.llms_builder.CourseModel=u,window.llms_builder.sync=new l(u,window.llms_builder.sync);var h=new r({model:u}),p=new c({CourseView:h});e(document).trigger("llms-builder-init",{course:h,sidebar:p})}),s("main",function(){})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
