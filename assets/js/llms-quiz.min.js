!function(t){var e={$buttons:null,$container:null,$ui:null,attempt_key:null,current_question:0,total_questions:0,questions:{},validators:{},status:null,bind:function(){var e=this;t("#llms_start_quiz").on("click",function(t){t.preventDefault(),e.start_quiz()}),t(".llms-donut").each(function(){LLMS.Donut(t(this))}),t("#llms-quiz-attempt-select").on("change",function(){var e=t(this).val();e&&(window.location.href=e)}),t(window).on("beforeunload",function(){if(e.status)return LLMS.l10n.translate("Are you sure you wish to quit this quiz attempt?")}),t(window).on("unload",function(){e.status&&e.complete_quiz()}),t(document).on("llms-post-append-question",e.post_append_question),this.register_validator("content",this.validate),this.register_validator("choice",this.validate_choice),this.register_validator("picture_choice",this.validate_choice),this.register_validator("true_false",this.validate_choice)},add_error:function(e){var s=this;s.$container.find(".llms-error").remove();var i=t('<p class="llms-error">'+e+'<a href="#"><i class="fa fa-times-circle" aria-hidden="true"></i></a></p>');i.on("click","a",function(t){t.preventDefault(),i.fadeOut("200"),setTimeout(function(){i.remove()},210)}),s.$container.append(i)},answer_question:function(t){var e,s=this,i=this.$container.find(".llms-question-wrapper"),n=i.attr("data-type");return this.validators[n]?(e=this.validators[n](i),e&&!0===e.valid&&e.answer?void LLMS.Ajax.call({data:{action:"quiz_answer_question",answer:e.answer,attempt_key:s.attempt_key,question_id:i.attr("data-id"),question_type:i.attr("data-type")},beforeSend:function(){var e=t.hasClass("llms-button-quiz-complete")?LLMS.l10n.translate("Grading Quiz..."):LLMS.l10n.translate("Loading Question...");s.toggle_loader("show",e),s.update_progress_bar("increment")},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.html)t.data.question_id&&s.questions["q-"+t.data.question_id]?s.load_question(s.questions["q-"+t.data.question_id]):s.load_question(t.data.html);else if(t.data&&t.data.redirect)s.redirect(t.data.redirect);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}}):s.add_error(e.valid)):void console.log("No validator registered for question type "+n)},complete_quiz:function(){var t=this;LLMS.Ajax.call({data:{action:"quiz_end",attempt_key:t.attempt_key},beforeSend:function(){t.toggle_loader("show","Grading Quiz...")},success:function(e){if(t.toggle_loader("hide"),e.data&&e.data.redirect)t.redirect(e.data.redirect);else if(e.message)t.$container.append("<p>"+e.message+"</p>");else{var s=LLMS.l10n.translate("An unknown error occurred. Please try again.");t.$container.append("<p>"+s+"</p>")}}})},get_question_index:function(t){return Object.keys(this.questions).indexOf("q-"+t)},redirect:function(t){this.toggle_loader("show","Grading Quiz..."),this.status=null,window.location.href=t},previous_question:function(){var t=this;t.toggle_loader("show",LLMS.l10n.translate("Loading Question...")),t.update_progress_bar("decrement");var e=Object.keys(t.questions),s=e.indexOf("q-"+t.current_question),i=e[0];s>=1&&(i=e[s-1]),setTimeout(function(){t.toggle_loader("hide"),t.load_question(t.questions[i])},100)},register_validator:function(t,e){this.validators[t]=e},start_quiz:function(){var e=this;this.load_ui_elements(),this.$ui=t("#llms-quiz-ui"),this.$buttons=t("#llms-quiz-nav button"),this.$container=t("#llms-quiz-question-wrapper"),t("#llms-next-question, #llms-complete-quiz").on("click",function(s){s.preventDefault(),e.answer_question(t(this))}),t("#llms-prev-question").on("click",function(t){t.preventDefault(),e.previous_question()}),LLMS.Ajax.call({data:{action:"quiz_start",attempt_key:t("#llms-attempt-key").val(),lesson_id:t("#llms-lesson-id").val(),quiz_id:t("#llms-quiz-id").val()},beforeSend:function(){e.status=!0,t("#llms-quiz-wrapper, #quiz-start-button").remove(),t("html, body").stop().animate({scrollTop:0},500),e.toggle_loader("show",LLMS.l10n.translate("Loading Quiz..."))},error:function(t,e,s){console.log(t,e,s)},success:function(t){if(e.toggle_loader("hide"),t.data&&t.data.html)t.data.time_limit&&e.start_quiz_timer(t.data.time_limit),e.attempt_key=t.data.attempt_key,e.total_questions=t.data.total,e.load_question(t.data.html);else if(t.message)e.$container.append("<p>"+t.message+"</p>");else{var s=LLMS.l10n.translate("An unknown error occurred. Please try again.");e.$container.append("<p>"+s+"</p>")}}})},start_quiz_timer:function(e){var s=t('<div class="llms-quiz-timer" id="llms-quiz-timer" />'),i=LLMS.l10n.translate("Time Remaining");s.append('<i class="fa fa-clock-o" aria-hidden="true"></i><span class="screen-reader-text">'+i+"</span>"),s.append('<div id="llms-tiles" class="llms-tiles"></div>'),t("#llms-quiz-header").append(s);var n,a,l,o,r=this,u=(new Date).getTime()+60*e*1e3,d=60*e*1e3,c=document.getElementById("llms-tiles");setTimeout(function(){r.complete_quiz()},d+1e3),this.getCountdown(e,u,d,n,a,l,o,c),setInterval(function(){r.getCountdown(e,u,d,n,a,l,o,c)},1e3)},trigger:function(e){var s=this;"answer_question"===e&&(this.get_question_index(s.current_question)===s.total_questions?t("#llms-complete-quiz").trigger("click"):t("#llms-next-question").trigger("click"))},load_question:function(e){var s=t(e),i=s.attr("data-id");this.questions["q-"+i]||(this.questions["q-"+i]=s),this.update_progress(i),this.current_question=i,t(document).trigger("llms-pre-append-question",s),this.$container.append(s),t(document).trigger("llms-post-append-question",s)},load_ui_elements:function(){var e=t('<div class="llms-quiz-ui" id="llms-quiz-ui" />'),s=t('<header class="llms-quiz-header" id="llms-quiz-header" />');$footer=t('<footer class="llms-quiz-nav" id="llms-quiz-nav" />'),$footer.append('<button class="button large llms-button-action" id="llms-next-question" name="llms_next_question" type="submit">'+LLMS.l10n.translate("Next Question")+"</button>"),$footer.append('<button class="button large llms-button-action llms-button-quiz-complete" id="llms-complete-quiz" name="llms_complete_quiz" type="submit" style="display:none;">'+LLMS.l10n.translate("Complete Quiz")+"</button>"),$footer.append('<button class="button llms-button-secondary" id="llms-prev-question" name="llms_prev_question" type="submit" style="display:none;">'+LLMS.l10n.translate("Previous Question")+"</button>"),s.append('<div class="llms-progress"><div class="progress-bar-complete"></div></div>'),$footer.append('<div class="llms-quiz-counter" id="llms-quiz-counter"><span class="llms-current"></span><span class="llms-sep">/</span><span class="llms-total"></span></div>'),e.append(s).append('<div class="llms-quiz-question-wrapper" id="llms-quiz-question-wrapper" />').append($footer),t("#llms-quiz-wrapper").after(e)},post_append_question:function(e,s){var i=t(s);i.find("audio").length&&wp.mediaelement.initialize()},toggle_loader:function(t,e){"show"===t?(e=e||LLMS.l10n.translate("Loading..."),this.$buttons.attr("disabled","disabled"),this.$container.empty(),LLMS.Spinner.start(this.$container),this.$container.append('<div class="llms-quiz-loading">'+LLMS.l10n.translate(e)+"</div>")):(LLMS.Spinner.stop(this.$container),this.$buttons.removeAttr("disabled"),this.$container.find(".llms-quiz-loading").remove())},update_progress:function(e){var s=this.get_question_index(e);-1!==s&&(s++,t("#llms-quiz-counter .llms-current").text(s),1===s&&(t("#llms-quiz-counter .llms-total").text(this.total_questions),t("#llms-quiz-counter").show()),s>=2?t("#llms-prev-question").show():t("#llms-prev-question").hide(),s===this.total_questions?(t("#llms-next-question").hide(),t("#llms-complete-quiz").show()):(t("#llms-next-question").show(),t("#llms-complete-quiz").hide()))},update_progress_bar:function(t){var e=this.get_question_index(this.current_question);"increment"===t?e++:e--,progress=e/this.total_questions*100,this.$ui.find(".progress-bar-complete").css("width",progress+"%")},getCountdown:function(e,s,i,n,a,l,o,r){var u=(new Date).getTime(),d=(s-u)/1e3;d>=0&&(1e3*d<i/2&&t("#llms-quiz-timer").addClass("color-half"),1e3*d<i/4&&(t("#llms-quiz-timer").removeClass("color-half"),t("#llms-quiz-timer").addClass("color-empty")),n=this.pad(parseInt(d/86400)),d%=86400,a=this.pad(parseInt(d/3600)),d%=3600,l=this.pad(parseInt(d/60)),o=this.pad(parseInt(d%60)),r.innerHTML='<span class="hours">'+a+'</span>:<span class="minutes">'+l+'</span>:<span class="seconds">'+o+"</span>")},pad:function(t){return(t<10?"0":"")+t},validate:function(t){return{answer:[],valid:!0}},validate_choice:function(e){var s=window.llms.quizzes.validate(e),i=e.find("input:checked");return i.length?i.each(function(){s.answer.push(t(this).val())}):s.valid=LLMS.l10n.translate("You must select an answer to continue."),s}};e.bind(),window.llms=window.llms||{},window.llms.quizzes=e}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
