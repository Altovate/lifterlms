!function(c){var t={$buttons:null,$container:null,$ui:null,attempt_key:null,current_question:0,total_questions:0,questions:{},validators:{},status:null,bind:function(){var e=this;c("#llms_start_quiz").on("click",function(t){t.preventDefault(),e.start_quiz()}),c(".llms-donut").each(function(){LLMS.Donut(c(this))}),c("#llms-quiz-attempt-select").on("change",function(){var t=c(this).val();t&&(window.location.href=t)}),c(window).on("beforeunload",function(){if(e.status)return LLMS.l10n.translate("Are you sure you wish to quit this quiz attempt?")}),c(window).on("unload",function(){e.status&&e.complete_quiz()}),c(document).on("llms-post-append-question",e.post_append_question),this.register_validator("content",this.validate),this.register_validator("choice",this.validate_choice),this.register_validator("picture_choice",this.validate_choice),this.register_validator("true_false",this.validate_choice)},add_error:function(t){this.$container.find(".llms-error").remove();var e=c('<p class="llms-error">'+t+'<a href="#"><i class="fa fa-times-circle" aria-hidden="true"></i></a></p>');e.on("click","a",function(t){t.preventDefault(),e.fadeOut("200"),setTimeout(function(){e.remove()},210)}),this.$container.append(e)},answer_question:function(e){var t,s=this,i=this.$container.find(".llms-question-wrapper"),n=i.attr("data-type");if(this.validators[n]){if(!(t=this.validators[n](i))||!0!==t.valid||!t.answer)return s.add_error(t.valid);LLMS.Ajax.call({data:{action:"quiz_answer_question",answer:t.answer,attempt_key:s.attempt_key,question_id:i.attr("data-id"),question_type:i.attr("data-type")},beforeSend:function(){var t=e.hasClass("llms-button-quiz-complete")?LLMS.l10n.translate("Grading Quiz..."):LLMS.l10n.translate("Loading Question...");s.toggle_loader("show",t),s.update_progress_bar("increment")},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.html)t.data.question_id&&s.questions["q-"+t.data.question_id]?s.load_question(s.questions["q-"+t.data.question_id]):s.load_question(t.data.html);else if(t.data&&t.data.redirect)s.redirect(t.data.redirect);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}})}else console.log("No validator registered for question type "+n)},complete_quiz:function(){var s=this;LLMS.Ajax.call({data:{action:"quiz_end",attempt_key:s.attempt_key},beforeSend:function(){s.toggle_loader("show","Grading Quiz...")},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.redirect)s.redirect(t.data.redirect);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}})},get_question_index:function(t){return Object.keys(this.questions).indexOf("q-"+t)},redirect:function(t){this.toggle_loader("show","Grading Quiz..."),this.status=null,window.location.href=t},previous_question:function(){var t=this;t.toggle_loader("show",LLMS.l10n.translate("Loading Question...")),t.update_progress_bar("decrement");var e=Object.keys(t.questions),s=e.indexOf("q-"+t.current_question),i=e[0];1<=s&&(i=e[s-1]),setTimeout(function(){t.toggle_loader("hide"),t.load_question(t.questions[i])},100)},register_validator:function(t,e){this.validators[t]=e},start_quiz:function(){var s=this;this.load_ui_elements(),this.$ui=c("#llms-quiz-ui"),this.$buttons=c("#llms-quiz-nav button"),this.$container=c("#llms-quiz-question-wrapper"),c("#llms-next-question, #llms-complete-quiz").on("click",function(t){t.preventDefault(),s.answer_question(c(this))}),c("#llms-prev-question").on("click",function(t){t.preventDefault(),s.previous_question()}),LLMS.Ajax.call({data:{action:"quiz_start",attempt_key:c("#llms-attempt-key").val(),lesson_id:c("#llms-lesson-id").val(),quiz_id:c("#llms-quiz-id").val()},beforeSend:function(){s.status=!0,c("#llms-quiz-wrapper, #quiz-start-button").remove(),c("html, body").stop().animate({scrollTop:0},500),s.toggle_loader("show",LLMS.l10n.translate("Loading Quiz..."))},error:function(t,e,s){console.log(t,e,s)},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.html)t.data.time_limit&&s.start_quiz_timer(t.data.time_limit),s.attempt_key=t.data.attempt_key,s.total_questions=t.data.total,s.load_question(t.data.html);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}})},start_quiz_timer:function(t){var e=c('<div class="llms-quiz-timer" id="llms-quiz-timer" />'),s=LLMS.l10n.translate("Time Remaining");e.append('<i class="fa fa-clock-o" aria-hidden="true"></i><span class="screen-reader-text">'+s+"</span>"),e.append('<div id="llms-tiles" class="llms-tiles"></div>'),c("#llms-quiz-header").append(e);var i,n,a,l,o=this,r=(new Date).getTime()+60*t*1e3,u=60*t*1e3,d=document.getElementById("llms-tiles");setTimeout(function(){o.complete_quiz()},u+1e3),this.getCountdown(t,r,u,i,n,a,l,d),setInterval(function(){o.getCountdown(t,r,u,i,n,a,l,d)},1e3)},trigger:function(t){"answer_question"===t&&(this.get_question_index(this.current_question)===this.total_questions?c("#llms-complete-quiz").trigger("click"):c("#llms-next-question").trigger("click"))},load_question:function(t){var e=c(t),s=e.attr("data-id");this.questions["q-"+s]||(this.questions["q-"+s]=e),this.update_progress(s),this.current_question=s,c(document).trigger("llms-pre-append-question",e),this.$container.append(e),c(document).trigger("llms-post-append-question",e)},load_ui_elements:function(){var t=c('<div class="llms-quiz-ui" id="llms-quiz-ui" />'),e=c('<header class="llms-quiz-header" id="llms-quiz-header" />');$footer=c('<footer class="llms-quiz-nav" id="llms-quiz-nav" />'),$footer.append('<button class="button large llms-button-action" id="llms-next-question" name="llms_next_question" type="submit">'+LLMS.l10n.translate("Next Question")+"</button>"),$footer.append('<button class="button large llms-button-action llms-button-quiz-complete" id="llms-complete-quiz" name="llms_complete_quiz" type="submit" style="display:none;">'+LLMS.l10n.translate("Complete Quiz")+"</button>"),$footer.append('<button class="button llms-button-secondary" id="llms-prev-question" name="llms_prev_question" type="submit" style="display:none;">'+LLMS.l10n.translate("Previous Question")+"</button>"),e.append('<div class="llms-progress"><div class="progress-bar-complete"></div></div>'),$footer.append('<div class="llms-quiz-counter" id="llms-quiz-counter"><span class="llms-current"></span><span class="llms-sep">/</span><span class="llms-total"></span></div>'),t.append(e).append('<div class="llms-quiz-question-wrapper" id="llms-quiz-question-wrapper" />').append($footer),c("#llms-quiz-wrapper").after(t)},post_append_question:function(t,e){c(e).find("audio").length&&wp.mediaelement.initialize()},toggle_loader:function(t,e){"show"===t?(e=e||LLMS.l10n.translate("Loading..."),this.$buttons.attr("disabled","disabled"),this.$container.empty(),LLMS.Spinner.start(this.$container),this.$container.append('<div class="llms-quiz-loading">'+LLMS.l10n.translate(e)+"</div>")):(LLMS.Spinner.stop(this.$container),this.$buttons.removeAttr("disabled"),this.$container.find(".llms-quiz-loading").remove())},update_progress:function(t){var e=this.get_question_index(t);-1!==e&&(e++,c("#llms-quiz-counter .llms-current").text(e),1===e&&(c("#llms-quiz-counter .llms-total").text(this.total_questions),c("#llms-quiz-counter").show()),2<=e?c("#llms-prev-question").show():c("#llms-prev-question").hide(),e===this.total_questions?(c("#llms-next-question").hide(),c("#llms-complete-quiz").show()):(c("#llms-next-question").show(),c("#llms-complete-quiz").hide()))},update_progress_bar:function(t){var e=this.get_question_index(this.current_question);"increment"===t?e++:e--,progress=e/this.total_questions*100,this.$ui.find(".progress-bar-complete").css("width",progress+"%")},getCountdown:function(t,e,s,i,n,a,l,o){var r=(e-(new Date).getTime())/1e3;0<=r&&(1e3*r<s/2&&c("#llms-quiz-timer").addClass("color-half"),1e3*r<s/4&&(c("#llms-quiz-timer").removeClass("color-half"),c("#llms-quiz-timer").addClass("color-empty")),this.pad(parseInt(r/86400)),r%=86400,n=this.pad(parseInt(r/3600)),r%=3600,a=this.pad(parseInt(r/60)),l=this.pad(parseInt(r%60)),o.innerHTML='<span class="hours">'+n+'</span>:<span class="minutes">'+a+'</span>:<span class="seconds">'+l+"</span>")},pad:function(t){return(t<10?"0":"")+t},validate:function(t){return{answer:[],valid:!0}},validate_choice:function(t){var e=window.llms.quizzes.validate(t),s=t.find("input:checked");return s.length?s.each(function(){e.answer.push(c(this).val())}):e.valid=LLMS.l10n.translate("You must select an answer to continue."),e}};t.bind(),window.llms=window.llms||{},window.llms.quizzes=t}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
