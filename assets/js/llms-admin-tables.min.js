!function(i,t){window.llms=window.llms||{};window.llms.admin_tables=new function(){this.$tables=null,this.init=function(){var t=this;t.$tables=i(".llms-gb-table"),t.$tables.length&&t.bind()},this.bind=function(){var r=this;this.$tables.each(function(){var a,s,n,e=i(this);e.on("click",'button[name="llms-table-paging"]',function(t){t.preventDefault(),r.change_page(e,i(this))}),e.on("click",'button[name="llms-table-export"]',function(t){t.preventDefault(),r.export(e,i(this))}),e.on("click","a.llms-sortable",function(t){t.preventDefault(),r.change_order(e,i(this))}),e.parent().find(".llms-table-filters").on("change","select.llms-table-filter",function(t){r.change_filter(e,i(this))}),e.parent().find(".llms-table-search").on("keyup","input",(a=function(t){switch(t.keyCode){case 37:case 38:case 39:case 40:return;default:r.search(e,i(this))}},s=250,n=null,function(){var t=this,e=arguments;window.clearTimeout(n),n=window.setTimeout(function(){a.apply(t,e)},s)}))})},this.change_order=function(t,e){this.reload(t,{order:e.attr("data-order"),orderby:e.attr("data-orderby"),page:1})},this.change_filter=function(t,e){this.reload(t,{filter:e.val(),filterby:e.attr("name"),page:1})},this.change_page=function(t,e){this.reload(t,{order:this.get_args(t,"order"),orderby:this.get_args(t,"orderby"),page:e.attr("data-page")})},this.export=function(e,a,t){var s=this,n=e.find(".llms-table-export .llms-table-export-msg"),r=e.find(".llms-table-export .llms-table-progress");function l(){LLMS.Spinner.stop(a,"small"),a.removeAttr("disabled")}LLMS.Ajax.call({data:i.extend({action:"export_admin_table",handler:e.attr("data-handler"),file_path:t},JSON.parse(e.attr("data-args"))),beforeSend:function(){a.attr("disabled")||(a.attr("disabled","disabled"),LLMS.Spinner.start(a,"small"))},error:function(t,e,a){var s=LLMS.l10n.translate("An error was encountered generating the export");l(),r.hide(),n.html('<span class="llms-error">'+s+": "+a+"</span>"),console.error(t)},success:function(t){!t.success&&t.message?(l(),r.hide(),n.html('<span class="llms-error">'+t.message+"</span>")):t.success&&t.data&&t.data.progress&&(n.html(""),r.is("visible")||100===t.data.progress||r.css("display","inline-block"),r.find(".llms-table-progress-text").text(t.data.progress+"%"),r.find(".llms-table-progress-inner").css("width",t.data.progress+"%"),100!==t.data.progress?s.export(e,a,t.data.path):(window.location=t.data.url,setTimeout(function(){l(),r.hide()},1500)))}})},this.get_args=function(t,e){var a=JSON.parse(t.attr("data-args"));return e?!!a[e]&&a[e]:a},this.reload=function(e,t){t=i.extend({action:"get_admin_table_data",handler:e.attr("data-handler")},JSON.parse(e.attr("data-args")),t),LLMS.Ajax.call({data:t,beforeSend:function(){LLMS.Spinner.start(e.closest(".llms-table-wrap"))},success:function(t){LLMS.Spinner.stop(e.closest(".llms-table-wrap")),t.success&&(e.attr("data-args",t.data.args),e.find("thead").replaceWith(t.data.thead),e.find("tbody").replaceWith(t.data.tbody),e.find("tfoot").replaceWith(t.data.tfoot))}})},this.search=function(t,e){var a=e.val();len=a.length,(0===len||3<=len)&&this.reload(t,{page:1,search:e.val()})},this.init()}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
