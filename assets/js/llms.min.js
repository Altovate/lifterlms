var LLMS=window.LLMS||{};!function(a){"use strict";LLMS.Achievements={init:function(){var t=this;a(".llms-achievement")&&a(document).on("ready",function(){t.bind(),t.maybe_open()})},bind:function(){var i=this;a(".llms-achievement").each(function(){i.create_modal(a(this))}),a(".llms-achievement").on("click",function(){var t=a(this),e="achievement-"+t.attr("data-id"),n=a("#"+e);n.length||i.create_modal(t),n.iziModal("open")})},create_modal:function(e){var t="achievement-"+e.attr("data-id"),n=a("#"+t);n.length||(n=a('<div class="llms-achievement-modal" id="'+t+'" />'),a("body").append(n)),n.iziModal({headerColor:"#3a3a3a",group:"achievements",history:!0,loop:!0,overlayColor:"rgba( 0, 0, 0, 0.6 )",transitionIn:"fadeInDown",transitionOut:"fadeOutDown",width:340,onOpening:function(t){t.setTitle(e.find(".llms-achievement-title").html()),t.setSubtitle(e.find(".llms-achievement-date").html()),t.setContent('<div class="llms-achievement">'+e.html()+"</div>")},onClosing:function(){window.history.pushState("",document.title,window.location.pathname+window.location.search)}})},maybe_open:function(){var t=window.location.hash;t&&-1!==t.indexOf("achievement-")&&a('a[href="'+t+'"]').first().trigger("click")}},LLMS.Ajax={url:window.ajaxurl||window.llms.ajaxurl,type:"post",data:[],cache:!1,dataType:"json",async:!0,response:[],init:function(t){if(null===t||"object"!=typeof t)return!1;t.url="url"in t?t.url:this.url,t.type="type"in t?t.type:this.type,t.data="data"in t?t.data:this.data,t.cache="cache"in t?t.cache:this.cache,t.dataType="dataType"in t?t.dataType:this.dataType,t.async="async"in t?t.async:this.async,t.data._ajax_nonce=wp_ajax_data.nonce;var e=LLMS.Rest.get_query_vars();return t.data.post_id="post"in e?e.post:null,!t.data.post_id&&a("input#post_ID").length&&(t.data.post_id=a("input#post_ID").val()),t},call:function(t){var e=this.init(t);return!!e&&(this.request(e),this)},request:function(t){return a.ajax(t),this}},LLMS.Donut=function(t){function e(t){this.settings=a.extend({element:t.element,percent:100},t),this.circle=this.settings.element.find("path"),this.settings.stroke_width=parseInt(this.circle.css("stroke-width")),this.radius=(parseInt(this.settings.element.css("width"))-this.settings.stroke_width)/2,this.angle=-97.5,this.i=Math.round(.75*this.settings.percent),this.first=!0,this.animate=function(){this.timer=setInterval(this.loop.bind(this),10)},this.loop=function(){this.angle+=5,this.angle%=360;var t,e=this.angle/180*Math.PI,n=this.radius+this.settings.stroke_width/2+Math.cos(e)*this.radius,i=this.radius+this.settings.stroke_width/2+Math.sin(e)*this.radius;!0===this.first?(t=this.circle.attr("d")+" M "+n+" "+i,this.first=!1):t=this.circle.attr("d")+" L "+n+" "+i,this.circle.attr("d",t),this.i--,this.i<=0&&clearInterval(this.timer)}}var n;(n=t).append('<svg preserveAspectRatio="xMidYMid" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M100,100" /></svg>'),new e({element:n,percent:n.attr("data-perc")}).animate()},LLMS.Instructors={init:function(){var t=this;a("body").hasClass("wp-admin")||a(".llms-instructors").length&&LLMS.wait_for_matchHeight(function(){t.bind()})},bind:function(){a(".llms-instructors .llms-author").matchHeight()}},LLMS.l10n=LLMS.l10n||{},LLMS.l10n.translate=function(t){return this.strings[t]?this.strings[t]:t},LLMS.l10n.replace=function(t,e){var n=this.translate(t);return a.each(e,function(t,e){-1!==t.indexOf("s")?e=e.toString():-1!==t.indexOf("d")&&(e=+e),n=n.replace(t,e)}),n},LLMS.LessonPreview={$els:null,init:function(){var t=this;this.$locked=a('a[href="#llms-lesson-locked"]'),this.$locked.length&&t.bind(),a(".llms-course-navigation").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},bind:function(){var n=this;this.$locked.on("click",function(){return!1}),this.$locked.on("mouseenter",function(){var t=a(this).find(".llms-tooltip");if(!t.length){var e=a(this).attr("data-tooltip-msg");e=e||LLMS.l10n.translate("You do not have permission to access this content"),t=n.get_tooltip(e),a(this).append(t)}setTimeout(function(){t.addClass("show")},10)}),this.$locked.on("mouseleave",function(){a(this).find(".llms-tooltip").removeClass("show")})},match_height:function(){a(".llms-course-navigation .llms-lesson-link").matchHeight()},get_tooltip:function(t){var e=a('<div class="llms-tooltip" />');return e.append('<div class="llms-tooltip-content">'+t+"</div>"),e}},LLMS.Loops={init:function(){var t=this;a(".llms-loop").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},match_height:function(){a(".llms-loop-item .llms-loop-item-content").matchHeight(),a(".llms-achievement-loop-item .llms-achievement").matchHeight(),a(".llms-certificate-loop-item .llms-certificate").matchHeight()}},LLMS.OutlineCollapse={$outlines:null,init:function(){this.$outlines=a(".llms-widget-syllabus--collapsible"),this.$outlines.length&&this.bind()},bind:function(){var i=this;this.$outlines.each(function(){var t=a(this),e=t.find(".llms-section .section-header");e.on("click",function(t){t.preventDefault();var e=a(this).closest(".llms-section");switch(i.get_section_state(e)){case"closed":i.open_section(e);break;case"opened":i.close_section(e)}}),t.find(".llms-collapse-toggle").on("click",function(t){t.preventDefault();var n="close"===a(this).attr("data-action")?"opened":"closed";e.each(function(){var t=a(this).closest(".llms-section"),e=i.get_section_state(t);if(n!==e)return!0;switch(e){case"closed":i.close_section(t);break;case"opened":i.open_section(t)}a(this).trigger("click")})})})},close_section:function(t){t.removeClass("llms-section--opened").addClass("llms-section--closed")},open_section:function(t){t.removeClass("llms-section--closed").addClass("llms-section--opened")},get_section_state:function(t){return t.hasClass("llms-section--opened")?"opened":"closed"}},a.extend(LLMS.PasswordStrength,{$pass:a(".llms-password"),$conf:a(".llms-password-confirm"),$meter:a(".llms-password-strength-meter"),$form:null,init:function(){if(!a("body").hasClass("wp-admin")&&this.$meter.length){this.$form=this.$pass.closest("form");var t,e=this,n=0;t=setInterval(function(){if(300<=n)console.log("cannot do password strength meter.");else{if("undefined"==typeof wp&&void 0===wp.passwordStrength)return void n++;e.bind(),e.$form.trigger("llms-password-strength-ready")}clearInterval(t)},100)}},bind:function(){var t=this;this.$form.hasClass("llms-checkout")||this.$form.on("submit",t,t.submit),t.$pass.add(t.$conf).on("keyup",function(){t.check_strength()})},check_strength:function(){var t=this.$pass.closest(".llms-form-field"),e=this.$conf.closest(".llms-form-field"),n=this.$pass.val().length,i=this.$conf.val().length;if(!n&&!i)return t.removeClass("valid invalid"),e.removeClass("valid invalid"),void this.$meter.hide();this.get_current_strength_status()?(t.removeClass("invalid").addClass("valid"),i&&e.removeClass("invalid").addClass("valid")):(t.removeClass("valid").addClass("invalid"),i&&e.removeClass("valid").addClass("invalid")),this.$meter.removeClass("too-short very-weak weak medium strong mismatch"),this.$meter.show().addClass(this.get_current_strength("slug")),this.$meter.html(this.get_current_strength("text"))},checkout:function(t,e){t.get_current_strength_status()?e(!0):e(LLMS.l10n.translate("There is an issue with your chosen password."))},get_blacklist:function(){return wp.passwordStrength.userInputBlacklist()},get_current_strength:function(t){t=t||"int";var e,n=this.$pass.val(),i=this.$conf.val();return n.length<6?e=-1:0===(e=wp.passwordStrength.meter(n,this.get_blacklist(),i))&&(e=1),"slug"===t?this.get_strength_slug(e):"text"===t?this.get_strength_text(e):e},get_current_strength_status:function(){var t=this.get_current_strength(),e=this.get_strength_value(this.get_minimum_strength());return 5!==t&&e<=t},get_strength_slug:function(t){var e={"-1":"too-short",1:"very-weak",2:"weak",3:"medium",4:"strong",5:"mismatch"};return e[t]?e[t]:e[5]},get_strength_text:function(t){var e={"-1":LLMS.l10n.translate("Too Short"),1:LLMS.l10n.translate("Very Weak"),2:LLMS.l10n.translate("Weak"),3:LLMS.l10n.translate("Medium"),4:LLMS.l10n.translate("Strong"),5:LLMS.l10n.translate("Mismatch")};return e[t]?e[t]:e[5]},get_strength_value:function(t){var e={"too-short":-1,"very-weak":1,weak:2,medium:3,strong:4,mismatch:5};return e[t]?e[t]:e.mismatch},submit:function(t){var e=t.data;t.preventDefault(),e.$pass.trigger("keyup"),e.get_current_strength_status()?(e.$form.off("submit",e.submit),e.$form.trigger("submit")):(a("html, body").animate({scrollTop:e.$meter.offset().top-100},200),e.$meter.hide(),setTimeout(function(){e.$meter.fadeIn(400)},220))}}),LLMS.Pricing_Tables={init:function(){var t=this;a("body").hasClass("wp-admin")||a(".llms-access-plans").length&&(LLMS.wait_for_matchHeight(function(){t.bind()}),this.$locked=a('a[href="#llms-plan-locked"]'),this.$locked.length&&LLMS.wait_for_popover(function(){t.bind_locked()}))},bind:function(){a(".llms-access-plan-content").matchHeight(),a(".llms-access-plan-pricing.trial").matchHeight()},bind_locked:function(){this.$locked.each(function(){a(this).webuiPopover({animation:"pop",closeable:!0,content:function(t){var e=a('<div class="llms-members-only-restrictions" />');return e.append(t.$element.closest(".llms-access-plan").find(".llms-access-plan-restrictions ul").clone()),e},placement:"top",style:"inverse",title:LLMS.l10n.translate("Members Only Pricing"),width:"280px"})})}},LLMS.Review={init:function(){this.bind()},bind:function(){a("#llms_review_submit_button").click(function(){""!==a("#review_title").val()&&""!==a("#review_text").val()?jQuery.ajax({type:"post",dataType:"json",url:window.llms.ajaxurl,data:{action:"LLMSSubmitReview",review_title:a("#review_title").val(),review_text:a("#review_text").val(),pageID:a("#post_ID").val()},success:function(){console.log("Review success"),a("#review_box").hide("swing"),a("#thank_you_box").show("swing")},error:function(t,e,n){console.log(t),console.log(e),console.log(n)}}):(""===a("#review_title").val()?a("#review_title_error").show("swing"):a("#review_title_error").hide("swing"),""===a("#review_text").val()?a("#review_text_error").show("swing"):a("#review_text_error").hide("swing"))}),a("#_llms_display_reviews").attr("checked")?(a(".llms-num-reviews-top").addClass("top"),a(".llms-num-reviews-bottom").show()):a(".llms-num-reviews-bottom").hide(),a("#_llms_display_reviews").change(function(){a("#_llms_display_reviews").attr("checked")?(a(".llms-num-reviews-top").addClass("top"),a(".llms-num-reviews-bottom").show()):(a(".llms-num-reviews-top").removeClass("top"),a(".llms-num-reviews-bottom").hide())})}},LLMS.Spinner={get:function(t,e){var n=t.find(".llms-spinning").first();return n.length||(n=a('<div class="llms-spinning"><i class="llms-spinner '+(e=e||"default")+'"></i></div>'),t.append(n)),n},start:function(t,e){var n=this;t.each(function(){n.get(a(this),e).show()})},stop:function(t){var e=this;t.each(function(){e.get(a(this)).hide()})}},function(t){var e;if("function"==typeof define&&define.amd&&(define(t),e=!0),"object"==typeof exports&&(module.exports=t(),e=!0),!e){var n=window.Cookies,i=window.Cookies=t();i.noConflict=function(){return window.Cookies=n,i}}}(function(){function a(){for(var t=0,e={};t<arguments.length;t++){var n=arguments[t];for(var i in n)e[i]=n[i]}return e}function c(t){return t.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function t(l){function r(){}function n(t,e,n){if("undefined"!=typeof document){"number"==typeof(n=a({path:"/"},r.defaults,n)).expires&&(n.expires=new Date(+new Date+864e5*n.expires)),n.expires=n.expires?n.expires.toUTCString():"";try{var i=JSON.stringify(e);/^[\{\[]/.test(i)&&(e=i)}catch(t){}e=l.write?l.write(e,t):encodeURIComponent(String(e)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var s="";for(var o in n)n[o]&&(s+="; "+o,!0!==n[o]&&(s+="="+n[o].split(";")[0]));return document.cookie=t+"="+e+s}}function e(t,e){if("undefined"!=typeof document){for(var n={},i=document.cookie?document.cookie.split("; "):[],s=0;s<i.length;s++){var o=i[s].split("="),r=o.slice(1).join("=");e||'"'!==r.charAt(0)||(r=r.slice(1,-1));try{var a=c(o[0]);if(r=(l.read||l)(r,a)||c(r),e)try{r=JSON.parse(r)}catch(t){}if(n[a]=r,t===a)break}catch(t){}}return t?n[t]:n}}return r.set=n,r.get=function(t){return e(t,!1)},r.getJSON=function(t){return e(t,!0)},r.remove=function(t,e){n(t,"",a(e,{expires:-1}))},r.defaults={},r.withConverter=t,r}(function(){})}),LLMS.Storage=function(i){var s=this,o=Cookies.noConflict();this.clearAll=function(){o.remove(i)},this.clear=function(t){var e=s.getAll();return delete e[t],o.set(i,e)},this.getAll=function(){return o.getJSON(i)||{}},this.get=function(t,e){var n=s.getAll();return n[t]?n[t]:e},this.set=function(t,e){var n=s.getAll();return n[t]=e,o.set(i,n)}},LLMS.StudentDashboard={screen:"",meter_exists:0,init:function(){a(".llms-student-dashboard").length&&(this.meter_exists=a(".llms-password-strength-meter").length,this.bind(),"orders"===this.get_screen()&&this.bind_orders())},bind:function(){var r=this;a('.llms-student-dashboard a[href="#llms-password-change-toggle"]').on("click",function(t){t.preventDefault();var e=a(this),n=e.text(),i=e.attr("data-action"),s="hide"===i?"show":"hide",o=e.attr("data-text");r.password_toggle(i),"show"===i?e.attr("tabindex","-777"):e.removeAttr("tabindex"),e.attr("data-action",s).attr("data-text",n).text(o)}),this.meter_exists?a(".llms-person-form.edit-account").on("llms-password-strength-ready",function(){r.password_toggle("hide")}):r.password_toggle("hide"),a(".llms-donut").each(function(){LLMS.Donut(a(this))})},bind_orders:function(){a("#llms-cancel-subscription-form").on("submit",this.order_cancel_warning),a("#llms_update_payment_method").on("click",function(){a('input[name="llms_payment_gateway"]:checked').trigger("change"),a(this).closest("form").find(".llms-switch-payment-source-main").slideToggle("200")})},get_screen:function(){return this.screen||(this.screen=a(".llms-student-dashboard").attr("data-current")),this.screen},order_cancel_warning:function(t){t.preventDefault();var e=LLMS.l10n.translate("Are you sure you want to cancel your subscription?");window.confirm(LLMS.l10n.translate(e))&&(a(this).off("submit",this.order_cancel_warning),a(this).submit())},password_toggle:function(t){t=t||"show";var e=a("#password, #password_confirm, #current_password"),n=a("#password").closest("form");a(".llms-change-password")[t](),"show"===t?(e.attr("required","required"),this.meter_exists&&n.on("submit",LLMS.PasswordStrength,LLMS.PasswordStrength.submit)):(e.removeAttr("required").val(""),this.meter_exists&&(n.off("submit",LLMS.PasswordStrength.submit),LLMS.PasswordStrength.check_strength()))}},LLMS.Tracking=function(i){var s=this,o=new LLMS.Storage("llms-tracking");function t(t){document.removeEventListener("visibilitychange",n)}function e(t){s.addEvent("page.exit")}function n(t){var e=document.hidden?"page.blur":"page.focus";s.addEvent(e)}i="string"==typeof i?JSON.parse(i):i,this.addEvent=function(t,e){if(e=e||{},"string"==typeof t&&(e.event=t),i.events&&-1!==i.events.indexOf(e.event)){t=s.makeEventObj(e);var n=o.get("events",[]);n.push(t),o.set("events",n),o.set("nonce",i.nonce)}},this.getSettings=function(){return i},this.makeEventObj=function(t){return a.extend(t,{url:window.location.href,time:Math.round((new Date).getTime()/1e3)})},a("body").hasClass("wp-admin")||(o.set("nonce",i.nonce),s.addEvent("page.load"),window.addEventListener("beforeunload",t),window.addEventListener("unload",e),document.addEventListener("visibilitychange",n))},llms.tracking=new LLMS.Tracking(llms.tracking),LLMS.Rest={init:function(){this.bind()},bind:function(){},is_path:function(t){for(var e=!1,n=window.location.href,i=0;i<t.length;i++)0<n.search(t[i])&&!e&&(e=!0);return e},get_query_vars:function(){for(var t,e=[],n=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),i=0;i<n.length;i++)t=n[i].split("="),e.push(t[0]),e[t[0]]=t[1];return e}},LLMS.init=function(){for(var t in LLMS)"object"==typeof LLMS[t]&&null!==LLMS[t]&&void 0!==LLMS[t].init&&"function"==typeof LLMS[t].init&&LLMS[t].init()},LLMS.is_touch_device=function(){var t=" -webkit- -moz- -o- -ms- ".split(" ");if("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)return!0;var e,n=["(",t.join("touch-enabled),("),"heartz",")"].join("");return e=n,window.matchMedia(e).matches},LLMS.wait_for_matchHeight=function(t){this.wait_for(function(){return void 0!==a.fn.matchHeight},t)},LLMS.wait_for_popover=function(t){this.wait_for(function(){return void 0!==a.fn.webuiPopover},t)},LLMS.wait_for=function(t,e){var n,i=0;n=setInterval(function(){if(300<=i)console.log("could not load dependency");else{if(!t())return console.log("waiting..."),void i++;e()}clearInterval(n)},100)},LLMS.init(a)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
