var LLMS=window.LLMS||{};!function(r){"use strict";LLMS.Achievements={init:function(){var t=this;r(".llms-achievement")&&r(document).on("ready",function(){t.bind(),t.maybe_open()})},bind:function(){var i=this;r(".llms-achievement").each(function(){i.create_modal(r(this))}),r(".llms-achievement").on("click",function(){var t=r(this),e="achievement-"+t.attr("data-id"),s=r("#"+e);s.length||i.create_modal(t),s.iziModal("open")})},create_modal:function(e){var t="achievement-"+e.attr("data-id"),s=r("#"+t);s.length||(s=r('<div class="llms-achievement-modal" id="'+t+'" />'),r("body").append(s)),s.iziModal({headerColor:"#3a3a3a",group:"achievements",history:!0,loop:!0,overlayColor:"rgba( 0, 0, 0, 0.6 )",transitionIn:"fadeInDown",transitionOut:"fadeOutDown",width:340,onOpening:function(t){t.setTitle(e.find(".llms-achievement-title").html()),t.setSubtitle(e.find(".llms-achievement-date").html()),t.setContent('<div class="llms-achievement">'+e.html()+"</div>")},onClosing:function(){window.history.pushState("",document.title,window.location.pathname+window.location.search)}})},maybe_open:function(){var t=window.location.hash;t&&-1!==t.indexOf("achievement-")&&r('a[href="'+t+'"]').first().trigger("click")}},LLMS.Ajax={url:window.ajaxurl||window.llms.ajaxurl,type:"post",data:[],cache:!1,dataType:"json",async:!0,response:[],init:function(t){if(null===t||"object"!=typeof t)return!1;t.url=this.url,t.type="type"in t?t.type:this.type,t.data="data"in t?t.data:this.data,t.cache="cache"in t?t.cache:this.cache,t.dataType="dataType"in t?t.dataType:this.dataType,t.async="async"in t?t.async:this.async,t.data._ajax_nonce=wp_ajax_data.nonce;var e=LLMS.Rest.get_query_vars();return t.data.post_id="post"in e?e.post:null,!t.data.post_id&&r("input#post_ID").length&&(t.data.post_id=r("input#post_ID").val()),t},call:function(t){var e=this.init(t);return!!e&&(this.request(e),this)},request:function(t){return r.ajax(t),this}},LLMS.Donut=function(t){function e(t){this.settings=r.extend({element:t.element,percent:100},t),this.circle=this.settings.element.find("path"),this.settings.stroke_width=parseInt(this.circle.css("stroke-width")),this.radius=(parseInt(this.settings.element.css("width"))-this.settings.stroke_width)/2,this.angle=-97.5,this.i=Math.round(.75*this.settings.percent),this.first=!0,this.animate=function(){this.timer=setInterval(this.loop.bind(this),10)},this.loop=function(){this.angle+=5,this.angle%=360;var t,e=this.angle/180*Math.PI,s=this.radius+this.settings.stroke_width/2+Math.cos(e)*this.radius,i=this.radius+this.settings.stroke_width/2+Math.sin(e)*this.radius;!0===this.first?(t=this.circle.attr("d")+" M "+s+" "+i,this.first=!1):t=this.circle.attr("d")+" L "+s+" "+i,this.circle.attr("d",t),this.i--,this.i<=0&&clearInterval(this.timer)}}var s;(s=t).append('<svg preserveAspectRatio="xMidYMid" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M100,100" /></svg>'),new e({element:s,percent:s.attr("data-perc")}).animate()},LLMS.Instructors={init:function(){var t=this;r("body").hasClass("wp-admin")||r(".llms-instructors").length&&LLMS.wait_for_matchHeight(function(){t.bind()})},bind:function(){r(".llms-instructors .llms-author").matchHeight()}},LLMS.l10n=LLMS.l10n||{},LLMS.l10n.translate=function(t){return this.strings[t]?this.strings[t]:t},LLMS.l10n.replace=function(t,e){var s=this.translate(t);return r.each(e,function(t,e){-1!==t.indexOf("s")?e=e.toString():-1!==t.indexOf("d")&&(e*=1),s=s.replace(t,e)}),s},LLMS.LessonPreview={$els:null,init:function(){var t=this;this.$locked=r('a[href="#llms-lesson-locked"]'),this.$locked.length&&t.bind(),r(".llms-course-navigation").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},bind:function(){var s=this;this.$locked.on("click",function(){return!1}),this.$locked.on("mouseenter",function(){var t=r(this).find(".llms-tooltip");if(!t.length){var e=r(this).attr("data-tooltip-msg");e||(e=LLMS.l10n.translate("You do not have permission to access this content")),t=s.get_tooltip(e),r(this).append(t)}setTimeout(function(){t.addClass("show")},10)}),this.$locked.on("mouseleave",function(){r(this).find(".llms-tooltip").removeClass("show")})},match_height:function(){r(".llms-course-navigation .llms-lesson-link").matchHeight()},get_tooltip:function(t){var e=r('<div class="llms-tooltip" />');return e.append('<div class="llms-tooltip-content">'+t+"</div>"),e}},LLMS.Loops={init:function(){var t=this;r(".llms-loop").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},match_height:function(){r(".llms-loop-item .llms-loop-item-content").matchHeight(),r(".llms-achievement-loop-item .llms-achievement").matchHeight(),r(".llms-certificate-loop-item .llms-certificate").matchHeight()}},LLMS.OutlineCollapse={$outlines:null,init:function(){this.$outlines=r(".llms-widget-syllabus--collapsible"),this.$outlines.length&&this.bind()},bind:function(){var i=this;this.$outlines.each(function(){var t=r(this),e=t.find(".llms-section .section-header");e.on("click",function(t){t.preventDefault();var e=r(this).closest(".llms-section");switch(i.get_section_state(e)){case"closed":i.open_section(e);break;case"opened":i.close_section(e)}}),t.find(".llms-collapse-toggle").on("click",function(t){t.preventDefault();var s="close"===r(this).attr("data-action")?"opened":"closed";e.each(function(){var t=r(this).closest(".llms-section"),e=i.get_section_state(t);if(s!==e)return!0;switch(e){case"closed":i.close_section(t);break;case"opened":i.open_section(t)}r(this).trigger("click")})})})},close_section:function(t){t.removeClass("llms-section--opened").addClass("llms-section--closed")},open_section:function(t){t.removeClass("llms-section--closed").addClass("llms-section--opened")},get_section_state:function(t){return t.hasClass("llms-section--opened")?"opened":"closed"}},r.extend(LLMS.PasswordStrength,{$pass:r(".llms-password"),$conf:r(".llms-password-confirm"),$meter:r(".llms-password-strength-meter"),$form:null,init:function(){if(!r("body").hasClass("wp-admin")&&this.$meter.length){this.$form=this.$pass.closest("form");var t,e=this,s=0;t=setInterval(function(){if(300<=s)console.log("cannot do password strength meter.");else{if("undefined"==typeof wp&&void 0===wp.passwordStrength)return void s++;e.bind(),e.$form.trigger("llms-password-strength-ready")}clearInterval(t)},100)}},bind:function(){var t=this;this.$form.hasClass("llms-checkout")||this.$form.on("submit",t,t.submit),t.$pass.add(t.$conf).on("keyup",function(){t.check_strength()})},check_strength:function(){var t=this.$pass.closest(".llms-form-field"),e=this.$conf.closest(".llms-form-field"),s=this.$pass.val().length,i=this.$conf.val().length;if(!s&&!i)return t.removeClass("valid invalid"),e.removeClass("valid invalid"),void this.$meter.hide();this.get_current_strength_status()?(t.removeClass("invalid").addClass("valid"),i&&e.removeClass("invalid").addClass("valid")):(t.removeClass("valid").addClass("invalid"),i&&e.removeClass("valid").addClass("invalid")),this.$meter.removeClass("too-short very-weak weak medium strong mismatch"),this.$meter.show().addClass(this.get_current_strength("slug")),this.$meter.html(this.get_current_strength("text"))},checkout:function(t,e){t.get_current_strength_status()?e(!0):e(LLMS.l10n.translate("There is an issue with your chosen password."))},get_blacklist:function(){return wp.passwordStrength.userInputBlacklist()},get_current_strength:function(t){t=t||"int";var e,s=this.$pass.val(),i=this.$conf.val();return s.length<6?e=-1:0===(e=wp.passwordStrength.meter(s,this.get_blacklist(),i))&&(e=1),"slug"===t?this.get_strength_slug(e):"text"===t?this.get_strength_text(e):e},get_current_strength_status:function(){var t=this.get_current_strength(),e=this.get_strength_value(this.get_minimum_strength());return 5!==t&&e<=t},get_strength_slug:function(t){var e={"-1":"too-short",1:"very-weak",2:"weak",3:"medium",4:"strong",5:"mismatch"};return e[t]?e[t]:e[5]},get_strength_text:function(t){var e={"-1":LLMS.l10n.translate("Too Short"),1:LLMS.l10n.translate("Very Weak"),2:LLMS.l10n.translate("Weak"),3:LLMS.l10n.translate("Medium"),4:LLMS.l10n.translate("Strong"),5:LLMS.l10n.translate("Mismatch")};return e[t]?e[t]:e[5]},get_strength_value:function(t){var e={"too-short":-1,"very-weak":1,weak:2,medium:3,strong:4,mismatch:5};return e[t]?e[t]:e.mismatch},submit:function(t){var e=t.data;t.preventDefault(),e.$pass.trigger("keyup"),e.get_current_strength_status()?(e.$form.off("submit",e.submit),e.$form.trigger("submit")):(r("html, body").animate({scrollTop:e.$meter.offset().top-100},200),e.$meter.hide(),setTimeout(function(){e.$meter.fadeIn(400)},220))}}),LLMS.Pricing_Tables={init:function(){var t=this;r("body").hasClass("wp-admin")||r(".llms-access-plans").length&&(LLMS.wait_for_matchHeight(function(){t.bind()}),this.$locked=r('a[href="#llms-plan-locked"]'),this.$locked.length&&LLMS.wait_for_popover(function(){t.bind_locked()}))},bind:function(){r(".llms-access-plan-content").matchHeight(),r(".llms-access-plan-pricing.trial").matchHeight()},bind_locked:function(){this.$locked.each(function(){r(this).webuiPopover({animation:"pop",closeable:!0,content:function(t){var e=r('<div class="llms-members-only-restrictions" />');return e.append(t.$element.closest(".llms-access-plan").find(".llms-access-plan-restrictions ul").clone()),e},placement:"top",style:"inverse",title:LLMS.l10n.translate("Members Only Pricing"),width:"280px"})})}},LLMS.Review={init:function(){this.bind()},bind:function(){r("#llms_review_submit_button").click(function(){""!==r("#review_title").val()&&""!==r("#review_text").val()?jQuery.ajax({type:"post",dataType:"json",url:window.llms.ajaxurl,data:{action:"LLMSSubmitReview",review_title:r("#review_title").val(),review_text:r("#review_text").val(),pageID:r("#post_ID").val()},success:function(){console.log("Review success"),r("#review_box").hide("swing"),r("#thank_you_box").show("swing")},error:function(t,e,s){console.log(t),console.log(e),console.log(s)}}):(""===r("#review_title").val()?r("#review_title_error").show("swing"):r("#review_title_error").hide("swing"),""===r("#review_text").val()?r("#review_text_error").show("swing"):r("#review_text_error").hide("swing"))}),r("#_llms_display_reviews").attr("checked")?(r(".llms-num-reviews-top").addClass("top"),r(".llms-num-reviews-bottom").show()):r(".llms-num-reviews-bottom").hide(),r("#_llms_display_reviews").change(function(){r("#_llms_display_reviews").attr("checked")?(r(".llms-num-reviews-top").addClass("top"),r(".llms-num-reviews-bottom").show()):(r(".llms-num-reviews-top").removeClass("top"),r(".llms-num-reviews-bottom").hide())})}},LLMS.Spinner={get:function(t,e){var s=t.find(".llms-spinning").first();return s.length||(s=r('<div class="llms-spinning"><i class="llms-spinner '+(e=e||"default")+'"></i></div>'),t.append(s)),s},start:function(t,e){var s=this;t.each(function(){s.get(r(this),e).show()})},stop:function(t){var e=this;t.each(function(){e.get(r(this)).hide()})}},LLMS.StudentDashboard={screen:"",meter_exists:0,init:function(){r(".llms-student-dashboard").length&&(this.meter_exists=r(".llms-password-strength-meter").length,this.bind(),"orders"===this.get_screen()&&this.bind_orders())},bind:function(){var a=this;r('.llms-student-dashboard a[href="#llms-password-change-toggle"]').on("click",function(t){t.preventDefault();var e=r(this),s=e.text(),i=e.attr("data-action"),n="hide"===i?"show":"hide",o=e.attr("data-text");a.password_toggle(i),"show"===i?e.attr("tabindex","-777"):e.removeAttr("tabindex"),e.attr("data-action",n).attr("data-text",s).text(o)}),this.meter_exists?r(".llms-person-form.edit-account").on("llms-password-strength-ready",function(){a.password_toggle("hide")}):a.password_toggle("hide"),r(".llms-donut").each(function(){LLMS.Donut(r(this))})},bind_orders:function(){r("#llms-cancel-subscription-form").on("submit",this.order_cancel_warning),r("#llms_update_payment_method").on("click",function(){r('input[name="llms_payment_gateway"]:checked').trigger("change"),r(this).closest("form").find(".llms-switch-payment-source-main").slideToggle("200")})},get_screen:function(){return this.screen||(this.screen=r(".llms-student-dashboard").attr("data-current")),this.screen},order_cancel_warning:function(t){t.preventDefault();var e=LLMS.l10n.translate("Are you sure you want to cancel your subscription?");window.confirm(LLMS.l10n.translate(e))&&(r(this).off("submit",this.order_cancel_warning),r(this).submit())},password_toggle:function(t){t||(t="show");var e=r("#password, #password_confirm, #current_password"),s=r("#password").closest("form");r(".llms-change-password")[t](),"show"===t?(e.attr("required","required"),this.meter_exists&&s.on("submit",LLMS.PasswordStrength,LLMS.PasswordStrength.submit)):(e.removeAttr("required").val(""),this.meter_exists&&(s.off("submit",LLMS.PasswordStrength.submit),LLMS.PasswordStrength.check_strength()))}},LLMS.Rest={init:function(){this.bind()},bind:function(){},is_path:function(t){for(var e=!1,s=window.location.href,i=0;i<t.length;i++)0<s.search(t[i])&&!e&&(e=!0);return e},get_query_vars:function(){for(var t,e=[],s=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),i=0;i<s.length;i++)t=s[i].split("="),e.push(t[0]),e[t[0]]=t[1];return e}},LLMS.init=function(){for(var t in LLMS)"object"==typeof LLMS[t]&&null!==LLMS[t]&&void 0!==LLMS[t].init&&"function"==typeof LLMS[t].init&&LLMS[t].init()},LLMS.wait_for_matchHeight=function(t){this.wait_for(function(){return void 0!==r.fn.matchHeight},t)},LLMS.wait_for_popover=function(t){this.wait_for(function(){return void 0!==r.fn.webuiPopover},t)},LLMS.wait_for=function(t,e){var s,i=0;s=setInterval(function(){if(300<=i)console.log("could not load dependency");else{if(!t())return console.log("waiting..."),void i++;e()}clearInterval(s)},100)},LLMS.init(r)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
