var LLMS=window.LLMS||{};!function(d){"use strict";LLMS.Achievements={init:function(){var t=this;d(".llms-achievement")&&d(document).on("ready",function(){t.bind(),t.maybe_open()})},bind:function(){var i=this;d(".llms-achievement").each(function(){i.create_modal(d(this))}),d(".llms-achievement").on("click",function(){var t=d(this),e="achievement-"+t.attr("data-id"),n=d("#"+e);n.length||i.create_modal(t),n.iziModal("open")})},create_modal:function(e){var t="achievement-"+e.attr("data-id"),n=d("#"+t);n.length||(n=d('<div class="llms-achievement-modal" id="'+t+'" />'),d("body").append(n)),n.iziModal({headerColor:"#3a3a3a",group:"achievements",history:!0,loop:!0,overlayColor:"rgba( 0, 0, 0, 0.6 )",transitionIn:"fadeInDown",transitionOut:"fadeOutDown",width:340,onOpening:function(t){t.setTitle(e.find(".llms-achievement-title").html()),t.setSubtitle(e.find(".llms-achievement-date").html()),t.setContent('<div class="llms-achievement">'+e.html()+"</div>")},onClosing:function(){window.history.pushState("",document.title,window.location.pathname+window.location.search)}})},maybe_open:function(){var t=window.location.hash;t&&-1!==t.indexOf("achievement-")&&d('a[href="'+t+'"]').first().trigger("click")}},LLMS.Ajax={url:window.ajaxurl||window.llms.ajaxurl,type:"post",data:[],cache:!1,dataType:"json",async:!0,response:[],init:function(t){if(null===t||"object"!=typeof t)return!1;t.url="url"in t?t.url:this.url,t.type="type"in t?t.type:this.type,t.data="data"in t?t.data:this.data,t.cache="cache"in t?t.cache:this.cache,t.dataType="dataType"in t?t.dataType:this.dataType,t.async="async"in t?t.async:this.async,t.data._ajax_nonce=wp_ajax_data.nonce;var e=LLMS.Rest.get_query_vars();return t.data.post_id="post"in e?e.post:null,!t.data.post_id&&d("input#post_ID").length&&(t.data.post_id=d("input#post_ID").val()),t},call:function(t){var e=this.init(t);return!!e&&(this.request(e),this)},request:function(t){return d.ajax(t),this}},LLMS.Donut=function(t){function e(t){this.settings=d.extend({element:t.element,percent:100},t),this.circle=this.settings.element.find("path"),this.settings.stroke_width=parseInt(this.circle.css("stroke-width")),this.radius=(parseInt(this.settings.element.css("width"))-this.settings.stroke_width)/2,this.angle=-97.5,this.i=Math.round(.75*this.settings.percent),this.first=!0,this.animate=function(){this.timer=setInterval(this.loop.bind(this),10)},this.loop=function(){this.angle+=5,this.angle%=360;var t,e=this.angle/180*Math.PI,n=this.radius+this.settings.stroke_width/2+Math.cos(e)*this.radius,i=this.radius+this.settings.stroke_width/2+Math.sin(e)*this.radius;!0===this.first?(t=this.circle.attr("d")+" M "+n+" "+i,this.first=!1):t=this.circle.attr("d")+" L "+n+" "+i,this.circle.attr("d",t),this.i--,this.i<=0&&clearInterval(this.timer)}}var n;(n=t).append('<svg preserveAspectRatio="xMidYMid" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M100,100" /></svg>'),new e({element:n,percent:n.attr("data-perc")}).animate()},LLMS.Forms={locale:{},locale_defaults:{},$countries:null,$states:null,$states_holder:null,init:function(){if(!d("body").hasClass("wp-admin")){var t=this;t.bind_matching_fields(),t.bind_voucher_field(),t.bind_edit_account(),LLMS.wait_for(function(){return void 0!==d.fn.llmsSelect2},function(){t.bind_l10n_selects()})}},bind_edit_account:function(){d("form.llms-person-form.edit-account").length&&(this.setup_toggle_field(d("#email_address, #email_address_confirm")),this.setup_toggle_field(d("#password, #password_confirm, #password_current, #llms-password-strength-meter")))},bind_l10n_selects:function(){var e=this;e.$countries=d(".llms-l10n-country-select select"),e.$states=d(".llms-l10n-state-select select"),e.$zips=d("#llms_billing_zip"),e.$countries.length&&(e.$states.length&&e.prep_state_field(),e.$countries.add(e.$states).llmsSelect2({width:"100%"}),window.llms.locale&&(e.locale=JSON.parse(window.llms.locale),e.locale_defaults={state:e.get_label_text(e.get_field_parent(e.$states).find("label"))}),e.$countries.on("change",function(){var t=d(this).val();e.update_state_options(t),e.update_locale_info(t)}).trigger("change"))},bind_matching_fields:function(){d("input[data-match]").not('[type="password"]').each(function(){var n,i=d(this),s=d("#"+i.attr("data-match"));s.length&&(n=i.closest(".llms-form-field").add(s.closest(".llms-form-field")),i.on("input change",function(){var t=i.val(),e=s.val();t&&e&&t!==e?n.addClass("invalid"):n.removeClass("invalid")}))})},bind_voucher_field:function(){d("#llms-voucher-toggle").on("click",function(t){t.preventDefault(),d("#llms_voucher").toggle()})},get_field_parent:function(t){var e=t.closest(".wp-block-column");return e.length?e:t.closest(".llms-form-field")},get_label_text:function(t){var e=t.clone();return e.find("*").remove(),e.text().trim()},prep_state_field:function(){var t=this.$states.closest(".llms-form-field");this.$holder=d('<select disabled style="display:none !important;" />'),this.$holder.appendTo(t),this.$states.find("optgroup").appendTo(this.$holder)},setup_toggle_field:function(e){var n=this,t=d(e[0]),i=this.get_field_parent(t),s=d('<a href="#"></a>'),o=d('<div class="llms-form-field type-html llms-cols-12 llms-cols-last"></div>'),a=LLMS.l10n.replace("Change your %s",{"%s":this.get_label_text(i.find("label")).toLowerCase()}),l=LLMS.l10n.replace("Cancel %s change",{"%s":this.get_label_text(i.find("label")).toLowerCase()}),r=2<e.length?this.get_field_parent(d(e[e.length-1])):i,c=r.hasClass("wp-block-column")?r.parent():r;function h(){s.text(a),e.each(function(){n.get_field_parent(d(this)).hide(),d(this).removeAttr("required"),d(this).attr("disabled","disabled")})}s.on("click",function(t){t.preventDefault(),i.is(":visible")?h():(s.text(l),e.each(function(){n.get_field_parent(d(this)).show(),d(this).attr("required","required"),d(this).removeAttr("disabled")}))}),o.append(s),c.after('<div class="clear"></div>'),c.after(o),h()},update_label:function(t,e){var n=this.get_field_parent(t).find("label"),i=n.find(".llms-required").clone();n.html(e),n.append(i)},update_locale_info:function(t){if(this.locale&&this.locale[t]){var e=this.locale[t],n=e.state?e.state:this.locale_defaults.state;this.update_label(this.$states,n);var i=this.get_field_parent(this.$zips);this.$zips.removeAttr("disabled"),e.zip?(this.update_label(this.$zips,e.zip),i.show()):(this.$zips.attr("disabled","disabled"),i.hide())}},update_state_options:function(t){if(this.$states.length){var e=this.$holder.find('optgroup[data-key="'+t+'"] option').clone(),n=this.get_field_parent(this.$states);e.length?(this.$states.html(e),this.$states.removeAttr("disabled"),n.show()):(this.$states.html("<option>&nbsp</option>"),this.$states.attr("disabled","disabled"),n.hide())}}},LLMS.Instructors={init:function(){var t=this;d("body").hasClass("wp-admin")||d(".llms-instructors").length&&LLMS.wait_for_matchHeight(function(){t.bind()})},bind:function(){d(".llms-instructors .llms-author").matchHeight()}},LLMS.l10n=LLMS.l10n||{},LLMS.l10n.translate=function(t){return this.strings[t]?this.strings[t]:t},LLMS.l10n.replace=function(t,e){var n=this.translate(t);return d.each(e,function(t,e){-1!==t.indexOf("s")?e=e.toString():-1!==t.indexOf("d")&&(e*=1),n=n.replace(t,e)}),n},LLMS.LessonPreview={$els:null,init:function(){var t=this;this.$locked=d('a[href="#llms-lesson-locked"]'),this.$locked.length&&t.bind(),d(".llms-course-navigation").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},bind:function(){var n=this;this.$locked.on("click",function(){return!1}),this.$locked.on("mouseenter",function(){var t=d(this).find(".llms-tooltip");if(!t.length){var e=d(this).attr("data-tooltip-msg");e=e||LLMS.l10n.translate("You do not have permission to access this content"),t=n.get_tooltip(e),d(this).append(t)}setTimeout(function(){t.addClass("show")},10)}),this.$locked.on("mouseleave",function(){d(this).find(".llms-tooltip").removeClass("show")})},match_height:function(){d(".llms-course-navigation .llms-lesson-link").matchHeight()},get_tooltip:function(t){var e=d('<div class="llms-tooltip" />');return e.append('<div class="llms-tooltip-content">'+t+"</div>"),e}},LLMS.Loops={init:function(){var t=this;d(".llms-loop").length&&LLMS.wait_for_matchHeight(function(){t.match_height()})},match_height:function(){d(".llms-loop-item .llms-loop-item-content").matchHeight(),d(".llms-achievement-loop-item .llms-achievement").matchHeight(),d(".llms-certificate-loop-item .llms-certificate").matchHeight()}},LLMS.OutlineCollapse={$outlines:null,init:function(){this.$outlines=d(".llms-widget-syllabus--collapsible"),this.$outlines.length&&this.bind()},bind:function(){var i=this;this.$outlines.each(function(){var t=d(this),e=t.find(".llms-section .section-header");e.on("click",function(t){t.preventDefault();var e=d(this).closest(".llms-section");switch(i.get_section_state(e)){case"closed":i.open_section(e);break;case"opened":i.close_section(e)}}),t.find(".llms-collapse-toggle").on("click",function(t){t.preventDefault();var n="close"===d(this).attr("data-action")?"opened":"closed";e.each(function(){var t=d(this).closest(".llms-section"),e=i.get_section_state(t);if(n!==e)return!0;switch(e){case"closed":i.close_section(t);break;case"opened":i.open_section(t)}d(this).trigger("click")})})})},close_section:function(t){t.removeClass("llms-section--opened").addClass("llms-section--closed")},open_section:function(t){t.removeClass("llms-section--closed").addClass("llms-section--opened")},get_section_state:function(t){return t.hasClass("llms-section--opened")?"opened":"closed"}},d.extend(LLMS.PasswordStrength,{$meter:d(".llms-password-strength-meter"),$pass:null,$conf:null,$form:null,init:function(){if(!d("body").hasClass("wp-admin")&&this.setup_references()){var t=this;LLMS.wait_for(function(){return"undefined"!=typeof wp&&void 0!==wp.passwordStrength},function(){t.bind(),t.$form.trigger("llms-password-strength-ready")})}},bind:function(){var t=this;this.$form.hasClass("llms-checkout")||(console.log(t),this.$form.on("submit",t,t.submit)),t.$pass.add(t.$conf).on("keyup",function(){t.check_strength()})},check_strength:function(){var t=this.$pass.closest(".llms-form-field"),e=this.$conf.closest(".llms-form-field"),n=this.$pass.val().length,i=this.$conf.length?this.$conf.val().length:0;if(!n&&!i)return t.removeClass("valid invalid"),e.removeClass("valid invalid"),void this.$meter.hide();this.get_current_strength_status()?(t.removeClass("invalid").addClass("valid"),i&&e.removeClass("invalid").addClass("valid")):(t.removeClass("valid").addClass("invalid"),i&&e.removeClass("valid").addClass("invalid")),this.$meter.removeClass("too-short very-weak weak medium strong mismatch"),this.$meter.show().addClass(this.get_current_strength("slug")),this.$meter.html(this.get_current_strength("text"))},checkout:function(t,e){t.get_current_strength_status()?e(!0):e(LLMS.l10n.translate("There is an issue with your chosen password."))},get_blacklist:function(){var e=wp.passwordStrength.userInputBlacklist().concat(this.get_setting("blacklist",[]));return this.$form.find('input[type="text"], input[type="email"], input[type="tel"], input[type="number"]').each(function(){var t=d(this).val();t&&e.push(t)}),e},get_current_strength:function(t){t=t||"int";var e,n=this.$pass.val(),i=this.$conf.val();return n.length<this.get_setting("min_length",6)?e=-1:0===(e=wp.passwordStrength.meter(n,this.get_blacklist(),i))&&(e=1),"slug"===t?this.get_strength_slug(e):"text"===t?this.get_strength_text(e):e},get_current_strength_status:function(){var t=this.get_current_strength(),e=this.get_strength_value(this.get_minimum_strength());return 5!==t&&e<=t},get_minimum_strength:function(){return this.get_setting("min_strength","strong")},get_setting:function(t,e){var n=this.get_settings();return n[t]?n[t]:e},get_strength_slug:function(t){var e={"-1":"too-short",1:"very-weak",2:"weak",3:"medium",4:"strong",5:"mismatch"};return e[t]?e[t]:e[5]},get_strength_text:function(t){var e={"-1":LLMS.l10n.translate("Too Short"),1:LLMS.l10n.translate("Very Weak"),2:LLMS.l10n.translate("Weak"),3:LLMS.l10n.translate("Medium"),4:LLMS.l10n.translate("Strong"),5:LLMS.l10n.translate("Mismatch")};return e[t]?e[t]:e[5]},get_strength_value:function(t){var e={"too-short":-1,"very-weak":1,weak:2,medium:3,strong:4,mismatch:5};return e[t]?e[t]:e.mismatch},setup_references:function(){return!!this.$meter.length&&(this.$form=this.$meter.closest("form"),this.$pass=this.$form.find("input#password"),this.$pass.length&&this.$pass.attr("data-match")&&(this.$conf=this.$form.find("#"+this.$pass.attr("data-match"))),0<this.$pass.length)},submit:function(t){console.log(t);var e=t.data;t.preventDefault(),e.$pass.trigger("keyup"),e.get_current_strength_status()?(e.$form.off("submit",e.submit),e.$form.trigger("submit")):(d("html, body").animate({scrollTop:e.$meter.offset().top-100},200),e.$meter.hide(),setTimeout(function(){e.$meter.fadeIn(400)},220))}}),LLMS.Pricing_Tables={init:function(){var t=this;d("body").hasClass("wp-admin")||d(".llms-access-plans").length&&(LLMS.wait_for_matchHeight(function(){t.bind()}),this.$locked=d('a[href="#llms-plan-locked"]'),this.$locked.length&&LLMS.wait_for_popover(function(){t.bind_locked()}))},bind:function(){d(".llms-access-plan-content").matchHeight(),d(".llms-access-plan-pricing.trial").matchHeight()},bind_locked:function(){this.$locked.each(function(){d(this).webuiPopover({animation:"pop",closeable:!0,content:function(t){var e=d('<div class="llms-members-only-restrictions" />');return e.append(t.$element.closest(".llms-access-plan").find(".llms-access-plan-restrictions ul").clone()),e},placement:"top",style:"inverse",title:LLMS.l10n.translate("Members Only Pricing"),width:"280px"})})}},LLMS.Review={init:function(){this.bind()},bind:function(){d("#llms_review_submit_button").click(function(){""!==d("#review_title").val()&&""!==d("#review_text").val()?jQuery.ajax({type:"post",dataType:"json",url:window.llms.ajaxurl,data:{action:"LLMSSubmitReview",review_title:d("#review_title").val(),review_text:d("#review_text").val(),pageID:d("#post_ID").val()},success:function(){console.log("Review success"),d("#review_box").hide("swing"),d("#thank_you_box").show("swing")},error:function(t,e,n){console.log(t),console.log(e),console.log(n)}}):(""===d("#review_title").val()?d("#review_title_error").show("swing"):d("#review_title_error").hide("swing"),""===d("#review_text").val()?d("#review_text_error").show("swing"):d("#review_text_error").hide("swing"))}),d("#_llms_display_reviews").attr("checked")?(d(".llms-num-reviews-top").addClass("top"),d(".llms-num-reviews-bottom").show()):d(".llms-num-reviews-bottom").hide(),d("#_llms_display_reviews").change(function(){d("#_llms_display_reviews").attr("checked")?(d(".llms-num-reviews-top").addClass("top"),d(".llms-num-reviews-bottom").show()):(d(".llms-num-reviews-top").removeClass("top"),d(".llms-num-reviews-bottom").hide())})}},LLMS.Spinner={get:function(t,e){var n=t.find(".llms-spinning").first();return n.length||(n=d('<div class="llms-spinning"><i class="llms-spinner '+(e=e||"default")+'"></i></div>'),t.append(n)),n},start:function(t,e){var n=this;t.each(function(){n.get(d(this),e).show()})},stop:function(t){var e=this;t.each(function(){e.get(d(this)).hide()})}},function(t){var e;if("function"==typeof define&&define.amd&&(define(t),e=!0),"object"==typeof exports&&(module.exports=t(),e=!0),!e){var n=window.Cookies,i=window.Cookies=t();i.noConflict=function(){return window.Cookies=n,i}}}(function(){function l(){for(var t=0,e={};t<arguments.length;t++){var n=arguments[t];for(var i in n)e[i]=n[i]}return e}function c(t){return t.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function t(r){function a(){}function n(t,e,n){if("undefined"!=typeof document){"number"==typeof(n=l({path:"/"},a.defaults,n)).expires&&(n.expires=new Date(1*new Date+864e5*n.expires)),n.expires=n.expires?n.expires.toUTCString():"";try{var i=JSON.stringify(e);/^[\{\[]/.test(i)&&(e=i)}catch(t){}e=r.write?r.write(e,t):encodeURIComponent(String(e)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var s="";for(var o in n)n[o]&&(s+="; "+o,!0!==n[o]&&(s+="="+n[o].split(";")[0]));return document.cookie=t+"="+e+s}}function e(t,e){if("undefined"!=typeof document){for(var n={},i=document.cookie?document.cookie.split("; "):[],s=0;s<i.length;s++){var o=i[s].split("="),a=o.slice(1).join("=");e||'"'!==a.charAt(0)||(a=a.slice(1,-1));try{var l=c(o[0]);if(a=(r.read||r)(a,l)||c(a),e)try{a=JSON.parse(a)}catch(t){}if(n[l]=a,t===l)break}catch(t){}}return t?n[t]:n}}return a.set=n,a.get=function(t){return e(t,!1)},a.getJSON=function(t){return e(t,!0)},a.remove=function(t,e){n(t,"",l(e,{expires:-1}))},a.defaults={},a.withConverter=t,a}(function(){})}),LLMS.Storage=function(i){var s=this,o=Cookies.noConflict();this.clearAll=function(){o.remove(i)},this.clear=function(t){var e=s.getAll();return delete e[t],o.set(i,e)},this.getAll=function(){return o.getJSON(i)||{}},this.get=function(t,e){var n=s.getAll();return n[t]?n[t]:e},this.set=function(t,e){var n=s.getAll();return n[t]=e,o.set(i,n)}},LLMS.StudentDashboard={screen:"",meter_exists:0,init:function(){d(".llms-student-dashboard").length&&(this.meter_exists=d(".llms-password-strength-meter").length,this.bind(),"orders"===this.get_screen()&&this.bind_orders())},bind:function(){var a=this;d('.llms-student-dashboard a[href="#llms-password-change-toggle"]').on("click",function(t){t.preventDefault();var e=d(this),n=e.text(),i=e.attr("data-action"),s="hide"===i?"show":"hide",o=e.attr("data-text");a.password_toggle(i),"show"===i?e.attr("tabindex","-777"):e.removeAttr("tabindex"),e.attr("data-action",s).attr("data-text",n).text(o)}),this.meter_exists?d(".llms-person-form.edit-account").on("llms-password-strength-ready",function(){a.password_toggle("hide")}):a.password_toggle("hide"),d(".llms-donut").each(function(){LLMS.Donut(d(this))})},bind_orders:function(){d("#llms-cancel-subscription-form").on("submit",this.order_cancel_warning),d("#llms_update_payment_method").on("click",function(){d('input[name="llms_payment_gateway"]:checked').trigger("change"),d(this).closest("form").find(".llms-switch-payment-source-main").slideToggle("200")})},get_screen:function(){return this.screen||(this.screen=d(".llms-student-dashboard").attr("data-current")),this.screen},order_cancel_warning:function(t){t.preventDefault();var e=LLMS.l10n.translate("Are you sure you want to cancel your subscription?");window.confirm(LLMS.l10n.translate(e))&&(d(this).off("submit",this.order_cancel_warning),d(this).submit())},password_toggle:function(t){t=t||"show";var e=d("#password, #password_confirm, #current_password"),n=d("#password").closest("form");d(".llms-change-password")[t](),"show"===t?(e.attr("required","required"),this.meter_exists&&n.on("submit",LLMS.PasswordStrength,LLMS.PasswordStrength.submit)):(e.removeAttr("required").val(""),this.meter_exists&&(n.off("submit",LLMS.PasswordStrength.submit),LLMS.PasswordStrength.check_strength()))}},LLMS.Tracking=function(i){i=i||{};var s=this,o=new LLMS.Storage("llms-tracking");function t(t){document.removeEventListener("visibilitychange",n)}function e(t){s.addEvent("page.exit")}function n(t){var e=document.hidden?"page.blur":"page.focus";s.addEvent(e)}i="string"==typeof i?JSON.parse(i):i,this.addEvent=function(t,e){if(e=e||{},"string"==typeof t&&(e.event=t),i.events&&-1!==i.events.indexOf(e.event)){t=s.makeEventObj(e);var n=o.get("events",[]);n.push(t),o.set("events",n)}},this.getSettings=function(){return i},this.makeEventObj=function(t){return Object.assign(t,{url:window.location.href,time:Math.round((new Date).getTime()/1e3)})},d("body").hasClass("wp-admin")||(i.nonce&&o.set("nonce",i.nonce),s.addEvent("page.load"),window.addEventListener("beforeunload",t),window.addEventListener("unload",e),document.addEventListener("visibilitychange",n))},llms.tracking=new LLMS.Tracking(llms.tracking),LLMS.Rest={init:function(){this.bind()},bind:function(){},is_path:function(t){for(var e=!1,n=window.location.href,i=0;i<t.length;i++)0<n.search(t[i])&&!e&&(e=!0);return e},get_query_vars:function(){for(var t,e=[],n=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),i=0;i<n.length;i++)t=n[i].split("="),e.push(t[0]),e[t[0]]=t[1];return e}},LLMS.init=function(){for(var t in LLMS)"object"==typeof LLMS[t]&&null!==LLMS[t]&&void 0!==LLMS[t].init&&"function"==typeof LLMS[t].init&&LLMS[t].init()},LLMS.is_touch_device=function(){var t=" -webkit- -moz- -o- -ms- ".split(" ");if("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)return!0;var e,n=["(",t.join("touch-enabled),("),"heartz",")"].join("");return e=n,window.matchMedia(e).matches},LLMS.wait_for_matchHeight=function(t){this.wait_for(function(){return void 0!==d.fn.matchHeight},t)},LLMS.wait_for_popover=function(t){this.wait_for(function(){return void 0!==d.fn.webuiPopover},t)},LLMS.wait_for=function(t,e){var n,i=0;n=setInterval(function(){if(300<=i)console.log("could not load dependency");else{if(!t())return console.log("waiting..."),void i++;e()}clearInterval(n)},100)},LLMS.init(d)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
