!function(c){window.llms=window.llms||{},window.llms.metabox_product=function(){this.$plans=null,this.temp_id=Math.floor(7777*Math.random()+777),this.validation_class="llms-invalid",this.init=function(a){var e=this;e.$plans=c("#llms-access-plans"),e.bind_visibility();var l=c("#lifterlms-product #llms-product-options-access-plans");if(l.length)if(a)e.bind();else{LLMS.Spinner.start(l);var t,s=0;t=setInterval(function(){if(300<=s)l.html(LLMS.l10n.translate("There was an error loading the necessary resources. Please try again."));else{if("undefined"==typeof tinyMCE)return void s++;e.bind()}clearInterval(t),LLMS.Spinner.stop(l)},100)}},this.bind=function(){var t=this;t.has_plan_limit_been_reached()&&t.toggle_create_button(),c("#llms-save-access-plans").on("click",function(a){a.preventDefault(),t.save_plans()}),t.$plans.on("change","[data-controller-id]",function(){t.controller_change(c(this))}),c("#llms-access-plans .llms-access-plan-datepicker").datepicker({dateFormat:"mm/dd/yy"}),c("#llms-access-plans [data-controller-id]").trigger("change"),c("#llms-new-access-plan").on("click",function(){var a=c(this);t.init_plan(),a.attr("disabled","disabled"),setTimeout(function(){t.has_plan_limit_been_reached()||a.removeAttr("disabled")},500)}),t.$plans.sortable({handle:".llms-drag-handle",items:".llms-access-plan",start:function(a,e){t.$plans.addClass("dragging")},stop:function(a,e){t.$plans.removeClass("dragging"),t.update_plan_orders()}}),t.$plans.on("keyup","input.llms-plan-title",function(){var a=c(this),e=a.closest(".llms-access-plan").find("span.llms-plan-title"),l=a.val(),t=l||e.attr("data-default");e.text(t)}),t.$plans.on("keyup llms-validate-plan-field","input",function(a,e){var l=c(this);l[0].checkValidity()?l.removeClass(t.validation_class):(l.addClass(t.validation_class),"keyup"===a.type&&l[0].reportValidity()),e&&!e.cascade||l.closest(".llms-access-plan").trigger("llms-validate-plan")}),t.$plans.on("llms-validate-plan",".llms-access-plan",function(){var a=c(this);a.find("input").each(function(){c(this).trigger("llms-validate-plan-field",{cascade:!1})}),a.find("."+t.validation_class).length?a.addClass(t.validation_class):a.removeClass(t.validation_class)}),t.$plans.on("llms-collapsible-toggled",".llms-access-plan",function(){var a=c(this);a.hasClass("opened")&&setTimeout(function(){a.find("input.llms-invalid").each(function(){c(this)[0].reportValidity()})},500)}),t.$plans.on("click",".llms-plan-delete",function(a){a.stopPropagation(),t.delete_plan(c(this))}),window.llms.metaboxes.post_select(c("#llms-access-plans .llms-availability-restrictions")),c("#_llms_plans_content_llms-new-access-plan-model").attr("disabled","disabled"),tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,"_llms_plans_content_llms-new-access-plan-model")},this.bind_visibility=function(){var e=c("#llms-catalog-visibility-select"),l=c("a.llms-edit-catalog-visibility"),a=c("a.llms-save-catalog-visibility"),t=c("a.llms-cancel-catalog-visibility");l.on("click",function(a){a.preventDefault(),e.slideDown("fast"),l.hide()}),a.on("click",function(a){a.preventDefault(),e.slideUp("fast"),l.show(),c("#llms-catalog-visibility-display").text(c('input[name="_llms_visibility"]:checked').attr("data-label"))}),t.on("click",function(a){a.preventDefault(),e.slideUp("fast"),l.show()})},this.delete_plan=function(a){var e=this,l=a.closest(".llms-access-plan"),t=l.attr("data-id"),s=LLMS.l10n.translate("After deleting this access plan, any students subscribed to this plan will still have access and will continue to make recurring payments according to the access plan's settings. If you wish to terminate their plans you must do so manually. This action cannot be reversed.");t?window.confirm(s)&&(LLMS.Spinner.start(l),window.LLMS.Ajax.call({data:{action:"delete_access_plan",plan_id:t},success:function(a){LLMS.Spinner.stop(l),a.success?(e.remove_plan_el(l),e.trigger_update_hook()):a.message&&alert(a.message)}})):e.remove_plan_el(l)},this.controller_change=function(a){var e=a.attr("data-controller-id"),i=a.val(),l=a.closest(".llms-access-plan").find('[data-controller="'+e+'"]');"checkbox"===a.attr("type")&&(i=a.is(":checked")?i:"no"),l.each(function(){var a,e,l=c(this),t="SELECT"===l[0].nodeName||"INPUT"===l[0].nodeName||"TEXTAREA"===l[0].nodeName?l:l.find("input, select, textarea"),s=l.attr("data-value-is"),n=l.attr("data-value-is-not");switch(void 0!==s&&!1!==s?e="==":void 0!==n&&!1!==n&&(e="!="),e){case"==":a=i==s?"show":"hide";break;case"!=":a=i!=n?"show":"hide"}"show"===a?(l.show(),t.removeAttr("disabled").trigger("change")):"hide"===a&&(l.hide(),t.attr("disabled","disabled"))})},this.get_plans_array=function(){tinyMCE.triggerSave();for(var a=this.$plans.closest("form").serializeArray(),e=[],l=0;l<a.length;l++)if(-1!==a[l].name.indexOf("_llms_plans")){var t=a[l].name.replace("_llms_plans[","").split("]["),s=1*t[0]-1,n=t[1].replace("]",""),i=3===t.length?"array":"single";e[s]||(e[s]={}),"array"===i?(e[s][n]||(e[s][n]=[]),e[s][n].push(a[l].value)):e[s][n]=a[l].value}return e},this.has_plan_limit_been_reached=function(){return window.llms.product.access_plan_limit<=c("#llms-access-plans .llms-access-plan").length},this.init_plan=function(){if(!this.has_plan_limit_been_reached()){var a=c("#llms-new-access-plan-model").clone();$existing_plans=c("#llms-access-plans .llms-access-plan"),$editor=a.find("#_llms_plans_content_llms-new-access-plan-model"),a.removeAttr("id"),$editor.removeAttr("id").attr("id","_llms_plans_content_"+this.temp_id),this.temp_id++,a.find("select, input, textarea").each(function(){c(this).removeAttr("disabled")}),a.find(".llms-access-plan-datepicker").datepicker({dateFormat:"mm/dd/yy"}),a.appendTo("#llms-access-plans"),this.update_plan_orders(),a.find(".llms-collapsible-header").trigger("click"),this.has_plan_limit_been_reached()&&this.toggle_create_button("disable"),window.llms.metaboxes.post_select(a.find(".llms-availability-restrictions")),a.find("[data-controller-id]").trigger("change"),c(document).trigger("llms-plan-init",a)}},this.save_plans=function(){var e=this;e.$plans.find(".llms-access-plan").each(function(){c(this).trigger("llms-validate-plan")}),e.$plans.find("."+e.validation_class).length?e.$plans.find(".llms-access-plan."+e.validation_class).not(".opened").first().find(".llms-collapsible-header").trigger("click"):(LLMS.Spinner.start(e.$plans),window.LLMS.Ajax.call({data:{action:"llms_update_access_plans",plans:e.get_plans_array()},complete:function(){LLMS.Spinner.stop(e.$plans)},error:function(a,e,l){console.error("llms access plan save error encounterd:",a),alert(LLMS.l10n.translate("An error was encounterd during the save attempt. Please try again.")+" ["+e+": "+l+"]")},success:function(a){!a.success&&a.code&&"error"===a.code?alert(a.message):a.data&&a.data.html&&(c("#llms-product-options-access-plans").replaceWith(a.data.html),e.init(!0),window.llms.metaboxes.init(),e.update_plan_orders(),e.trigger_update_hook())}}))},this.toggle_create_button=function(a){var e=c("#llms-new-access-plan");"disable"===a?e.attr("disabled","disabled"):e.removeAttr("disabled")},this.remove_plan_el=function(a){var e=this;a.fadeOut(400),setTimeout(function(){a.remove(),e.has_plan_limit_been_reached()||e.toggle_create_button("enable")},450)},this.trigger_update_hook=function(){c(document).trigger("llms-access-plans-updated")},this.update_plan_orders=function(){c("#llms-access-plans .llms-access-plan").each(function(){var a=c(this),e=a.find(".plan-order"),l=a.find('textarea[id^="_llms_plans_content_"]').attr("id"),t=1*e.val(),s=a.index();tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,l),a.find("select, input, textarea").each(function(){var a=c(this).attr("name");a&&c(this).attr("name",a.replace(t,s))}),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,l),e.val(s)})},this.init()};new window.llms.metabox_product}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
