!function(o){window.llms=window.llms||{},window.llms.metabox_product=function(){this.$plans=null,this.$save=null,this.temp_id=Math.floor(7777*Math.random()+777),this.validation_class="llms-invalid",this.init=function(e){var t=this;t.$plans=o("#llms-access-plans"),t.$save=o("#llms-save-access-plans"),t.bind_visibility();var a=o("#lifterlms-product #llms-product-options-access-plans");if(a.length)if(e)t.bind();else{LLMS.Spinner.start(a);var l,s=0;l=setInterval(function(){if(300<=s)a.html(LLMS.l10n.translate("There was an error loading the necessary resources. Please try again."));else{if("undefined"==typeof tinyMCE)return void s++;t.bind()}clearInterval(l),LLMS.Spinner.stop(a)},100)}},this.bind=function(){var s=this;setTimeout(function(){s.has_plan_limit_been_reached()&&s.toggle_create_button("disable")},500),0===s.get_current_plan_count()&&s.toggle_save_button("disable"),s.$save.on("click",function(e){e.preventDefault(),s.save_plans()}),s.$plans.on("change","[data-controller-id]",function(){s.controller_change(o(this))}),o("#llms-access-plans .llms-access-plan-datepicker").datepicker({dateFormat:"mm/dd/yy"}),o("#llms-access-plans [data-controller-id]").trigger("change"),o("#llms-new-access-plan").on("click",function(){s.init_plan(),s.toggle_create_button("disable"),s.toggle_save_button("enable"),setTimeout(function(){s.has_plan_limit_been_reached()||s.toggle_create_button("enable")},500)}),s.$plans.sortable({handle:".llms-drag-handle",items:".llms-access-plan",start:function(e,t){s.$plans.addClass("dragging")},stop:function(e,t){s.$plans.removeClass("dragging"),s.update_plan_orders()}}),s.$plans.on("keyup","input.llms-plan-title",function(){var e=o(this),t=e.closest(".llms-access-plan").find("span.llms-plan-title"),a=e.val(),l=a||t.attr("data-default");t.text(l)}),s.$plans.on("focusin","input",function(e,t){o(this).addClass("llms-has-been-focused")}),s.$plans.on("keyup focusout llms-validate-plan-field","input",function(e,t){var a=o(this);a[0].checkValidity()?a.removeClass(s.validation_class):(a.addClass(s.validation_class),"keyup"===e.type&&a[0].reportValidity()),t&&!t.cascade||a.closest(".llms-access-plan").trigger("llms-validate-plan",{original_event:e.type})}),s.$plans.on("llms-validate-plan",".llms-access-plan",function(e,t){t=t||{};var a=o(this),l=t.original_event?"input.llms-has-been-focused":"input";a.find(l).each(function(){o(this).trigger("llms-validate-plan-field",{cascade:!1})}),a.find("."+s.validation_class).length?a.addClass(s.validation_class):a.removeClass(s.validation_class)}),s.$plans.on("llms-collapsible-toggled",".llms-access-plan",function(){var e=o(this);e.hasClass("opened")&&setTimeout(function(){e.find("input.llms-invalid").each(function(){o(this)[0].reportValidity()})},500)}),s.$plans.on("click",".llms-plan-delete",function(e){e.stopPropagation(),s.delete_plan(o(this))}),window.llms.metaboxes.post_select(o("#llms-access-plans .llms-availability-restrictions")),o("#_llms_plans_content_llms-new-access-plan-model").attr("disabled","disabled"),tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,"_llms_plans_content_llms-new-access-plan-model")},this.bind_visibility=function(){var t=o("#llms-catalog-visibility-select"),a=o("a.llms-edit-catalog-visibility"),e=o("a.llms-save-catalog-visibility"),l=o("a.llms-cancel-catalog-visibility");a.on("click",function(e){e.preventDefault(),t.slideDown("fast"),a.hide()}),e.on("click",function(e){e.preventDefault(),t.slideUp("fast"),a.show(),o("#llms-catalog-visibility-display").text(o('input[name="_llms_visibility"]:checked').attr("data-label"))}),l.on("click",function(e){e.preventDefault(),t.slideUp("fast"),a.show()})},this.delete_plan=function(e){var t=this,a=e.closest(".llms-access-plan"),l=a.attr("data-id"),s=LLMS.l10n.translate("After deleting this access plan, any students subscribed to this plan will still have access and will continue to make recurring payments according to the access plan's settings. If you wish to terminate their plans you must do so manually. This action cannot be reversed.");l?window.confirm(s)&&(LLMS.Spinner.start(a),window.LLMS.Ajax.call({data:{action:"delete_access_plan",plan_id:l},success:function(e){setTimeout(function(){LLMS.Spinner.stop(a)},550),e.success?(t.remove_plan_el(a),t.trigger_update_hook(),setTimeout(function(){t.update_plan_orders()},500)):e.message&&alert(e.message)}})):t.remove_plan_el(a)},this.controller_change=function(e){var t=e.attr("data-controller-id"),i=e.val(),a=e.closest(".llms-access-plan").find('[data-controller="'+t+'"]');"checkbox"===e.attr("type")&&(i=e.is(":checked")?i:"no"),a.each(function(){var e,t,a=o(this),l="SELECT"===a[0].nodeName||"INPUT"===a[0].nodeName||"TEXTAREA"===a[0].nodeName?a:a.find("input, select, textarea"),s=a.attr("data-value-is"),n=a.attr("data-value-is-not");switch(void 0!==s&&!1!==s?t="==":void 0!==n&&!1!==n&&(t="!="),t){case"==":e=i==s?"show":"hide";break;case"!=":e=i!=n?"show":"hide"}"show"===e?(a.show(),l.removeAttr("disabled").trigger("change")):"hide"===e&&(a.hide(),l.attr("disabled","disabled"))})},this.get_current_plan_count=function(){return this.$plans.find(".llms-access-plan").length},this.get_plans_array=function(){tinyMCE.triggerSave();for(var e=this.$plans.closest("form").serializeArray(),t=[],a=0;a<e.length;a++)if(-1!==e[a].name.indexOf("_llms_plans")){var l=e[a].name.replace("_llms_plans[","").split("]["),s=1*l[0]-1,n=l[1].replace("]",""),i=3===l.length?"array":"single";t[s]||(t[s]={}),"array"===i?(t[s][n]||(t[s][n]=[]),t[s][n].push(e[a].value)):t[s][n]=e[a].value}return t},this.has_plan_limit_been_reached=function(){var e=window.llms.product.access_plan_limit;return this.get_current_plan_count()>=e},this.init_plan=function(){if(!this.has_plan_limit_been_reached()){var e=o("#llms-new-access-plan-model").clone();$existing_plans=o("#llms-access-plans .llms-access-plan"),$editor=e.find("#_llms_plans_content_llms-new-access-plan-model"),e.removeAttr("id"),$editor.removeAttr("id").attr("id","_llms_plans_content_"+this.temp_id),this.temp_id++,e.find("select, input, textarea").each(function(){o(this).removeAttr("disabled")}),e.find(".llms-access-plan-datepicker").datepicker({dateFormat:"mm/dd/yy"}),e.appendTo("#llms-access-plans"),this.update_plan_orders(),e.find(".llms-collapsible-header").trigger("click"),this.has_plan_limit_been_reached()&&this.toggle_create_button("disable"),window.llms.metaboxes.post_select(e.find(".llms-availability-restrictions")),e.find("[data-controller-id]").trigger("change"),o(document).trigger("llms-plan-init",e)}},this.save_plans=function(){var t=this;if(t.$plans.find(".llms-access-plan").each(function(){o(this).trigger("llms-validate-plan")}),t.$plans.find("."+t.validation_class).length)return t.$plans.find(".llms-access-plan."+t.validation_class).not(".opened").first().find(".llms-collapsible-header").trigger("click"),void o(document).trigger("llms-access-plan-validation-errors");LLMS.Spinner.start(t.$plans),t.$save.attr("disabled","disabled"),window.LLMS.Ajax.call({data:{action:"llms_update_access_plans",plans:t.get_plans_array()},complete:function(){LLMS.Spinner.stop(t.$plans),t.$save.removeAttr("disabled")},error:function(e,t,a){console.error("llms access plan save error encounterd:",e),alert(LLMS.l10n.translate("An error was encounterd during the save attempt. Please try again.")+" ["+t+": "+a+"]")},success:function(e){!e.success&&e.code&&"error"===e.code?alert(e.message):e.data&&e.data.html&&(o("#llms-product-options-access-plans").replaceWith(e.data.html),t.init(!0),window.llms.metaboxes.init(),t.update_plan_orders(),t.trigger_update_hook())}})},this.toggle_button=function(e,t){"disable"===t?e.attr("disabled","disabled"):e.removeAttr("disabled")},this.toggle_create_button=function(e){this.toggle_button(o("#llms-new-access-plan"),e)},this.toggle_save_button=function(e){this.toggle_button(this.$save,e)},this.remove_plan_el=function(e){var t=this;e.fadeOut(400),setTimeout(function(){e.remove(),t.has_plan_limit_been_reached()||t.toggle_create_button("enable"),0===t.get_current_plan_count()&&t.toggle_save_button("disable")},450)},this.trigger_update_hook=function(){o(document).trigger("llms-access-plans-updated")},this.update_plan_orders=function(){o("#llms-access-plans .llms-access-plan").each(function(){var e=o(this),t=e.find(".plan-order"),a=e.find('textarea[id^="_llms_plans_content_"]').attr("id"),l=1*t.val(),s=e.index();tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,a),e.find("select, input, textarea").each(function(){var e=o(this).attr("name");e&&o(this).attr("name",e.replace(l,s))}),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,a),t.val(s)})},this.init()};new window.llms.metabox_product}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
