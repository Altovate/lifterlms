!function(t,a){window.llms=window.llms||{};var e=function(){return this.charts_loaded=!1,this.data={},this.query=t.parseJSON(t("#llms-analytics-json").text()),this.timeout=8e3,this.$widgets=t(".llms-widget[data-method]"),this.init=function(){google.charts.load("current",{packages:["corechart"]}),google.charts.setOnLoadCallback(this.charts_ready),this.bind(),this.load_widgets()},this.bind=function(){t(".llms-datepicker").datepicker({dateFormat:"yy-mm-dd",maxDate:0}),t("#llms-students-ids-filter").llmsStudentsSelect2({multiple:!0,placeholder:LLMS.l10n.translate("Filter by Student(s)")}),t('a[href="#llms-toggle-filters"]').on("click",function(a){a.preventDefault(),t(".llms-analytics-filters").slideToggle(100)}),t("#llms-custom-date-submit").on("click",function(){t('input[name="range"]').val("custom")}),t("#llms-date-quick-filters a.llms-nav-link[data-range]").on("click",function(a){a.preventDefault(),t('input[name="range"]').val(t(this).attr("data-range")),t("form.llms-reporting-nav").submit()})},this.charts_ready=function(){window.llms.analytics.charts_loaded=!0,window.llms.analytics.draw_chart()},this.draw_chart=function(){if(this.charts_loaded&&this.is_loading_finished()){var t=document.getElementById("llms-charts-wrapper");if(t){var a=this,e=new google.visualization.ComboChart(t),i=a.get_chart_data(),s={chartArea:{height:"75%",width:"85%"},colors:["#606C38","#E85D75","#EF8354","#C64191","#731963"],height:560,lineWidth:4,seriesType:"bars",series:a.get_chart_series_options(),vAxes:{0:{format:"currency"},1:{format:""}}};i.length&&(i=google.visualization.arrayToDataTable(i),i.sort([{column:0}]),e.draw(i,s))}}},this.is_loading_finished=function(){return!t(".llms-widget.is-loading").length},this.load_widgets=function(){var a=this;this.$widgets.each(function(){a.load_widget(t(this))})},this.load_widget=function(a){var e,i=this,s=a.attr("data-method"),r=a.find("h1"),n=a.find(".llms-reload-widget"),d=LLMS.l10n.translate("Error");a.addClass("is-loading"),t.ajax({data:{action:"llms_widget_"+s,dates:i.query.dates,courses:i.query.current_courses,memberships:i.query.current_memberships,students:i.query.current_students},method:"POST",timeout:i.timeout,url:window.ajaxurl,success:function(t){e="success","undefined"!=typeof t.response&&(d=t.response,i.data[s]={chart_data:t.chart_data,response:t.response,results:t.results},n.remove())},error:function(t){e="error"},complete:function(s){"error"===e&&(d="timeout"===s.statusText?LLMS.l10n.translate("Request timed out"):LLMS.l10n.translate("Error"),n.length||(n=t('<a class="llms-reload-widget" href="#">'+LLMS.l10n.translate("Retry")+"</a>"),n.on("click",function(t){t.preventDefault(),i.load_widget(a)}),a.append(n))),a.removeClass("is-loading"),r.html(d),i.widget_finished(a)}})},this.get_date_diff=function(){var t=new Date(this.query.dates.end),a=new Date(this.query.dates.start);return Math.abs(t.getTime()-a.getTime())},this.get_chart_data_object=function(){var t,a,e,i,s=this,r=10368e6,n=this.get_date_diff(),d={};for(var l in s.data)if(s.data.hasOwnProperty(l)&&"object"==typeof s.data[l].chart_data&&"object"==typeof s.data[l].results&&(t=s.data[l].results))for(a=0;a<t.length;a++)switch(e=this.init_date(t[a].date),i=n<=r?new Date(e.getFullYear(),e.getMonth(),e.getDate()):new Date(e.getFullYear(),e.getMonth(),1),d[i]||(d[i]=this.get_empty_data_object(i)),s.data[l].chart_data.type){case"amount":d[i][l]=d[i][l]+1*t[a][s.data[l].chart_data.key];break;case"count":default:d[i][l]++}return d},this.get_chart_data=function(){var t=this,a=t.get_chart_data_object(),e=t.get_chart_headers();for(var i in a)if(a.hasOwnProperty(i)){var s=[a[i]._date];for(var r in a[i])a[i].hasOwnProperty(r)&&0!==r.indexOf("_")&&s.push(a[i][r]);e.push(s)}return e},this.get_empty_data_object=function(t){var a=this,e={_date:t};for(var i in a.data)a.data.hasOwnProperty(i)&&a.data[i].chart_data&&(e[i]=0);return e},this.get_chart_headers=function(){var t=this,a=[];a.push({label:LLMS.l10n.translate("Date"),id:"date",type:"date"});for(var e in t.data)t.data.hasOwnProperty(e)&&t.data[e].chart_data&&a.push(t.data[e].chart_data.header);return[a]},this.get_chart_series_options=function(){var t=this,a={};i=0;for(var e in t.data)if(t.data.hasOwnProperty(e)){if(t.data[e].chart_data){var s=t.data[e].chart_data.type;a[i]={type:"count"===s?"bars":"line",targetAxisIndex:"count"===s?1:0}}i++}return a},this.init_date=function(t){var a,e,i;return a=t.split(" "),e=a[0].split("-"),i=a[1].split(":"),new Date(e[0],e[1]-1,e[2],i[0],i[1],i[2])},this.widget_finished=function(t){this.is_loading_finished()&&this.draw_chart()},this.init(),this};window.llms.analytics=new e}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
