function llms_on_voucher_duplicate(e){if(e.length){for(var t=0;t<e.length;t++)jQuery('input[value="'+e[t].code+'"]').css("background-color","rgba(226, 96, 73, 0.6)");alert("Please make sure that there are no duplicate voucher codes.")}else jQuery("#post").submit()}!function(e){function t(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",a=0;a<12;a++)e+=t.charAt(Math.floor(Math.random()*t.length));return e}function a(){var e=r(),t={action:"check_voucher_duplicate",postId:jQuery("#post_ID").val(),codes:e},a=new Ajax("post",t,(!1));a.check_voucher_duplicate()}function r(){var t=[];return e('input[name="llms_voucher_code[]"]').each(function(){t.push(e(this).val())}),t}var l=[];e(document).ready(function(){function r(){e(".llms-voucher-delete").unbind("click"),e(".llms-voucher-delete").click(function(t){t.preventDefault();var a=e(this),r=a.data("id");o=!0,r?(l.push(r),e("#delete_ids").val(l.join(","))):n--,a.closest("tr").remove()})}var o=!1,n=0;e("#llms_voucher_add_codes").click(function(a){a.preventDefault();var l=e("#llms_voucher_add_quantity").val(),u=e("#llms_voucher_add_uses").val(),s="";if(o=!0,e.isNumeric(l)&&e.isNumeric(u)&&parseInt(l)>0&&parseInt(u)>0){if(l>50)return void alert("You can only generate 50 rows at a time");if(n+=parseInt(l),n>50)return alert("Please save before adding any more codes, limit is 50 at a time"),void(n-=parseInt(l));for(var c=1;c<=parseInt(l);c++)s+='<tr><td></td><td><input type="text" maxlength="20" placeholder="Code" value="'+t()+'" name="llms_voucher_code[]"><input type="hidden" name="llms_voucher_code_id[]" value="0"></td><td><span>0 / </span><input type="text" placeholder="Uses" value="'+u+'" class="llms-voucher-uses" name="llms_voucher_uses[]"></td><td><a href="#" class="llms-voucher-delete">'+delete_icon+"</a></td></tr>"}e("#llms_voucher_tbody").append(s),r()}),r(),e("#llms_voucher_tbody input").change(function(){o=!0}),e("#post").on("submit",function(){return"publish"===e("#publish").attr("name")&&e("<input />").attr("type","hidden").attr("name","publish").attr("value","true").appendTo("#post"),!0}),window.onbeforeunload=function(){return o?"If you leave this page you will lose your unsaved changes.":null},e("input[type=submit]").click(function(t){var r={},l=!1;return e('input[name="llms_voucher_code[]"]').each(function(){var t=e(this).val();r[t]?(e(this).css("background-color","rgba(226, 96, 73, 0.6)"),l=!0):r[t]=!0}),l?(alert("Please make sure that there are no duplicate voucher codes."),!1):e("#_llms_voucher_courses").val()||e("#_llms_voucher_membership").val()?(o=!1,a(),!1):(alert("Please select course or membership before saving."),!1)})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
